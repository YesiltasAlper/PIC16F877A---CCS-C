CCS PCM C Compiler, Version 5.015, 5967               06-Kas-21 13:10

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(8) Lab-8 [DUZELT] ------------[DUZELT]\(2) CCS_C\CCS_C.lst

               ROM used:   284 words (3%)
                           Largest free fragment is 2048
               RAM used:   32 (9%) at main() level
                           32 (9%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0CD
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   03F
.................... #include <16f877.h>  
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
002F:  BCF    0A.0
0030:  BCF    0A.1
0031:  BCF    0A.2
0032:  ADDWF  02,F
0033:  RETLW  05
0034:  RETLW  0A
0035:  RETLW  0B
0036:  RETLW  0C
0037:  RETLW  0D
0038:  RETLW  0E
0039:  RETLW  0F
003A:  RETLW  10
003B:  RETLW  11
003C:  RETLW  12
003D:  RETLW  13
003E:  RETLW  14
....................  
.................... #list 
....................  
.................... #use delay (clock = 4000000)     
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... #use fast_io(b) 
....................  
.................... unsigned int sayac1 = 0,sayac2 = 0,sayac3 = 0,sayac4 = 0; 
.................... unsigned int duty1 = 0,duty2 = 0,duty3 = 0, duty4 = 0; 
.................... unsigned int adim1 = 0,adim2 = 0,adim3 = 0,adim4 = 0; 
.................... unsigned int16 gecikme1 = 0,gecikme2 = 0,gecikme3 = 0,gecikme4 = 0; 
.................... const unsigned int servo_derece[] = {5,10,11,12,13,14,15,16,17,18,19,20}; 
....................  
.................... void servo_1(){ 
....................  
....................    if(sayac1 >= duty1) 
*
0051:  MOVF   2B,W
0052:  SUBWF  27,W
0053:  BTFSC  03.0
....................       output_low(pin_b0); 
0054:  BCF    06.0
....................    
....................    sayac1++; 
0055:  INCF   27,F
....................        
....................     if(sayac1 == 200) 
0056:  MOVF   27,W
0057:  SUBLW  C8
0058:  BTFSC  03.2
....................       sayac1 = 0; 
0059:  CLRF   27
....................        
....................     gecikme1++; 
005A:  INCF   33,F
005B:  BTFSC  03.2
005C:  INCF   34,F
....................      
....................     if(gecikme1 > 10000){ 
005D:  MOVF   34,W
005E:  SUBLW  26
005F:  BTFSC  03.0
0060:  GOTO   06F
0061:  XORLW  FF
0062:  BTFSS  03.2
0063:  GOTO   068
0064:  MOVF   33,W
0065:  SUBLW  10
0066:  BTFSC  03.0
0067:  GOTO   06F
....................       gecikme1 = 0; 
0068:  CLRF   34
0069:  CLRF   33
....................       adim1++; 
006A:  INCF   2F,F
....................        
....................     if(adim1 == 12) 
006B:  MOVF   2F,W
006C:  SUBLW  0C
006D:  BTFSC  03.2
....................       adim1 = 0; 
006E:  CLRF   2F
....................      } 
.................... } 
....................  
.................... void servo_2(){ 
....................  
....................    if(sayac2 >= duty2) 
006F:  MOVF   2C,W
0070:  SUBWF  28,W
0071:  BTFSC  03.0
....................       output_low(pin_b1); 
0072:  BCF    06.1
....................    
....................    sayac2++; 
0073:  INCF   28,F
....................        
....................     if(sayac2 == 200) 
0074:  MOVF   28,W
0075:  SUBLW  C8
0076:  BTFSC  03.2
....................       sayac2 = 0; 
0077:  CLRF   28
....................        
....................     gecikme2++; 
0078:  INCF   35,F
0079:  BTFSC  03.2
007A:  INCF   36,F
....................      
....................     if(gecikme2 > 10000){ 
007B:  MOVF   36,W
007C:  SUBLW  26
007D:  BTFSC  03.0
007E:  GOTO   08D
007F:  XORLW  FF
0080:  BTFSS  03.2
0081:  GOTO   086
0082:  MOVF   35,W
0083:  SUBLW  10
0084:  BTFSC  03.0
0085:  GOTO   08D
....................       gecikme2 = 0; 
0086:  CLRF   36
0087:  CLRF   35
....................       adim2++; 
0088:  INCF   30,F
....................        
....................     if(adim2 == 12) 
0089:  MOVF   30,W
008A:  SUBLW  0C
008B:  BTFSC  03.2
....................       adim2 = 0; 
008C:  CLRF   30
....................      } 
.................... } 
....................  
.................... void servo_3(){ 
....................  
....................    if(sayac3 >= duty3) 
008D:  MOVF   2D,W
008E:  SUBWF  29,W
008F:  BTFSC  03.0
....................       output_low(pin_b2); 
0090:  BCF    06.2
....................    
....................    sayac3++; 
0091:  INCF   29,F
....................        
....................     if(sayac3 == 200) 
0092:  MOVF   29,W
0093:  SUBLW  C8
0094:  BTFSC  03.2
....................       sayac3 = 0; 
0095:  CLRF   29
....................        
....................     gecikme3++; 
0096:  INCF   37,F
0097:  BTFSC  03.2
0098:  INCF   38,F
....................      
....................     if(gecikme3 > 10000){ 
0099:  MOVF   38,W
009A:  SUBLW  26
009B:  BTFSC  03.0
009C:  GOTO   0AB
009D:  XORLW  FF
009E:  BTFSS  03.2
009F:  GOTO   0A4
00A0:  MOVF   37,W
00A1:  SUBLW  10
00A2:  BTFSC  03.0
00A3:  GOTO   0AB
....................       gecikme3 = 0; 
00A4:  CLRF   38
00A5:  CLRF   37
....................       adim3++; 
00A6:  INCF   31,F
....................        
....................     if(adim3 == 12) 
00A7:  MOVF   31,W
00A8:  SUBLW  0C
00A9:  BTFSC  03.2
....................       adim3 = 0; 
00AA:  CLRF   31
....................      } 
.................... } 
....................  
.................... void servo_4(){ 
....................  
....................    if(sayac4 >= duty4) 
00AB:  MOVF   2E,W
00AC:  SUBWF  2A,W
00AD:  BTFSC  03.0
....................       output_low(pin_b3); 
00AE:  BCF    06.3
....................    
....................    sayac4++; 
00AF:  INCF   2A,F
....................        
....................     if(sayac4 == 200) 
00B0:  MOVF   2A,W
00B1:  SUBLW  C8
00B2:  BTFSC  03.2
....................       sayac4 = 0; 
00B3:  CLRF   2A
....................        
....................     gecikme4++; 
00B4:  INCF   39,F
00B5:  BTFSC  03.2
00B6:  INCF   3A,F
....................      
....................     if(gecikme4 > 10000){ 
00B7:  MOVF   3A,W
00B8:  SUBLW  26
00B9:  BTFSC  03.0
00BA:  GOTO   0C9
00BB:  XORLW  FF
00BC:  BTFSS  03.2
00BD:  GOTO   0C2
00BE:  MOVF   39,W
00BF:  SUBLW  10
00C0:  BTFSC  03.0
00C1:  GOTO   0C9
....................       gecikme4 = 0; 
00C2:  CLRF   3A
00C3:  CLRF   39
....................       adim4++; 
00C4:  INCF   32,F
....................        
....................     if(adim4 == 12) 
00C5:  MOVF   32,W
00C6:  SUBLW  0C
00C7:  BTFSC  03.2
....................       adim4 = 0; 
00C8:  CLRF   32
....................      } 
.................... } 
....................  
....................  
.................... #int_timer0 
.................... void timer0_kesme(){ 
....................     
....................    set_timer0(231); 
*
003F:  MOVLW  E7
0040:  MOVWF  01
....................     
....................    if((sayac1 == 0) && (sayac2 == 0) && (sayac3 == 0) && (sayac4 == 0)){ 
0041:  MOVF   27,F
0042:  BTFSS  03.2
0043:  GOTO   051
0044:  MOVF   28,F
0045:  BTFSS  03.2
0046:  GOTO   051
0047:  MOVF   29,F
0048:  BTFSS  03.2
0049:  GOTO   051
004A:  MOVF   2A,F
004B:  BTFSS  03.2
004C:  GOTO   051
....................       output_high(pin_b0); 
004D:  BSF    06.0
....................       output_high(pin_b1); 
004E:  BSF    06.1
....................       output_high(pin_b2); 
004F:  BSF    06.2
....................       output_high(pin_b3); 
0050:  BSF    06.3
....................    } 
....................     
....................    servo_1(); 
....................    servo_2(); 
....................    servo_3(); 
....................    servo_4(); 
*
00C9:  BCF    0B.2
00CA:  BCF    0A.3
00CB:  BCF    0A.4
00CC:  GOTO   01B
.................... } 
....................  
.................... void main(){ 
00CD:  MOVF   03,W
00CE:  ANDLW  1F
00CF:  MOVWF  03
00D0:  CLRF   27
00D1:  CLRF   28
00D2:  CLRF   29
00D3:  CLRF   2A
00D4:  CLRF   2B
00D5:  CLRF   2C
00D6:  CLRF   2D
00D7:  CLRF   2E
00D8:  CLRF   2F
00D9:  CLRF   30
00DA:  CLRF   31
00DB:  CLRF   32
00DC:  CLRF   34
00DD:  CLRF   33
00DE:  CLRF   36
00DF:  CLRF   35
00E0:  CLRF   38
00E1:  CLRF   37
00E2:  CLRF   3A
00E3:  CLRF   39
00E4:  BSF    03.5
00E5:  BSF    1F.0
00E6:  BSF    1F.1
00E7:  BSF    1F.2
00E8:  BCF    1F.3
00E9:  BCF    03.7
....................  
....................    setup_psp(PSP_DISABLED); 
00EA:  BCF    09.4
....................    setup_timer_1(T1_DISABLED);   
00EB:  BCF    03.5
00EC:  CLRF   10
....................    setup_CCP2(CCP_OFF); 
00ED:  MOVLW  F0
00EE:  ANDWF  1D,F
....................    setup_timer_2(T2_DISABLED,0,1); 
00EF:  MOVLW  00
00F0:  MOVWF  78
00F1:  MOVWF  12
00F2:  MOVLW  00
00F3:  BSF    03.5
00F4:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
00F5:  BSF    1F.0
00F6:  BSF    1F.1
00F7:  BSF    1F.2
00F8:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
00F9:  BCF    03.5
00FA:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
00FB:  MOVLW  F0
00FC:  ANDWF  17,F
....................     
....................    set_tris_b(0x00); 
00FD:  MOVLW  00
00FE:  BSF    03.5
00FF:  MOVWF  06
....................     
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_4); 
0100:  MOVF   01,W
0101:  ANDLW  C0
0102:  IORLW  01
0103:  MOVWF  01
....................    set_timer0(231); 
0104:  MOVLW  E7
0105:  BCF    03.5
0106:  MOVWF  01
....................        
....................    enable_interrupts(INT_timer0); 
0107:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
0108:  MOVLW  C0
0109:  IORWF  0B,F
....................     
....................    while(1){ 
....................       duty1 = servo_derece[adim1]; 
010A:  MOVF   2F,W
010B:  CALL   02F
010C:  MOVWF  78
010D:  MOVWF  2B
....................       duty2 = servo_derece[adim2]; 
010E:  MOVF   30,W
010F:  CALL   02F
0110:  MOVWF  78
0111:  MOVWF  2C
....................       duty3 = servo_derece[adim3]; 
0112:  MOVF   31,W
0113:  CALL   02F
0114:  MOVWF  78
0115:  MOVWF  2D
....................       duty4 = servo_derece[adim4]; 
0116:  MOVF   32,W
0117:  CALL   02F
0118:  MOVWF  78
0119:  MOVWF  2E
011A:  GOTO   10A
....................    } 
....................     
.................... } 
....................  
011B:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
