CCS PCM C Compiler, Version 5.015, 5967               04-Kas-21 17:51

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(15) ADC_10bit_[0-5V]\(2) CCS_C\CCS_C.lst

               ROM used:   1019 words (12%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           37 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   375
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 8C,20
0005:  DATA C4,21
0006:  DATA BA,12
0007:  DATA EC,3A
0008:  DATA 00,00
0009:  DATA 8A,23
000A:  DATA 65,39
000B:  DATA 69,36
000C:  DATA E9,36
000D:  DATA BA,12
000E:  DATA 2E,19
000F:  DATA 66,2B
0010:  DATA 00,10
*
00B6:  MOVLW  8E
00B7:  MOVWF  77
00B8:  MOVF   27,W
00B9:  MOVWF  78
00BA:  MOVF   26,W
00BB:  MOVWF  79
00BC:  CLRF   7A
00BD:  MOVF   78,F
00BE:  BTFSS  03.2
00BF:  GOTO   0CA
00C0:  MOVF   79,W
00C1:  MOVWF  78
00C2:  CLRF   79
00C3:  MOVLW  08
00C4:  SUBWF  77,F
00C5:  MOVF   78,F
00C6:  BTFSS  03.2
00C7:  GOTO   0CA
00C8:  CLRF   77
00C9:  GOTO   0D2
00CA:  BCF    03.0
00CB:  BTFSC  78.7
00CC:  GOTO   0D1
00CD:  RLF    79,F
00CE:  RLF    78,F
00CF:  DECF   77,F
00D0:  GOTO   0CA
00D1:  BCF    78.7
00D2:  BCF    0A.3
00D3:  BCF    0A.4
00D4:  GOTO   3B2 (RETURN)
00D5:  MOVF   33,W
00D6:  BTFSC  03.2
00D7:  GOTO   145
00D8:  MOVWF  3B
00D9:  MOVF   37,W
00DA:  BTFSC  03.2
00DB:  GOTO   145
00DC:  ADDWF  3B,F
00DD:  BTFSC  03.0
00DE:  GOTO   0E6
00DF:  MOVLW  7F
00E0:  SUBWF  3B,F
00E1:  BTFSS  03.0
00E2:  GOTO   145
00E3:  BTFSC  03.2
00E4:  GOTO   145
00E5:  GOTO   0EA
00E6:  MOVLW  81
00E7:  ADDWF  3B,F
00E8:  BTFSC  03.0
00E9:  GOTO   145
00EA:  MOVF   3B,W
00EB:  MOVWF  77
00EC:  CLRF   78
00ED:  CLRF   79
00EE:  CLRF   7A
00EF:  MOVF   34,W
00F0:  MOVWF  3F
00F1:  BSF    3F.7
00F2:  MOVF   35,W
00F3:  MOVWF  3E
00F4:  MOVF   36,W
00F5:  MOVWF  3D
00F6:  MOVLW  18
00F7:  MOVWF  3B
00F8:  CLRF   3C
00F9:  BTFSS  3D.0
00FA:  GOTO   113
00FB:  MOVF   3A,W
00FC:  ADDWF  7A,F
00FD:  BTFSS  03.0
00FE:  GOTO   105
00FF:  INCF   79,F
0100:  BTFSS  03.2
0101:  GOTO   105
0102:  INCF   78,F
0103:  BTFSC  03.2
0104:  BSF    3C.7
0105:  MOVF   39,W
0106:  ADDWF  79,F
0107:  BTFSS  03.0
0108:  GOTO   10C
0109:  INCF   78,F
010A:  BTFSC  03.2
010B:  BSF    3C.7
010C:  MOVF   38,W
010D:  MOVWF  35
010E:  BSF    35.7
010F:  MOVF   35,W
0110:  ADDWF  78,F
0111:  BTFSC  03.0
0112:  BSF    3C.7
0113:  RLF    3C,F
0114:  RRF    78,F
0115:  RRF    79,F
0116:  RRF    7A,F
0117:  RRF    3F,F
0118:  RRF    3E,F
0119:  RRF    3D,F
011A:  BCF    03.0
011B:  DECFSZ 3B,F
011C:  GOTO   0F8
011D:  MOVLW  01
011E:  ADDWF  77,F
011F:  BTFSC  03.0
0120:  GOTO   145
0121:  BTFSC  78.7
0122:  GOTO   12A
0123:  RLF    3F,F
0124:  RLF    7A,F
0125:  RLF    79,F
0126:  RLF    78,F
0127:  DECF   77,F
0128:  BTFSC  03.2
0129:  GOTO   145
012A:  BTFSS  3F.7
012B:  GOTO   13B
012C:  INCF   7A,F
012D:  BTFSS  03.2
012E:  GOTO   13B
012F:  INCF   79,F
0130:  BTFSS  03.2
0131:  GOTO   13B
0132:  INCF   78,F
0133:  BTFSS  03.2
0134:  GOTO   13B
0135:  RRF    78,F
0136:  RRF    79,F
0137:  RRF    7A,F
0138:  INCF   77,F
0139:  BTFSC  03.2
013A:  GOTO   145
013B:  MOVF   34,W
013C:  MOVWF  3C
013D:  MOVF   38,W
013E:  XORWF  3C,F
013F:  BTFSS  3C.7
0140:  GOTO   143
0141:  BSF    78.7
0142:  GOTO   149
0143:  BCF    78.7
0144:  GOTO   149
0145:  CLRF   77
0146:  CLRF   78
0147:  CLRF   79
0148:  CLRF   7A
0149:  RETURN
*
0188:  MOVF   0B,W
0189:  MOVWF  27
018A:  BCF    0B.7
018B:  BSF    03.5
018C:  BSF    03.6
018D:  BSF    0C.7
018E:  BSF    0C.0
018F:  NOP
0190:  NOP
0191:  BCF    03.5
0192:  BCF    03.6
0193:  BTFSC  27.7
0194:  BSF    0B.7
0195:  BTFSC  03.0
0196:  GOTO   1BF
0197:  BSF    03.6
0198:  MOVF   0C,W
0199:  ANDLW  7F
019A:  BCF    03.6
019B:  MOVWF  27
019C:  BSF    03.6
019D:  MOVF   0D,W
019E:  BCF    03.6
019F:  MOVWF  28
01A0:  BSF    03.6
01A1:  MOVF   0F,W
01A2:  BCF    03.6
01A3:  MOVWF  29
01A4:  MOVF   27,W
01A5:  MOVWF  33
01A6:  CALL   15C
01A7:  MOVF   28,W
01A8:  BSF    03.6
01A9:  MOVWF  0D
01AA:  BCF    03.6
01AB:  MOVF   29,W
01AC:  BSF    03.6
01AD:  MOVWF  0F
01AE:  BCF    03.6
01AF:  MOVF   0B,W
01B0:  MOVWF  2A
01B1:  BCF    0B.7
01B2:  BSF    03.5
01B3:  BSF    03.6
01B4:  BSF    0C.7
01B5:  BSF    0C.0
01B6:  NOP
01B7:  NOP
01B8:  BCF    03.5
01B9:  BCF    03.6
01BA:  BTFSC  2A.7
01BB:  BSF    0B.7
01BC:  DECFSZ 26,F
01BD:  GOTO   1BF
01BE:  GOTO   1DE
01BF:  BSF    03.6
01C0:  RLF    0C,W
01C1:  RLF    0E,W
01C2:  ANDLW  7F
01C3:  BCF    03.6
01C4:  MOVWF  27
01C5:  BSF    03.6
01C6:  MOVF   0D,W
01C7:  BCF    03.6
01C8:  MOVWF  28
01C9:  BSF    03.6
01CA:  MOVF   0F,W
01CB:  BCF    03.6
01CC:  MOVWF  29
01CD:  MOVF   27,W
01CE:  MOVWF  33
01CF:  CALL   15C
01D0:  MOVF   28,W
01D1:  BSF    03.6
01D2:  MOVWF  0D
01D3:  BCF    03.6
01D4:  MOVF   29,W
01D5:  BSF    03.6
01D6:  MOVWF  0F
01D7:  INCF   0D,F
01D8:  BTFSC  03.2
01D9:  INCF   0F,F
01DA:  BCF    03.0
01DB:  BCF    03.6
01DC:  DECFSZ 26,F
01DD:  GOTO   188
01DE:  RETURN
01DF:  CLRF   2E
01E0:  MOVF   04,W
01E1:  MOVWF  2D
01E2:  BCF    2E.0
01E3:  BTFSC  03.7
01E4:  BSF    2E.0
01E5:  SWAPF  27,W
01E6:  IORLW  F0
01E7:  MOVWF  29
01E8:  ADDWF  29,F
01E9:  ADDLW  E2
01EA:  MOVWF  2A
01EB:  ADDLW  32
01EC:  MOVWF  2C
01ED:  MOVF   27,W
01EE:  ANDLW  0F
01EF:  ADDWF  2A,F
01F0:  ADDWF  2A,F
01F1:  ADDWF  2C,F
01F2:  ADDLW  E9
01F3:  MOVWF  2B
01F4:  ADDWF  2B,F
01F5:  ADDWF  2B,F
01F6:  SWAPF  26,W
01F7:  ANDLW  0F
01F8:  ADDWF  2B,F
01F9:  ADDWF  2C,F
01FA:  RLF    2B,F
01FB:  RLF    2C,F
01FC:  COMF   2C,F
01FD:  RLF    2C,F
01FE:  MOVF   26,W
01FF:  ANDLW  0F
0200:  ADDWF  2C,F
0201:  RLF    29,F
0202:  MOVLW  07
0203:  MOVWF  28
0204:  MOVLW  0A
0205:  ADDWF  2C,F
0206:  DECF   2B,F
0207:  BTFSS  03.0
0208:  GOTO   205
0209:  ADDWF  2B,F
020A:  DECF   2A,F
020B:  BTFSS  03.0
020C:  GOTO   209
020D:  ADDWF  2A,F
020E:  DECF   29,F
020F:  BTFSS  03.0
0210:  GOTO   20D
0211:  ADDWF  29,F
0212:  DECF   28,F
0213:  BTFSS  03.0
0214:  GOTO   211
0215:  MOVLW  28
0216:  MOVWF  04
0217:  BCF    03.7
0218:  MOVLW  07
0219:  ANDWF  2D,W
021A:  BCF    2D.6
021B:  ADDWF  04,F
021C:  MOVLW  2C
021D:  SUBWF  04,W
021E:  BTFSC  03.2
021F:  BSF    2D.6
0220:  MOVF   00,W
0221:  MOVWF  77
0222:  BTFSS  03.2
0223:  GOTO   22C
0224:  BTFSC  2D.6
0225:  GOTO   22C
0226:  BTFSC  2D.4
0227:  GOTO   23E
0228:  BTFSC  2D.3
0229:  GOTO   22C
022A:  MOVLW  20
022B:  GOTO   22F
022C:  BSF    2D.3
022D:  BCF    2D.4
022E:  MOVLW  30
022F:  ADDWF  77,F
0230:  CLRF   27
0231:  MOVF   04,W
0232:  MOVWF  26
0233:  BCF    27.0
0234:  BTFSC  03.7
0235:  BSF    27.0
0236:  MOVF   77,W
0237:  MOVWF  33
0238:  CALL   15C
0239:  MOVF   26,W
023A:  MOVWF  04
023B:  BCF    03.7
023C:  BTFSC  27.0
023D:  BSF    03.7
023E:  INCF   04,F
023F:  BTFSS  2D.6
0240:  GOTO   21C
0241:  BCF    0A.3
0242:  BCF    0A.4
0243:  GOTO   3DC (RETURN)
0244:  BTFSC  03.1
0245:  GOTO   249
0246:  MOVLW  3B
0247:  MOVWF  04
0248:  BCF    03.7
0249:  CLRF   77
024A:  CLRF   78
024B:  CLRF   79
024C:  CLRF   7A
024D:  CLRF   3B
024E:  CLRF   3C
024F:  CLRF   3D
0250:  CLRF   3E
0251:  MOVF   3A,W
0252:  IORWF  39,W
0253:  IORWF  38,W
0254:  IORWF  37,W
0255:  BTFSC  03.2
0256:  GOTO   287
0257:  MOVLW  20
0258:  MOVWF  3F
0259:  BCF    03.0
025A:  RLF    33,F
025B:  RLF    34,F
025C:  RLF    35,F
025D:  RLF    36,F
025E:  RLF    3B,F
025F:  RLF    3C,F
0260:  RLF    3D,F
0261:  RLF    3E,F
0262:  MOVF   3A,W
0263:  SUBWF  3E,W
0264:  BTFSS  03.2
0265:  GOTO   270
0266:  MOVF   39,W
0267:  SUBWF  3D,W
0268:  BTFSS  03.2
0269:  GOTO   270
026A:  MOVF   38,W
026B:  SUBWF  3C,W
026C:  BTFSS  03.2
026D:  GOTO   270
026E:  MOVF   37,W
026F:  SUBWF  3B,W
0270:  BTFSS  03.0
0271:  GOTO   281
0272:  MOVF   37,W
0273:  SUBWF  3B,F
0274:  MOVF   38,W
0275:  BTFSS  03.0
0276:  INCFSZ 38,W
0277:  SUBWF  3C,F
0278:  MOVF   39,W
0279:  BTFSS  03.0
027A:  INCFSZ 39,W
027B:  SUBWF  3D,F
027C:  MOVF   3A,W
027D:  BTFSS  03.0
027E:  INCFSZ 3A,W
027F:  SUBWF  3E,F
0280:  BSF    03.0
0281:  RLF    77,F
0282:  RLF    78,F
0283:  RLF    79,F
0284:  RLF    7A,F
0285:  DECFSZ 3F,F
0286:  GOTO   259
0287:  MOVF   3B,W
0288:  MOVWF  00
0289:  INCF   04,F
028A:  MOVF   3C,W
028B:  MOVWF  00
028C:  INCF   04,F
028D:  MOVF   3D,W
028E:  MOVWF  00
028F:  INCF   04,F
0290:  MOVF   3E,W
0291:  MOVWF  00
0292:  RETURN
0293:  MOVF   04,W
0294:  MOVWF  2B
0295:  MOVF   2A,W
0296:  MOVWF  2D
0297:  BTFSC  03.2
0298:  GOTO   2B2
0299:  MOVF   29,W
029A:  MOVWF  36
029B:  MOVF   28,W
029C:  MOVWF  35
029D:  MOVF   27,W
029E:  MOVWF  34
029F:  MOVF   26,W
02A0:  MOVWF  33
02A1:  CLRF   3A
02A2:  CLRF   39
02A3:  MOVLW  20
02A4:  MOVWF  38
02A5:  MOVLW  82
02A6:  MOVWF  37
02A7:  CALL   0D5
02A8:  MOVF   7A,W
02A9:  MOVWF  29
02AA:  MOVF   79,W
02AB:  MOVWF  28
02AC:  MOVF   78,W
02AD:  MOVWF  27
02AE:  MOVF   77,W
02AF:  MOVWF  26
02B0:  DECFSZ 2D,F
02B1:  GOTO   299
02B2:  MOVF   29,W
02B3:  MOVWF  36
02B4:  MOVF   28,W
02B5:  MOVWF  35
02B6:  MOVF   27,W
02B7:  MOVWF  34
02B8:  MOVF   26,W
02B9:  MOVWF  33
02BA:  MOVF   33,W
02BB:  SUBLW  B6
02BC:  MOVWF  33
02BD:  CLRF   7A
02BE:  MOVF   34,W
02BF:  MOVWF  37
02C0:  BSF    34.7
02C1:  BCF    03.0
02C2:  RRF    34,F
02C3:  RRF    35,F
02C4:  RRF    36,F
02C5:  RRF    7A,F
02C6:  RRF    79,F
02C7:  RRF    78,F
02C8:  RRF    77,F
02C9:  DECFSZ 33,F
02CA:  GOTO   2C1
02CB:  BTFSS  37.7
02CC:  GOTO   2D8
02CD:  COMF   77,F
02CE:  COMF   78,F
02CF:  COMF   79,F
02D0:  COMF   7A,F
02D1:  INCF   77,F
02D2:  BTFSC  03.2
02D3:  INCF   78,F
02D4:  BTFSC  03.2
02D5:  INCF   79,F
02D6:  BTFSC  03.2
02D7:  INCF   7A,F
02D8:  MOVF   7A,W
02D9:  MOVWF  29
02DA:  MOVF   79,W
02DB:  MOVWF  28
02DC:  MOVF   78,W
02DD:  MOVWF  27
02DE:  MOVF   77,W
02DF:  MOVWF  26
02E0:  BTFSS  29.7
02E1:  GOTO   2EF
02E2:  DECF   2B,F
02E3:  BSF    2B.5
02E4:  COMF   26,F
02E5:  COMF   27,F
02E6:  COMF   28,F
02E7:  COMF   29,F
02E8:  INCF   26,F
02E9:  BTFSC  03.2
02EA:  INCF   27,F
02EB:  BTFSC  03.2
02EC:  INCF   28,F
02ED:  BTFSC  03.2
02EE:  INCF   29,F
02EF:  MOVLW  3B
02F0:  MOVWF  32
02F1:  MOVLW  9A
02F2:  MOVWF  31
02F3:  MOVLW  CA
02F4:  MOVWF  30
02F5:  CLRF   2F
02F6:  MOVLW  0A
02F7:  MOVWF  2D
02F8:  MOVF   2A,W
02F9:  BTFSC  03.2
02FA:  INCF   2B,F
02FB:  BSF    03.1
02FC:  MOVLW  26
02FD:  MOVWF  04
02FE:  BCF    03.7
02FF:  MOVF   29,W
0300:  MOVWF  36
0301:  MOVF   28,W
0302:  MOVWF  35
0303:  MOVF   27,W
0304:  MOVWF  34
0305:  MOVF   26,W
0306:  MOVWF  33
0307:  MOVF   32,W
0308:  MOVWF  3A
0309:  MOVF   31,W
030A:  MOVWF  39
030B:  MOVF   30,W
030C:  MOVWF  38
030D:  MOVF   2F,W
030E:  MOVWF  37
030F:  CALL   244
0310:  MOVF   78,W
0311:  MOVF   77,F
0312:  BTFSS  03.2
0313:  GOTO   327
0314:  INCF   2A,W
0315:  SUBWF  2D,W
0316:  BTFSC  03.2
0317:  GOTO   327
0318:  MOVF   2B,W
0319:  BTFSC  03.2
031A:  GOTO   329
031B:  ANDLW  0F
031C:  SUBWF  2D,W
031D:  BTFSC  03.2
031E:  GOTO   321
031F:  BTFSC  03.0
0320:  GOTO   359
0321:  BTFSC  2B.7
0322:  GOTO   359
0323:  BTFSC  2B.6
0324:  GOTO   329
0325:  MOVLW  20
0326:  GOTO   355
0327:  MOVLW  20
0328:  ANDWF  2B,F
0329:  BTFSS  2B.5
032A:  GOTO   337
032B:  BCF    2B.5
032C:  MOVF   2A,W
032D:  BTFSS  03.2
032E:  DECF   2B,F
032F:  MOVF   77,W
0330:  MOVWF  2B
0331:  MOVLW  2D
0332:  MOVWF  33
0333:  CALL   15C
0334:  MOVF   2B,W
0335:  MOVWF  77
0336:  CLRF   2B
0337:  MOVF   2A,W
0338:  SUBWF  2D,W
0339:  BTFSS  03.2
033A:  GOTO   345
033B:  MOVF   77,W
033C:  MOVWF  2B
033D:  MOVLW  2E
033E:  MOVWF  33
033F:  CALL   15C
0340:  MOVF   2B,W
0341:  MOVWF  77
0342:  MOVLW  20
0343:  ANDWF  2B,F
0344:  MOVLW  00
0345:  MOVLW  30
0346:  BTFSS  2B.5
0347:  GOTO   355
0348:  BCF    2B.5
0349:  MOVF   2A,W
034A:  BTFSS  03.2
034B:  DECF   2B,F
034C:  MOVF   77,W
034D:  MOVWF  2B
034E:  MOVLW  2D
034F:  MOVWF  33
0350:  CALL   15C
0351:  MOVF   2B,W
0352:  MOVWF  77
0353:  CLRF   2B
0354:  MOVLW  30
0355:  ADDWF  77,F
0356:  MOVF   77,W
0357:  MOVWF  33
0358:  CALL   15C
0359:  BCF    03.1
035A:  MOVF   32,W
035B:  MOVWF  36
035C:  MOVF   31,W
035D:  MOVWF  35
035E:  MOVF   30,W
035F:  MOVWF  34
0360:  MOVF   2F,W
0361:  MOVWF  33
0362:  CLRF   3A
0363:  CLRF   39
0364:  CLRF   38
0365:  MOVLW  0A
0366:  MOVWF  37
0367:  CALL   244
0368:  MOVF   7A,W
0369:  MOVWF  32
036A:  MOVF   79,W
036B:  MOVWF  31
036C:  MOVF   78,W
036D:  MOVWF  30
036E:  MOVF   77,W
036F:  MOVWF  2F
0370:  DECFSZ 2D,F
0371:  GOTO   2FB
0372:  BCF    0A.3
0373:  BCF    0A.4
0374:  GOTO   3F3 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc = 10     // 10 bit ADC 
....................  
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
.................... #use delay (clock=4000000) 
*
0011:  MOVLW  34
0012:  MOVWF  04
0013:  BCF    03.7
0014:  MOVF   00,W
0015:  BTFSC  03.2
0016:  GOTO   025
0017:  MOVLW  01
0018:  MOVWF  78
0019:  CLRF   77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  DECFSZ 78,F
001D:  GOTO   019
001E:  MOVLW  4A
001F:  MOVWF  77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  GOTO   023
0023:  DECFSZ 00,F
0024:  GOTO   017
0025:  RETURN
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003E:  MOVLW  0F
003F:  BSF    03.5
0040:  ANDWF  06,W
0041:  IORLW  F0
0042:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0043:  BCF    03.5
0044:  BSF    06.2
....................    delay_cycles(1); 
0045:  NOP
....................    lcd_output_enable(1); 
0046:  BSF    06.0
....................    delay_cycles(1); 
0047:  NOP
....................    high = lcd_read_nibble(); 
0048:  CALL   032
0049:  MOVF   78,W
004A:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
004B:  BCF    06.0
....................    delay_cycles(1); 
004C:  NOP
....................    lcd_output_enable(1); 
004D:  BSF    06.0
....................    delay_us(1); 
004E:  NOP
....................    low = lcd_read_nibble(); 
004F:  CALL   032
0050:  MOVF   78,W
0051:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
0052:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0053:  MOVLW  0F
0054:  BSF    03.5
0055:  ANDWF  06,W
0056:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0057:  BCF    03.5
0058:  SWAPF  3B,W
0059:  MOVWF  77
005A:  MOVLW  F0
005B:  ANDWF  77,F
005C:  MOVF   77,W
005D:  IORWF  3A,W
005E:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0032:  MOVF   06,W
0033:  MOVWF  77
0034:  SWAPF  06,W
0035:  ANDLW  0F
0036:  MOVWF  78
....................   #endif 
0037:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0026:  SWAPF  3B,W
0027:  ANDLW  F0
0028:  MOVWF  77
0029:  MOVLW  0F
002A:  ANDWF  06,W
002B:  IORWF  77,W
002C:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
002D:  NOP
....................    lcd_output_enable(1); 
002E:  BSF    06.0
....................    delay_us(2); 
002F:  GOTO   030
....................    lcd_output_enable(0); 
0030:  BCF    06.0
0031:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0038:  BSF    03.5
0039:  BCF    06.0
....................    lcd_rs_tris(); 
003A:  BCF    06.1
....................    lcd_rw_tris(); 
003B:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003C:  BCF    03.5
003D:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005F:  MOVF   78,W
0060:  MOVWF  3A
0061:  BTFSC  3A.7
0062:  GOTO   03E
....................    lcd_output_rs(address); 
0063:  BTFSS  38.0
0064:  BCF    06.1
0065:  BTFSC  38.0
0066:  BSF    06.1
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_rw(0); 
0068:  BCF    06.2
....................    delay_cycles(1); 
0069:  NOP
....................    lcd_output_enable(0); 
006A:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
006B:  SWAPF  39,W
006C:  MOVWF  3A
006D:  MOVLW  0F
006E:  ANDWF  3A,F
006F:  MOVF   3A,W
0070:  MOVWF  3B
0071:  CALL   026
....................    lcd_send_nibble(n & 0xf); 
0072:  MOVF   39,W
0073:  ANDLW  0F
0074:  MOVWF  3A
0075:  MOVWF  3B
0076:  CALL   026
0077:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0078:  MOVLW  28
0079:  MOVWF  27
007A:  MOVLW  0C
007B:  MOVWF  28
007C:  MOVLW  01
007D:  MOVWF  29
007E:  MOVLW  06
007F:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0080:  BCF    06.0
....................    lcd_output_rs(0); 
0081:  BCF    06.1
....................    lcd_output_rw(0); 
0082:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0083:  MOVLW  0F
0084:  BSF    03.5
0085:  ANDWF  06,W
0086:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0087:  BCF    06.0
....................    lcd_rs_tris(); 
0088:  BCF    06.1
....................    lcd_rw_tris(); 
0089:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
008A:  MOVLW  0F
008B:  BCF    03.5
008C:  MOVWF  34
008D:  CALL   011
....................    for(i=1;i<=3;++i) 
008E:  MOVLW  01
008F:  MOVWF  26
0090:  MOVF   26,W
0091:  SUBLW  03
0092:  BTFSS  03.0
0093:  GOTO   09C
....................    { 
....................        lcd_send_nibble(3); 
0094:  MOVLW  03
0095:  MOVWF  3B
0096:  CALL   026
....................        delay_ms(5); 
0097:  MOVLW  05
0098:  MOVWF  34
0099:  CALL   011
009A:  INCF   26,F
009B:  GOTO   090
....................    } 
....................     
....................    lcd_send_nibble(2); 
009C:  MOVLW  02
009D:  MOVWF  3B
009E:  CALL   026
....................    delay_ms(5); 
009F:  MOVLW  05
00A0:  MOVWF  34
00A1:  CALL   011
....................    for(i=0;i<=3;++i) 
00A2:  CLRF   26
00A3:  MOVF   26,W
00A4:  SUBLW  03
00A5:  BTFSS  03.0
00A6:  GOTO   0B3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A7:  MOVLW  27
00A8:  ADDWF  26,W
00A9:  MOVWF  04
00AA:  BCF    03.7
00AB:  MOVF   00,W
00AC:  MOVWF  2B
00AD:  CLRF   38
00AE:  MOVF   2B,W
00AF:  MOVWF  39
00B0:  CALL   038
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B1:  INCF   26,F
00B2:  GOTO   0A3
00B3:  BCF    0A.3
00B4:  BCF    0A.4
00B5:  GOTO   3A4 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
014A:  DECFSZ 35,W
014B:  GOTO   14D
014C:  GOTO   150
....................       address=LCD_LINE_TWO; 
014D:  MOVLW  40
014E:  MOVWF  36
014F:  GOTO   151
....................    else 
....................       address=0; 
0150:  CLRF   36
....................       
....................    address+=x-1; 
0151:  MOVLW  01
0152:  SUBWF  34,W
0153:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
0154:  MOVF   36,W
0155:  IORLW  80
0156:  MOVWF  37
0157:  CLRF   38
0158:  MOVF   37,W
0159:  MOVWF  39
015A:  CALL   038
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
015B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
015C:  MOVF   33,W
015D:  XORLW  07
015E:  BTFSC  03.2
015F:  GOTO   16A
0160:  XORLW  0B
0161:  BTFSC  03.2
0162:  GOTO   16F
0163:  XORLW  06
0164:  BTFSC  03.2
0165:  GOTO   177
0166:  XORLW  02
0167:  BTFSC  03.2
0168:  GOTO   17D
0169:  GOTO   182
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
016A:  MOVLW  01
016B:  MOVWF  34
016C:  MOVWF  35
016D:  CALL   14A
016E:  GOTO   187
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
016F:  CLRF   38
0170:  MOVLW  01
0171:  MOVWF  39
0172:  CALL   038
....................                      delay_ms(2); 
0173:  MOVLW  02
0174:  MOVWF  34
0175:  CALL   011
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0176:  GOTO   187
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0177:  MOVLW  01
0178:  MOVWF  34
0179:  MOVLW  02
017A:  MOVWF  35
017B:  CALL   14A
017C:  GOTO   187
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
017D:  CLRF   38
017E:  MOVLW  10
017F:  MOVWF  39
0180:  CALL   038
0181:  GOTO   187
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0182:  MOVLW  01
0183:  MOVWF  38
0184:  MOVF   33,W
0185:  MOVWF  39
0186:  CALL   038
....................      #endif 
....................    } 
0187:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned int16 adc_okuma; 
.................... float gerilim; 
....................  
.................... void main(){ 
*
0375:  MOVF   03,W
0376:  ANDLW  1F
0377:  MOVWF  03
0378:  BSF    03.5
0379:  BSF    1F.0
037A:  BSF    1F.1
037B:  BSF    1F.2
037C:  BCF    1F.3
037D:  BCF    03.7
....................     
....................    setup_psp(PSP_DISABLED); setup_timer_1(T1_DISABLED); setup_timer_2(T2_DISABLED,0,1); setup_CCP1(CCP_OFF); setup_CCP2(CCP_OFF); 
037E:  BCF    09.4
037F:  BCF    03.5
0380:  CLRF   10
0381:  MOVLW  00
0382:  MOVWF  78
0383:  MOVWF  12
0384:  MOVLW  00
0385:  BSF    03.5
0386:  MOVWF  12
0387:  MOVLW  F0
0388:  BCF    03.5
0389:  ANDWF  17,F
038A:  ANDWF  1D,F
....................     
....................    setup_adc(adc_clock_div_32); 
038B:  BCF    1F.6
038C:  BSF    1F.7
038D:  BSF    03.5
038E:  BSF    1F.7
038F:  BCF    03.5
0390:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
0391:  BSF    03.5
0392:  BCF    1F.0
0393:  BCF    1F.1
0394:  BCF    1F.2
0395:  BCF    1F.3
....................    set_adc_channel(0); 
0396:  MOVLW  00
0397:  MOVWF  78
0398:  BCF    03.5
0399:  MOVF   1F,W
039A:  ANDLW  C7
039B:  IORWF  78,W
039C:  MOVWF  1F
....................    delay_us(25); 
039D:  MOVLW  07
039E:  MOVWF  77
039F:  DECFSZ 77,F
03A0:  GOTO   39F
03A1:  GOTO   3A2
03A2:  NOP
....................     
....................    lcd_init(); 
03A3:  GOTO   078
....................     
....................    while(1){ 
....................        
....................       adc_okuma = read_adc(); 
03A4:  BSF    1F.2
03A5:  BTFSC  1F.2
03A6:  GOTO   3A5
03A7:  BSF    03.5
03A8:  MOVF   1E,W
03A9:  BCF    03.5
03AA:  MOVWF  20
03AB:  MOVF   1E,W
03AC:  MOVWF  21
....................       gerilim = adc_okuma * 0.004887585533; 
03AD:  MOVF   21,W
03AE:  MOVWF  27
03AF:  MOVF   20,W
03B0:  MOVWF  26
03B1:  GOTO   0B6
03B2:  MOVF   7A,W
03B3:  MOVWF  36
03B4:  MOVF   79,W
03B5:  MOVWF  35
03B6:  MOVF   78,W
03B7:  MOVWF  34
03B8:  MOVF   77,W
03B9:  MOVWF  33
03BA:  MOVLW  0A
03BB:  MOVWF  3A
03BC:  MOVLW  28
03BD:  MOVWF  39
03BE:  MOVLW  20
03BF:  MOVWF  38
03C0:  MOVLW  77
03C1:  MOVWF  37
03C2:  CALL   0D5
03C3:  MOVF   7A,W
03C4:  MOVWF  25
03C5:  MOVF   79,W
03C6:  MOVWF  24
03C7:  MOVF   78,W
03C8:  MOVWF  23
03C9:  MOVF   77,W
03CA:  MOVWF  22
....................        
....................       printf(lcd_putc,"\fADC:%lu",adc_okuma); 
03CB:  MOVLW  04
03CC:  BSF    03.6
03CD:  MOVWF  0D
03CE:  MOVLW  00
03CF:  MOVWF  0F
03D0:  BCF    03.0
03D1:  MOVLW  05
03D2:  BCF    03.6
03D3:  MOVWF  26
03D4:  CALL   188
03D5:  MOVLW  10
03D6:  MOVWF  04
03D7:  MOVF   21,W
03D8:  MOVWF  27
03D9:  MOVF   20,W
03DA:  MOVWF  26
03DB:  GOTO   1DF
....................       printf(lcd_putc,"\nGerilim:%.2fV",gerilim); 
03DC:  MOVLW  09
03DD:  BSF    03.6
03DE:  MOVWF  0D
03DF:  MOVLW  00
03E0:  MOVWF  0F
03E1:  BCF    03.0
03E2:  MOVLW  09
03E3:  BCF    03.6
03E4:  MOVWF  26
03E5:  CALL   188
03E6:  MOVLW  89
03E7:  MOVWF  04
03E8:  MOVF   25,W
03E9:  MOVWF  29
03EA:  MOVF   24,W
03EB:  MOVWF  28
03EC:  MOVF   23,W
03ED:  MOVWF  27
03EE:  MOVF   22,W
03EF:  MOVWF  26
03F0:  MOVLW  02
03F1:  MOVWF  2A
03F2:  GOTO   293
03F3:  MOVLW  56
03F4:  MOVWF  33
03F5:  CALL   15C
....................       delay_ms(200); 
03F6:  MOVLW  C8
03F7:  MOVWF  34
03F8:  CALL   011
03F9:  GOTO   3A4
....................    } 
....................  
.................... } 
03FA:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
