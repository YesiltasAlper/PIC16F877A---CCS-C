CCS PCM C Compiler, Version 5.015, 5967               10-Ara-21 17:28

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(6) Lab -6 Oransal (P) Kontrol LM35\(2) CCS_C\CCS_C.lst

               ROM used:   1918 words (23%)
                           Largest free fragment is 2048
               RAM used:   23 (6%) at main() level
                           49 (13%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5ED
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 8C,29
0005:  DATA 65,3A
0006:  DATA BA,12
0007:  DATA AE,18
0008:  DATA 66,00
0009:  DATA D4,32
000A:  DATA 6D,38
000B:  DATA BA,12
000C:  DATA AE,18
000D:  DATA 66,00
000E:  DATA 45,39
000F:  DATA 72,1D
0010:  DATA 25,17
0011:  DATA 31,33
0012:  DATA 00,00
0013:  DATA C4,3A
0014:  DATA F4,3C
0015:  DATA BA,12
0016:  DATA 64,00
*
00BC:  MOVLW  8E
00BD:  MOVWF  77
00BE:  MOVF   33,W
00BF:  MOVWF  78
00C0:  MOVF   32,W
00C1:  MOVWF  79
00C2:  CLRF   7A
00C3:  MOVF   78,F
00C4:  BTFSS  03.2
00C5:  GOTO   0D0
00C6:  MOVF   79,W
00C7:  MOVWF  78
00C8:  CLRF   79
00C9:  MOVLW  08
00CA:  SUBWF  77,F
00CB:  MOVF   78,F
00CC:  BTFSS  03.2
00CD:  GOTO   0D0
00CE:  CLRF   77
00CF:  GOTO   0D8
00D0:  BCF    03.0
00D1:  BTFSC  78.7
00D2:  GOTO   0D7
00D3:  RLF    79,F
00D4:  RLF    78,F
00D5:  DECF   77,F
00D6:  GOTO   0D0
00D7:  BCF    78.7
00D8:  RETURN
00D9:  MOVF   32,W
00DA:  BTFSC  03.2
00DB:  GOTO   19E
00DC:  MOVWF  3E
00DD:  MOVF   36,W
00DE:  BTFSC  03.2
00DF:  GOTO   19E
00E0:  SUBWF  3E,F
00E1:  BTFSS  03.0
00E2:  GOTO   0E8
00E3:  MOVLW  7F
00E4:  ADDWF  3E,F
00E5:  BTFSC  03.0
00E6:  GOTO   19E
00E7:  GOTO   0EE
00E8:  MOVLW  81
00E9:  SUBWF  3E,F
00EA:  BTFSS  03.0
00EB:  GOTO   19E
00EC:  BTFSC  03.2
00ED:  GOTO   19E
00EE:  MOVF   3E,W
00EF:  MOVWF  77
00F0:  CLRF   78
00F1:  CLRF   79
00F2:  CLRF   7A
00F3:  CLRF   3D
00F4:  MOVF   33,W
00F5:  MOVWF  3C
00F6:  BSF    3C.7
00F7:  MOVF   34,W
00F8:  MOVWF  3B
00F9:  MOVF   35,W
00FA:  MOVWF  3A
00FB:  MOVLW  19
00FC:  MOVWF  3E
00FD:  MOVF   39,W
00FE:  SUBWF  3A,F
00FF:  BTFSC  03.0
0100:  GOTO   111
0101:  MOVLW  01
0102:  SUBWF  3B,F
0103:  BTFSC  03.0
0104:  GOTO   111
0105:  SUBWF  3C,F
0106:  BTFSC  03.0
0107:  GOTO   111
0108:  SUBWF  3D,F
0109:  BTFSC  03.0
010A:  GOTO   111
010B:  INCF   3D,F
010C:  INCF   3C,F
010D:  INCF   3B,F
010E:  MOVF   39,W
010F:  ADDWF  3A,F
0110:  GOTO   143
0111:  MOVF   38,W
0112:  SUBWF  3B,F
0113:  BTFSC  03.0
0114:  GOTO   12C
0115:  MOVLW  01
0116:  SUBWF  3C,F
0117:  BTFSC  03.0
0118:  GOTO   12C
0119:  SUBWF  3D,F
011A:  BTFSC  03.0
011B:  GOTO   12C
011C:  INCF   3D,F
011D:  INCF   3C,F
011E:  MOVF   38,W
011F:  ADDWF  3B,F
0120:  MOVF   39,W
0121:  ADDWF  3A,F
0122:  BTFSS  03.0
0123:  GOTO   143
0124:  INCF   3B,F
0125:  BTFSS  03.2
0126:  GOTO   143
0127:  INCF   3C,F
0128:  BTFSS  03.2
0129:  GOTO   143
012A:  INCF   3D,F
012B:  GOTO   143
012C:  MOVF   37,W
012D:  IORLW  80
012E:  SUBWF  3C,F
012F:  BTFSC  03.0
0130:  GOTO   142
0131:  MOVLW  01
0132:  SUBWF  3D,F
0133:  BTFSC  03.0
0134:  GOTO   142
0135:  INCF   3D,F
0136:  MOVF   37,W
0137:  IORLW  80
0138:  ADDWF  3C,F
0139:  MOVF   38,W
013A:  ADDWF  3B,F
013B:  BTFSS  03.0
013C:  GOTO   120
013D:  INCF   3C,F
013E:  BTFSS  03.2
013F:  GOTO   120
0140:  INCF   3D,F
0141:  GOTO   120
0142:  BSF    7A.0
0143:  DECFSZ 3E,F
0144:  GOTO   146
0145:  GOTO   151
0146:  BCF    03.0
0147:  RLF    3A,F
0148:  RLF    3B,F
0149:  RLF    3C,F
014A:  RLF    3D,F
014B:  BCF    03.0
014C:  RLF    7A,F
014D:  RLF    79,F
014E:  RLF    78,F
014F:  RLF    3F,F
0150:  GOTO   0FD
0151:  BTFSS  3F.0
0152:  GOTO   159
0153:  BCF    03.0
0154:  RRF    78,F
0155:  RRF    79,F
0156:  RRF    7A,F
0157:  RRF    3F,F
0158:  GOTO   15C
0159:  DECF   77,F
015A:  BTFSC  03.2
015B:  GOTO   19E
015C:  BTFSC  3F.7
015D:  GOTO   185
015E:  BCF    03.0
015F:  RLF    3A,F
0160:  RLF    3B,F
0161:  RLF    3C,F
0162:  RLF    3D,F
0163:  MOVF   39,W
0164:  SUBWF  3A,F
0165:  BTFSC  03.0
0166:  GOTO   171
0167:  MOVLW  01
0168:  SUBWF  3B,F
0169:  BTFSC  03.0
016A:  GOTO   171
016B:  SUBWF  3C,F
016C:  BTFSC  03.0
016D:  GOTO   171
016E:  SUBWF  3D,F
016F:  BTFSS  03.0
0170:  GOTO   194
0171:  MOVF   38,W
0172:  SUBWF  3B,F
0173:  BTFSC  03.0
0174:  GOTO   17C
0175:  MOVLW  01
0176:  SUBWF  3C,F
0177:  BTFSC  03.0
0178:  GOTO   17C
0179:  SUBWF  3D,F
017A:  BTFSS  03.0
017B:  GOTO   194
017C:  MOVF   37,W
017D:  IORLW  80
017E:  SUBWF  3C,F
017F:  BTFSC  03.0
0180:  GOTO   185
0181:  MOVLW  01
0182:  SUBWF  3D,F
0183:  BTFSS  03.0
0184:  GOTO   194
0185:  INCF   7A,F
0186:  BTFSS  03.2
0187:  GOTO   194
0188:  INCF   79,F
0189:  BTFSS  03.2
018A:  GOTO   194
018B:  INCF   78,F
018C:  BTFSS  03.2
018D:  GOTO   194
018E:  INCF   77,F
018F:  BTFSC  03.2
0190:  GOTO   19E
0191:  RRF    78,F
0192:  RRF    79,F
0193:  RRF    7A,F
0194:  MOVF   33,W
0195:  MOVWF  3E
0196:  MOVF   37,W
0197:  XORWF  3E,F
0198:  BTFSS  3E.7
0199:  GOTO   19C
019A:  BSF    78.7
019B:  GOTO   1A2
019C:  BCF    78.7
019D:  GOTO   1A2
019E:  CLRF   77
019F:  CLRF   78
01A0:  CLRF   79
01A1:  CLRF   7A
01A2:  BCF    0A.3
01A3:  BCF    0A.4
01A4:  GOTO   649 (RETURN)
*
01E3:  MOVF   0B,W
01E4:  MOVWF  33
01E5:  BCF    0B.7
01E6:  BSF    03.5
01E7:  BSF    03.6
01E8:  BSF    0C.7
01E9:  BSF    0C.0
01EA:  NOP
01EB:  NOP
01EC:  BCF    03.5
01ED:  BCF    03.6
01EE:  BTFSC  33.7
01EF:  BSF    0B.7
01F0:  BTFSC  03.0
01F1:  GOTO   21A
01F2:  BSF    03.6
01F3:  MOVF   0C,W
01F4:  ANDLW  7F
01F5:  BCF    03.6
01F6:  MOVWF  33
01F7:  BSF    03.6
01F8:  MOVF   0D,W
01F9:  BCF    03.6
01FA:  MOVWF  34
01FB:  BSF    03.6
01FC:  MOVF   0F,W
01FD:  BCF    03.6
01FE:  MOVWF  35
01FF:  MOVF   33,W
0200:  MOVWF  3F
0201:  CALL   1B7
0202:  MOVF   34,W
0203:  BSF    03.6
0204:  MOVWF  0D
0205:  BCF    03.6
0206:  MOVF   35,W
0207:  BSF    03.6
0208:  MOVWF  0F
0209:  BCF    03.6
020A:  MOVF   0B,W
020B:  MOVWF  36
020C:  BCF    0B.7
020D:  BSF    03.5
020E:  BSF    03.6
020F:  BSF    0C.7
0210:  BSF    0C.0
0211:  NOP
0212:  NOP
0213:  BCF    03.5
0214:  BCF    03.6
0215:  BTFSC  36.7
0216:  BSF    0B.7
0217:  DECFSZ 32,F
0218:  GOTO   21A
0219:  GOTO   239
021A:  BSF    03.6
021B:  RLF    0C,W
021C:  RLF    0E,W
021D:  ANDLW  7F
021E:  BCF    03.6
021F:  MOVWF  33
0220:  BSF    03.6
0221:  MOVF   0D,W
0222:  BCF    03.6
0223:  MOVWF  34
0224:  BSF    03.6
0225:  MOVF   0F,W
0226:  BCF    03.6
0227:  MOVWF  35
0228:  MOVF   33,W
0229:  MOVWF  3F
022A:  CALL   1B7
022B:  MOVF   34,W
022C:  BSF    03.6
022D:  MOVWF  0D
022E:  BCF    03.6
022F:  MOVF   35,W
0230:  BSF    03.6
0231:  MOVWF  0F
0232:  INCF   0D,F
0233:  BTFSC  03.2
0234:  INCF   0F,F
0235:  BCF    03.0
0236:  BCF    03.6
0237:  DECFSZ 32,F
0238:  GOTO   1E3
0239:  RETURN
023A:  MOVF   3F,W
023B:  BTFSC  03.2
023C:  GOTO   2AA
023D:  MOVWF  47
023E:  MOVF   43,W
023F:  BTFSC  03.2
0240:  GOTO   2AA
0241:  ADDWF  47,F
0242:  BTFSC  03.0
0243:  GOTO   24B
0244:  MOVLW  7F
0245:  SUBWF  47,F
0246:  BTFSS  03.0
0247:  GOTO   2AA
0248:  BTFSC  03.2
0249:  GOTO   2AA
024A:  GOTO   24F
024B:  MOVLW  81
024C:  ADDWF  47,F
024D:  BTFSC  03.0
024E:  GOTO   2AA
024F:  MOVF   47,W
0250:  MOVWF  77
0251:  CLRF   78
0252:  CLRF   79
0253:  CLRF   7A
0254:  MOVF   40,W
0255:  MOVWF  4B
0256:  BSF    4B.7
0257:  MOVF   41,W
0258:  MOVWF  4A
0259:  MOVF   42,W
025A:  MOVWF  49
025B:  MOVLW  18
025C:  MOVWF  47
025D:  CLRF   48
025E:  BTFSS  49.0
025F:  GOTO   278
0260:  MOVF   46,W
0261:  ADDWF  7A,F
0262:  BTFSS  03.0
0263:  GOTO   26A
0264:  INCF   79,F
0265:  BTFSS  03.2
0266:  GOTO   26A
0267:  INCF   78,F
0268:  BTFSC  03.2
0269:  BSF    48.7
026A:  MOVF   45,W
026B:  ADDWF  79,F
026C:  BTFSS  03.0
026D:  GOTO   271
026E:  INCF   78,F
026F:  BTFSC  03.2
0270:  BSF    48.7
0271:  MOVF   44,W
0272:  MOVWF  41
0273:  BSF    41.7
0274:  MOVF   41,W
0275:  ADDWF  78,F
0276:  BTFSC  03.0
0277:  BSF    48.7
0278:  RLF    48,F
0279:  RRF    78,F
027A:  RRF    79,F
027B:  RRF    7A,F
027C:  RRF    4B,F
027D:  RRF    4A,F
027E:  RRF    49,F
027F:  BCF    03.0
0280:  DECFSZ 47,F
0281:  GOTO   25D
0282:  MOVLW  01
0283:  ADDWF  77,F
0284:  BTFSC  03.0
0285:  GOTO   2AA
0286:  BTFSC  78.7
0287:  GOTO   28F
0288:  RLF    4B,F
0289:  RLF    7A,F
028A:  RLF    79,F
028B:  RLF    78,F
028C:  DECF   77,F
028D:  BTFSC  03.2
028E:  GOTO   2AA
028F:  BTFSS  4B.7
0290:  GOTO   2A0
0291:  INCF   7A,F
0292:  BTFSS  03.2
0293:  GOTO   2A0
0294:  INCF   79,F
0295:  BTFSS  03.2
0296:  GOTO   2A0
0297:  INCF   78,F
0298:  BTFSS  03.2
0299:  GOTO   2A0
029A:  RRF    78,F
029B:  RRF    79,F
029C:  RRF    7A,F
029D:  INCF   77,F
029E:  BTFSC  03.2
029F:  GOTO   2AA
02A0:  MOVF   40,W
02A1:  MOVWF  48
02A2:  MOVF   44,W
02A3:  XORWF  48,F
02A4:  BTFSS  48.7
02A5:  GOTO   2A8
02A6:  BSF    78.7
02A7:  GOTO   2AE
02A8:  BCF    78.7
02A9:  GOTO   2AE
02AA:  CLRF   77
02AB:  CLRF   78
02AC:  CLRF   79
02AD:  CLRF   7A
02AE:  RETURN
02AF:  BTFSC  03.1
02B0:  GOTO   2B4
02B1:  MOVLW  47
02B2:  MOVWF  04
02B3:  BCF    03.7
02B4:  CLRF   77
02B5:  CLRF   78
02B6:  CLRF   79
02B7:  CLRF   7A
02B8:  CLRF   47
02B9:  CLRF   48
02BA:  CLRF   49
02BB:  CLRF   4A
02BC:  MOVF   46,W
02BD:  IORWF  45,W
02BE:  IORWF  44,W
02BF:  IORWF  43,W
02C0:  BTFSC  03.2
02C1:  GOTO   2F2
02C2:  MOVLW  20
02C3:  MOVWF  4B
02C4:  BCF    03.0
02C5:  RLF    3F,F
02C6:  RLF    40,F
02C7:  RLF    41,F
02C8:  RLF    42,F
02C9:  RLF    47,F
02CA:  RLF    48,F
02CB:  RLF    49,F
02CC:  RLF    4A,F
02CD:  MOVF   46,W
02CE:  SUBWF  4A,W
02CF:  BTFSS  03.2
02D0:  GOTO   2DB
02D1:  MOVF   45,W
02D2:  SUBWF  49,W
02D3:  BTFSS  03.2
02D4:  GOTO   2DB
02D5:  MOVF   44,W
02D6:  SUBWF  48,W
02D7:  BTFSS  03.2
02D8:  GOTO   2DB
02D9:  MOVF   43,W
02DA:  SUBWF  47,W
02DB:  BTFSS  03.0
02DC:  GOTO   2EC
02DD:  MOVF   43,W
02DE:  SUBWF  47,F
02DF:  MOVF   44,W
02E0:  BTFSS  03.0
02E1:  INCFSZ 44,W
02E2:  SUBWF  48,F
02E3:  MOVF   45,W
02E4:  BTFSS  03.0
02E5:  INCFSZ 45,W
02E6:  SUBWF  49,F
02E7:  MOVF   46,W
02E8:  BTFSS  03.0
02E9:  INCFSZ 46,W
02EA:  SUBWF  4A,F
02EB:  BSF    03.0
02EC:  RLF    77,F
02ED:  RLF    78,F
02EE:  RLF    79,F
02EF:  RLF    7A,F
02F0:  DECFSZ 4B,F
02F1:  GOTO   2C4
02F2:  MOVF   47,W
02F3:  MOVWF  00
02F4:  INCF   04,F
02F5:  MOVF   48,W
02F6:  MOVWF  00
02F7:  INCF   04,F
02F8:  MOVF   49,W
02F9:  MOVWF  00
02FA:  INCF   04,F
02FB:  MOVF   4A,W
02FC:  MOVWF  00
02FD:  RETURN
02FE:  MOVF   04,W
02FF:  MOVWF  37
0300:  MOVF   36,W
0301:  MOVWF  39
0302:  BTFSC  03.2
0303:  GOTO   31D
0304:  MOVF   35,W
0305:  MOVWF  42
0306:  MOVF   34,W
0307:  MOVWF  41
0308:  MOVF   33,W
0309:  MOVWF  40
030A:  MOVF   32,W
030B:  MOVWF  3F
030C:  CLRF   46
030D:  CLRF   45
030E:  MOVLW  20
030F:  MOVWF  44
0310:  MOVLW  82
0311:  MOVWF  43
0312:  CALL   23A
0313:  MOVF   7A,W
0314:  MOVWF  35
0315:  MOVF   79,W
0316:  MOVWF  34
0317:  MOVF   78,W
0318:  MOVWF  33
0319:  MOVF   77,W
031A:  MOVWF  32
031B:  DECFSZ 39,F
031C:  GOTO   304
031D:  MOVF   35,W
031E:  MOVWF  42
031F:  MOVF   34,W
0320:  MOVWF  41
0321:  MOVF   33,W
0322:  MOVWF  40
0323:  MOVF   32,W
0324:  MOVWF  3F
0325:  MOVF   3F,W
0326:  SUBLW  B6
0327:  MOVWF  3F
0328:  CLRF   7A
0329:  MOVF   40,W
032A:  MOVWF  43
032B:  BSF    40.7
032C:  BCF    03.0
032D:  RRF    40,F
032E:  RRF    41,F
032F:  RRF    42,F
0330:  RRF    7A,F
0331:  RRF    79,F
0332:  RRF    78,F
0333:  RRF    77,F
0334:  DECFSZ 3F,F
0335:  GOTO   32C
0336:  BTFSS  43.7
0337:  GOTO   343
0338:  COMF   77,F
0339:  COMF   78,F
033A:  COMF   79,F
033B:  COMF   7A,F
033C:  INCF   77,F
033D:  BTFSC  03.2
033E:  INCF   78,F
033F:  BTFSC  03.2
0340:  INCF   79,F
0341:  BTFSC  03.2
0342:  INCF   7A,F
0343:  MOVF   7A,W
0344:  MOVWF  35
0345:  MOVF   79,W
0346:  MOVWF  34
0347:  MOVF   78,W
0348:  MOVWF  33
0349:  MOVF   77,W
034A:  MOVWF  32
034B:  BTFSS  35.7
034C:  GOTO   35A
034D:  DECF   37,F
034E:  BSF    37.5
034F:  COMF   32,F
0350:  COMF   33,F
0351:  COMF   34,F
0352:  COMF   35,F
0353:  INCF   32,F
0354:  BTFSC  03.2
0355:  INCF   33,F
0356:  BTFSC  03.2
0357:  INCF   34,F
0358:  BTFSC  03.2
0359:  INCF   35,F
035A:  MOVLW  3B
035B:  MOVWF  3E
035C:  MOVLW  9A
035D:  MOVWF  3D
035E:  MOVLW  CA
035F:  MOVWF  3C
0360:  CLRF   3B
0361:  MOVLW  0A
0362:  MOVWF  39
0363:  MOVF   36,W
0364:  BTFSC  03.2
0365:  INCF   37,F
0366:  BSF    03.1
0367:  MOVLW  32
0368:  MOVWF  04
0369:  BCF    03.7
036A:  MOVF   35,W
036B:  MOVWF  42
036C:  MOVF   34,W
036D:  MOVWF  41
036E:  MOVF   33,W
036F:  MOVWF  40
0370:  MOVF   32,W
0371:  MOVWF  3F
0372:  MOVF   3E,W
0373:  MOVWF  46
0374:  MOVF   3D,W
0375:  MOVWF  45
0376:  MOVF   3C,W
0377:  MOVWF  44
0378:  MOVF   3B,W
0379:  MOVWF  43
037A:  CALL   2AF
037B:  MOVF   78,W
037C:  MOVF   77,F
037D:  BTFSS  03.2
037E:  GOTO   392
037F:  INCF   36,W
0380:  SUBWF  39,W
0381:  BTFSC  03.2
0382:  GOTO   392
0383:  MOVF   37,W
0384:  BTFSC  03.2
0385:  GOTO   394
0386:  ANDLW  0F
0387:  SUBWF  39,W
0388:  BTFSC  03.2
0389:  GOTO   38C
038A:  BTFSC  03.0
038B:  GOTO   3C4
038C:  BTFSC  37.7
038D:  GOTO   3C4
038E:  BTFSC  37.6
038F:  GOTO   394
0390:  MOVLW  20
0391:  GOTO   3C0
0392:  MOVLW  20
0393:  ANDWF  37,F
0394:  BTFSS  37.5
0395:  GOTO   3A2
0396:  BCF    37.5
0397:  MOVF   36,W
0398:  BTFSS  03.2
0399:  DECF   37,F
039A:  MOVF   77,W
039B:  MOVWF  37
039C:  MOVLW  2D
039D:  MOVWF  3F
039E:  CALL   1B7
039F:  MOVF   37,W
03A0:  MOVWF  77
03A1:  CLRF   37
03A2:  MOVF   36,W
03A3:  SUBWF  39,W
03A4:  BTFSS  03.2
03A5:  GOTO   3B0
03A6:  MOVF   77,W
03A7:  MOVWF  37
03A8:  MOVLW  2E
03A9:  MOVWF  3F
03AA:  CALL   1B7
03AB:  MOVF   37,W
03AC:  MOVWF  77
03AD:  MOVLW  20
03AE:  ANDWF  37,F
03AF:  MOVLW  00
03B0:  MOVLW  30
03B1:  BTFSS  37.5
03B2:  GOTO   3C0
03B3:  BCF    37.5
03B4:  MOVF   36,W
03B5:  BTFSS  03.2
03B6:  DECF   37,F
03B7:  MOVF   77,W
03B8:  MOVWF  37
03B9:  MOVLW  2D
03BA:  MOVWF  3F
03BB:  CALL   1B7
03BC:  MOVF   37,W
03BD:  MOVWF  77
03BE:  CLRF   37
03BF:  MOVLW  30
03C0:  ADDWF  77,F
03C1:  MOVF   77,W
03C2:  MOVWF  3F
03C3:  CALL   1B7
03C4:  BCF    03.1
03C5:  MOVF   3E,W
03C6:  MOVWF  42
03C7:  MOVF   3D,W
03C8:  MOVWF  41
03C9:  MOVF   3C,W
03CA:  MOVWF  40
03CB:  MOVF   3B,W
03CC:  MOVWF  3F
03CD:  CLRF   46
03CE:  CLRF   45
03CF:  CLRF   44
03D0:  MOVLW  0A
03D1:  MOVWF  43
03D2:  CALL   2AF
03D3:  MOVF   7A,W
03D4:  MOVWF  3E
03D5:  MOVF   79,W
03D6:  MOVWF  3D
03D7:  MOVF   78,W
03D8:  MOVWF  3C
03D9:  MOVF   77,W
03DA:  MOVWF  3B
03DB:  DECFSZ 39,F
03DC:  GOTO   366
03DD:  RETURN
03DE:  MOVLW  80
03DF:  BTFSC  03.1
03E0:  XORWF  37,F
03E1:  CLRF   3C
03E2:  CLRF   3D
03E3:  MOVF   33,W
03E4:  MOVWF  3B
03E5:  MOVF   37,W
03E6:  XORWF  3B,F
03E7:  MOVF   32,W
03E8:  BTFSC  03.2
03E9:  GOTO   4CE
03EA:  MOVWF  3A
03EB:  MOVWF  77
03EC:  MOVF   36,W
03ED:  BTFSC  03.2
03EE:  GOTO   4D7
03EF:  SUBWF  3A,F
03F0:  BTFSC  03.2
03F1:  GOTO   473
03F2:  BTFSS  03.0
03F3:  GOTO   431
03F4:  MOVF   37,W
03F5:  MOVWF  40
03F6:  BSF    40.7
03F7:  MOVF   38,W
03F8:  MOVWF  3F
03F9:  MOVF   39,W
03FA:  MOVWF  3E
03FB:  CLRF   3D
03FC:  BCF    03.0
03FD:  RRF    40,F
03FE:  RRF    3F,F
03FF:  RRF    3E,F
0400:  RRF    3D,F
0401:  DECFSZ 3A,F
0402:  GOTO   3FB
0403:  BTFSS  3B.7
0404:  GOTO   408
0405:  BSF    3C.0
0406:  GOTO   4EB
0407:  BCF    3C.0
0408:  BCF    3A.0
0409:  BSF    3C.4
040A:  MOVLW  35
040B:  MOVWF  04
040C:  BCF    03.7
040D:  GOTO   500
040E:  BCF    3C.4
040F:  BTFSC  3B.7
0410:  GOTO   41B
0411:  BTFSS  3A.0
0412:  GOTO   426
0413:  RRF    40,F
0414:  RRF    3F,F
0415:  RRF    3E,F
0416:  RRF    3D,F
0417:  INCF   77,F
0418:  BTFSC  03.2
0419:  GOTO   4E6
041A:  GOTO   426
041B:  BTFSC  40.7
041C:  GOTO   429
041D:  BCF    03.0
041E:  RLF    3D,F
041F:  RLF    3E,F
0420:  RLF    3F,F
0421:  RLF    40,F
0422:  DECF   77,F
0423:  BTFSC  03.2
0424:  GOTO   4E6
0425:  GOTO   41B
0426:  BSF    3C.6
0427:  GOTO   493
0428:  BCF    3C.6
0429:  MOVF   33,W
042A:  MOVWF  3B
042B:  BTFSS  3B.7
042C:  GOTO   42F
042D:  BSF    40.7
042E:  GOTO   4DF
042F:  BCF    40.7
0430:  GOTO   4DF
0431:  MOVF   36,W
0432:  MOVWF  3A
0433:  MOVWF  77
0434:  MOVF   32,W
0435:  SUBWF  3A,F
0436:  MOVF   33,W
0437:  MOVWF  40
0438:  BSF    40.7
0439:  MOVF   34,W
043A:  MOVWF  3F
043B:  MOVF   35,W
043C:  MOVWF  3E
043D:  CLRF   3D
043E:  BCF    03.0
043F:  RRF    40,F
0440:  RRF    3F,F
0441:  RRF    3E,F
0442:  RRF    3D,F
0443:  DECFSZ 3A,F
0444:  GOTO   43D
0445:  BTFSS  3B.7
0446:  GOTO   44A
0447:  BSF    3C.1
0448:  GOTO   4EB
0449:  BCF    3C.1
044A:  BCF    3A.0
044B:  BSF    3C.5
044C:  MOVLW  39
044D:  MOVWF  04
044E:  BCF    03.7
044F:  GOTO   500
0450:  BCF    3C.5
0451:  BTFSC  3B.7
0452:  GOTO   45D
0453:  BTFSS  3A.0
0454:  GOTO   468
0455:  RRF    40,F
0456:  RRF    3F,F
0457:  RRF    3E,F
0458:  RRF    3D,F
0459:  INCF   77,F
045A:  BTFSC  03.2
045B:  GOTO   4E6
045C:  GOTO   468
045D:  BTFSC  40.7
045E:  GOTO   46B
045F:  BCF    03.0
0460:  RLF    3D,F
0461:  RLF    3E,F
0462:  RLF    3F,F
0463:  RLF    40,F
0464:  DECF   77,F
0465:  BTFSC  03.2
0466:  GOTO   4E6
0467:  GOTO   45D
0468:  BSF    3C.7
0469:  GOTO   493
046A:  BCF    3C.7
046B:  MOVF   37,W
046C:  MOVWF  3B
046D:  BTFSS  3B.7
046E:  GOTO   471
046F:  BSF    40.7
0470:  GOTO   4DF
0471:  BCF    40.7
0472:  GOTO   4DF
0473:  MOVF   37,W
0474:  MOVWF  40
0475:  BSF    40.7
0476:  MOVF   38,W
0477:  MOVWF  3F
0478:  MOVF   39,W
0479:  MOVWF  3E
047A:  BTFSS  3B.7
047B:  GOTO   480
047C:  BCF    40.7
047D:  BSF    3C.2
047E:  GOTO   4EB
047F:  BCF    3C.2
0480:  CLRF   3D
0481:  BCF    3A.0
0482:  MOVLW  35
0483:  MOVWF  04
0484:  BCF    03.7
0485:  GOTO   500
0486:  BTFSC  3B.7
0487:  GOTO   4A9
0488:  MOVF   33,W
0489:  MOVWF  3B
048A:  BTFSS  3A.0
048B:  GOTO   493
048C:  RRF    40,F
048D:  RRF    3F,F
048E:  RRF    3E,F
048F:  RRF    3D,F
0490:  INCF   77,F
0491:  BTFSC  03.2
0492:  GOTO   4E6
0493:  BTFSS  3D.7
0494:  GOTO   4A4
0495:  INCF   3E,F
0496:  BTFSS  03.2
0497:  GOTO   4A4
0498:  INCF   3F,F
0499:  BTFSS  03.2
049A:  GOTO   4A4
049B:  INCF   40,F
049C:  BTFSS  03.2
049D:  GOTO   4A4
049E:  RRF    40,F
049F:  RRF    3F,F
04A0:  RRF    3E,F
04A1:  INCF   77,F
04A2:  BTFSC  03.2
04A3:  GOTO   4E6
04A4:  BTFSC  3C.6
04A5:  GOTO   428
04A6:  BTFSC  3C.7
04A7:  GOTO   46A
04A8:  GOTO   4C8
04A9:  MOVLW  80
04AA:  XORWF  40,F
04AB:  BTFSS  40.7
04AC:  GOTO   4B1
04AD:  GOTO   4EB
04AE:  MOVF   37,W
04AF:  MOVWF  3B
04B0:  GOTO   4BE
04B1:  MOVF   33,W
04B2:  MOVWF  3B
04B3:  MOVF   40,F
04B4:  BTFSS  03.2
04B5:  GOTO   4BE
04B6:  MOVF   3F,F
04B7:  BTFSS  03.2
04B8:  GOTO   4BE
04B9:  MOVF   3E,F
04BA:  BTFSS  03.2
04BB:  GOTO   4BE
04BC:  CLRF   77
04BD:  GOTO   4DF
04BE:  BTFSC  40.7
04BF:  GOTO   4C8
04C0:  BCF    03.0
04C1:  RLF    3D,F
04C2:  RLF    3E,F
04C3:  RLF    3F,F
04C4:  RLF    40,F
04C5:  DECFSZ 77,F
04C6:  GOTO   4BE
04C7:  GOTO   4E6
04C8:  BTFSS  3B.7
04C9:  GOTO   4CC
04CA:  BSF    40.7
04CB:  GOTO   4DF
04CC:  BCF    40.7
04CD:  GOTO   4DF
04CE:  MOVF   36,W
04CF:  MOVWF  77
04D0:  MOVF   37,W
04D1:  MOVWF  40
04D2:  MOVF   38,W
04D3:  MOVWF  3F
04D4:  MOVF   39,W
04D5:  MOVWF  3E
04D6:  GOTO   4DF
04D7:  MOVF   32,W
04D8:  MOVWF  77
04D9:  MOVF   33,W
04DA:  MOVWF  40
04DB:  MOVF   34,W
04DC:  MOVWF  3F
04DD:  MOVF   35,W
04DE:  MOVWF  3E
04DF:  MOVF   40,W
04E0:  MOVWF  78
04E1:  MOVF   3F,W
04E2:  MOVWF  79
04E3:  MOVF   3E,W
04E4:  MOVWF  7A
04E5:  GOTO   51E
04E6:  CLRF   77
04E7:  CLRF   78
04E8:  CLRF   79
04E9:  CLRF   7A
04EA:  GOTO   51E
04EB:  CLRF   3D
04EC:  COMF   3E,F
04ED:  COMF   3F,F
04EE:  COMF   40,F
04EF:  COMF   3D,F
04F0:  INCF   3D,F
04F1:  BTFSS  03.2
04F2:  GOTO   4F9
04F3:  INCF   3E,F
04F4:  BTFSS  03.2
04F5:  GOTO   4F9
04F6:  INCF   3F,F
04F7:  BTFSC  03.2
04F8:  INCF   40,F
04F9:  BTFSC  3C.0
04FA:  GOTO   407
04FB:  BTFSC  3C.1
04FC:  GOTO   449
04FD:  BTFSC  3C.2
04FE:  GOTO   47F
04FF:  GOTO   4AE
0500:  MOVF   00,W
0501:  ADDWF  3E,F
0502:  BTFSS  03.0
0503:  GOTO   50A
0504:  INCF   3F,F
0505:  BTFSS  03.2
0506:  GOTO   50A
0507:  INCF   40,F
0508:  BTFSC  03.2
0509:  BSF    3A.0
050A:  DECF   04,F
050B:  MOVF   00,W
050C:  ADDWF  3F,F
050D:  BTFSS  03.0
050E:  GOTO   512
050F:  INCF   40,F
0510:  BTFSC  03.2
0511:  BSF    3A.0
0512:  DECF   04,F
0513:  MOVF   00,W
0514:  BTFSS  00.7
0515:  XORLW  80
0516:  ADDWF  40,F
0517:  BTFSC  03.0
0518:  BSF    3A.0
0519:  BTFSC  3C.4
051A:  GOTO   40E
051B:  BTFSC  3C.5
051C:  GOTO   450
051D:  GOTO   486
051E:  BCF    0A.3
051F:  BCF    0A.4
0520:  GOTO   6D3 (RETURN)
0521:  MOVLW  8E
0522:  MOVWF  77
0523:  MOVF   32,W
0524:  SUBWF  77,F
0525:  MOVF   33,W
0526:  MOVWF  79
0527:  MOVF   34,W
0528:  MOVWF  78
0529:  BSF    79.7
052A:  MOVF   77,F
052B:  BTFSC  03.2
052C:  GOTO   538
052D:  BCF    03.0
052E:  MOVF   79,F
052F:  BTFSS  03.2
0530:  GOTO   534
0531:  MOVF   78,F
0532:  BTFSC  03.2
0533:  GOTO   538
0534:  RRF    79,F
0535:  RRF    78,F
0536:  DECFSZ 77,F
0537:  GOTO   52D
0538:  BTFSS  33.7
0539:  GOTO   53F
053A:  COMF   78,F
053B:  COMF   79,F
053C:  INCF   78,F
053D:  BTFSC  03.2
053E:  INCF   79,F
053F:  RETURN
0540:  MOVF   33,W
0541:  MOVWF  3A
0542:  MOVF   37,W
0543:  XORWF  3A,F
0544:  BTFSS  3A.7
0545:  GOTO   54B
0546:  BCF    03.2
0547:  BCF    03.0
0548:  BTFSC  33.7
0549:  BSF    03.0
054A:  GOTO   57E
054B:  MOVF   33,W
054C:  MOVWF  3A
054D:  MOVF   36,W
054E:  MOVWF  3B
054F:  MOVF   32,W
0550:  SUBWF  3B,F
0551:  BTFSC  03.2
0552:  GOTO   559
0553:  BTFSS  3A.7
0554:  GOTO   57E
0555:  MOVF   03,W
0556:  XORLW  01
0557:  MOVWF  03
0558:  GOTO   57E
0559:  MOVF   37,W
055A:  MOVWF  3B
055B:  MOVF   33,W
055C:  SUBWF  3B,F
055D:  BTFSC  03.2
055E:  GOTO   565
055F:  BTFSS  3A.7
0560:  GOTO   57E
0561:  MOVF   03,W
0562:  XORLW  01
0563:  MOVWF  03
0564:  GOTO   57E
0565:  MOVF   38,W
0566:  MOVWF  3B
0567:  MOVF   34,W
0568:  SUBWF  3B,F
0569:  BTFSC  03.2
056A:  GOTO   571
056B:  BTFSS  3A.7
056C:  GOTO   57E
056D:  MOVF   03,W
056E:  XORLW  01
056F:  MOVWF  03
0570:  GOTO   57E
0571:  MOVF   39,W
0572:  MOVWF  3B
0573:  MOVF   35,W
0574:  SUBWF  3B,F
0575:  BTFSC  03.2
0576:  GOTO   57D
0577:  BTFSS  3A.7
0578:  GOTO   57E
0579:  MOVF   03,W
057A:  XORLW  01
057B:  MOVWF  03
057C:  GOTO   57E
057D:  BCF    03.0
057E:  RETURN
057F:  MOVF   39,W
0580:  CLRF   78
0581:  SUBWF  38,W
0582:  BTFSC  03.0
0583:  GOTO   587
0584:  MOVF   38,W
0585:  MOVWF  77
0586:  GOTO   593
0587:  CLRF   77
0588:  MOVLW  08
0589:  MOVWF  3A
058A:  RLF    38,F
058B:  RLF    77,F
058C:  MOVF   39,W
058D:  SUBWF  77,W
058E:  BTFSC  03.0
058F:  MOVWF  77
0590:  RLF    78,F
0591:  DECFSZ 3A,F
0592:  GOTO   58A
0593:  RETURN
0594:  MOVLW  20
0595:  BTFSS  33.4
0596:  MOVLW  30
0597:  MOVWF  34
0598:  MOVF   32,W
0599:  MOVWF  77
059A:  BTFSS  32.7
059B:  GOTO   5A4
059C:  COMF   77,F
059D:  INCF   77,F
059E:  MOVF   77,W
059F:  MOVWF  32
05A0:  MOVLW  2D
05A1:  MOVWF  34
05A2:  BSF    33.7
05A3:  BSF    33.0
05A4:  MOVF   32,W
05A5:  MOVWF  38
05A6:  MOVLW  64
05A7:  MOVWF  39
05A8:  CALL   57F
05A9:  MOVF   77,W
05AA:  MOVWF  32
05AB:  MOVLW  30
05AC:  ADDWF  78,W
05AD:  MOVWF  35
05AE:  MOVF   32,W
05AF:  MOVWF  38
05B0:  MOVLW  0A
05B1:  MOVWF  39
05B2:  CALL   57F
05B3:  MOVLW  30
05B4:  ADDWF  77,W
05B5:  MOVWF  37
05B6:  MOVLW  30
05B7:  ADDWF  78,W
05B8:  MOVWF  36
05B9:  MOVF   34,W
05BA:  MOVWF  77
05BB:  MOVLW  30
05BC:  SUBWF  35,W
05BD:  BTFSC  03.2
05BE:  GOTO   5C3
05BF:  BSF    33.1
05C0:  BTFSC  33.7
05C1:  BSF    33.2
05C2:  GOTO   5D7
05C3:  MOVF   34,W
05C4:  MOVWF  35
05C5:  MOVLW  20
05C6:  MOVWF  34
05C7:  MOVLW  30
05C8:  SUBWF  36,W
05C9:  BTFSC  03.2
05CA:  GOTO   5CF
05CB:  BSF    33.0
05CC:  BTFSC  33.7
05CD:  BSF    33.1
05CE:  GOTO   5D7
05CF:  BTFSS  03.2
05D0:  BSF    33.0
05D1:  BTFSS  03.2
05D2:  GOTO   5D7
05D3:  MOVF   35,W
05D4:  MOVWF  36
05D5:  MOVLW  20
05D6:  MOVWF  35
05D7:  BTFSC  33.2
05D8:  GOTO   5DE
05D9:  BTFSC  33.1
05DA:  GOTO   5E1
05DB:  BTFSC  33.0
05DC:  GOTO   5E4
05DD:  GOTO   5E7
05DE:  MOVF   34,W
05DF:  MOVWF  3F
05E0:  CALL   1B7
05E1:  MOVF   35,W
05E2:  MOVWF  3F
05E3:  CALL   1B7
05E4:  MOVF   36,W
05E5:  MOVWF  3F
05E6:  CALL   1B7
05E7:  MOVF   37,W
05E8:  MOVWF  3F
05E9:  CALL   1B7
05EA:  BCF    0A.3
05EB:  BCF    0A.4
05EC:  GOTO   779 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc = 10 
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT  
.................... #use delay (clock=4000000) 
*
0017:  MOVLW  40
0018:  MOVWF  04
0019:  BCF    03.7
001A:  MOVF   00,W
001B:  BTFSC  03.2
001C:  GOTO   02B
001D:  MOVLW  01
001E:  MOVWF  78
001F:  CLRF   77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  DECFSZ 78,F
0023:  GOTO   01F
0024:  MOVLW  4A
0025:  MOVWF  77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  GOTO   029
0029:  DECFSZ 00,F
002A:  GOTO   01D
002B:  RETURN
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0044:  MOVLW  0F
0045:  BSF    03.5
0046:  ANDWF  06,W
0047:  IORLW  F0
0048:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0049:  BCF    03.5
004A:  BSF    06.2
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  BSF    06.0
....................    delay_cycles(1); 
004D:  NOP
....................    high = lcd_read_nibble(); 
004E:  CALL   038
004F:  MOVF   78,W
0050:  MOVWF  47
....................        
....................    lcd_output_enable(0); 
0051:  BCF    06.0
....................    delay_cycles(1); 
0052:  NOP
....................    lcd_output_enable(1); 
0053:  BSF    06.0
....................    delay_us(1); 
0054:  NOP
....................    low = lcd_read_nibble(); 
0055:  CALL   038
0056:  MOVF   78,W
0057:  MOVWF  46
....................        
....................    lcd_output_enable(0); 
0058:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0059:  MOVLW  0F
005A:  BSF    03.5
005B:  ANDWF  06,W
005C:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005D:  BCF    03.5
005E:  SWAPF  47,W
005F:  MOVWF  77
0060:  MOVLW  F0
0061:  ANDWF  77,F
0062:  MOVF   77,W
0063:  IORWF  46,W
0064:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0038:  MOVF   06,W
0039:  MOVWF  77
003A:  SWAPF  06,W
003B:  ANDLW  0F
003C:  MOVWF  78
....................   #endif 
003D:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002C:  SWAPF  47,W
002D:  ANDLW  F0
002E:  MOVWF  77
002F:  MOVLW  0F
0030:  ANDWF  06,W
0031:  IORWF  77,W
0032:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0033:  NOP
....................    lcd_output_enable(1); 
0034:  BSF    06.0
....................    delay_us(2); 
0035:  GOTO   036
....................    lcd_output_enable(0); 
0036:  BCF    06.0
0037:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003E:  BSF    03.5
003F:  BCF    06.0
....................    lcd_rs_tris(); 
0040:  BCF    06.1
....................    lcd_rw_tris(); 
0041:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0042:  BCF    03.5
0043:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0065:  MOVF   78,W
0066:  MOVWF  46
0067:  BTFSC  46.7
0068:  GOTO   044
....................    lcd_output_rs(address); 
0069:  BTFSS  44.0
006A:  BCF    06.1
006B:  BTFSC  44.0
006C:  BSF    06.1
....................    delay_cycles(1); 
006D:  NOP
....................    lcd_output_rw(0); 
006E:  BCF    06.2
....................    delay_cycles(1); 
006F:  NOP
....................    lcd_output_enable(0); 
0070:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0071:  SWAPF  45,W
0072:  MOVWF  46
0073:  MOVLW  0F
0074:  ANDWF  46,F
0075:  MOVF   46,W
0076:  MOVWF  47
0077:  CALL   02C
....................    lcd_send_nibble(n & 0xf); 
0078:  MOVF   45,W
0079:  ANDLW  0F
007A:  MOVWF  46
007B:  MOVWF  47
007C:  CALL   02C
007D:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007E:  MOVLW  28
007F:  MOVWF  33
0080:  MOVLW  0C
0081:  MOVWF  34
0082:  MOVLW  01
0083:  MOVWF  35
0084:  MOVLW  06
0085:  MOVWF  36
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0086:  BCF    06.0
....................    lcd_output_rs(0); 
0087:  BCF    06.1
....................    lcd_output_rw(0); 
0088:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0089:  MOVLW  0F
008A:  BSF    03.5
008B:  ANDWF  06,W
008C:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
008D:  BCF    06.0
....................    lcd_rs_tris(); 
008E:  BCF    06.1
....................    lcd_rw_tris(); 
008F:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0090:  MOVLW  0F
0091:  BCF    03.5
0092:  MOVWF  40
0093:  CALL   017
....................    for(i=1;i<=3;++i) 
0094:  MOVLW  01
0095:  MOVWF  32
0096:  MOVF   32,W
0097:  SUBLW  03
0098:  BTFSS  03.0
0099:  GOTO   0A2
....................    { 
....................        lcd_send_nibble(3); 
009A:  MOVLW  03
009B:  MOVWF  47
009C:  CALL   02C
....................        delay_ms(5); 
009D:  MOVLW  05
009E:  MOVWF  40
009F:  CALL   017
00A0:  INCF   32,F
00A1:  GOTO   096
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A2:  MOVLW  02
00A3:  MOVWF  47
00A4:  CALL   02C
....................    delay_ms(5); 
00A5:  MOVLW  05
00A6:  MOVWF  40
00A7:  CALL   017
....................    for(i=0;i<=3;++i) 
00A8:  CLRF   32
00A9:  MOVF   32,W
00AA:  SUBLW  03
00AB:  BTFSS  03.0
00AC:  GOTO   0B9
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AD:  MOVLW  33
00AE:  ADDWF  32,W
00AF:  MOVWF  04
00B0:  BCF    03.7
00B1:  MOVF   00,W
00B2:  MOVWF  37
00B3:  CLRF   44
00B4:  MOVF   37,W
00B5:  MOVWF  45
00B6:  CALL   03E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B7:  INCF   32,F
00B8:  GOTO   0A9
00B9:  BCF    0A.3
00BA:  BCF    0A.4
00BB:  GOTO   61E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01A5:  DECFSZ 41,W
01A6:  GOTO   1A8
01A7:  GOTO   1AB
....................       address=LCD_LINE_TWO; 
01A8:  MOVLW  40
01A9:  MOVWF  42
01AA:  GOTO   1AC
....................    else 
....................       address=0; 
01AB:  CLRF   42
....................       
....................    address+=x-1; 
01AC:  MOVLW  01
01AD:  SUBWF  40,W
01AE:  ADDWF  42,F
....................    lcd_send_byte(0,0x80|address); 
01AF:  MOVF   42,W
01B0:  IORLW  80
01B1:  MOVWF  43
01B2:  CLRF   44
01B3:  MOVF   43,W
01B4:  MOVWF  45
01B5:  CALL   03E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01B6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01B7:  MOVF   3F,W
01B8:  XORLW  07
01B9:  BTFSC  03.2
01BA:  GOTO   1C5
01BB:  XORLW  0B
01BC:  BTFSC  03.2
01BD:  GOTO   1CA
01BE:  XORLW  06
01BF:  BTFSC  03.2
01C0:  GOTO   1D2
01C1:  XORLW  02
01C2:  BTFSC  03.2
01C3:  GOTO   1D8
01C4:  GOTO   1DD
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01C5:  MOVLW  01
01C6:  MOVWF  40
01C7:  MOVWF  41
01C8:  CALL   1A5
01C9:  GOTO   1E2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01CA:  CLRF   44
01CB:  MOVLW  01
01CC:  MOVWF  45
01CD:  CALL   03E
....................                      delay_ms(2); 
01CE:  MOVLW  02
01CF:  MOVWF  40
01D0:  CALL   017
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01D1:  GOTO   1E2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01D2:  MOVLW  01
01D3:  MOVWF  40
01D4:  MOVLW  02
01D5:  MOVWF  41
01D6:  CALL   1A5
01D7:  GOTO   1E2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01D8:  CLRF   44
01D9:  MOVLW  10
01DA:  MOVWF  45
01DB:  CALL   03E
01DC:  GOTO   1E2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01DD:  MOVLW  01
01DE:  MOVWF  44
01DF:  MOVF   3F,W
01E0:  MOVWF  45
01E1:  CALL   03E
....................      #endif 
....................    } 
01E2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned int16 adc_pot,adc_lm35; 
.................... float sicaklik,hata,referans; 
.................... int kp = 2,duty = 0; 
....................  
.................... void main(){ 
*
05ED:  MOVF   03,W
05EE:  ANDLW  1F
05EF:  MOVWF  03
05F0:  MOVLW  02
05F1:  MOVWF  30
05F2:  CLRF   31
05F3:  BSF    03.5
05F4:  BSF    1F.0
05F5:  BSF    1F.1
05F6:  BSF    1F.2
05F7:  BCF    1F.3
05F8:  BCF    03.7
....................     
....................    setup_psp(PSP_DISABLED); setup_timer_1(T1_DISABLED);setup_CCP2(CCP_OFF);  
05F9:  BCF    09.4
05FA:  BCF    03.5
05FB:  CLRF   10
05FC:  MOVLW  F0
05FD:  ANDWF  1D,F
....................     
....................    set_tris_a(0x03); 
05FE:  MOVLW  03
05FF:  BSF    03.5
0600:  MOVWF  05
....................    set_tris_c(0x00); 
0601:  MOVLW  00
0602:  MOVWF  07
....................     
....................    setup_ccp1(CCP_PWM); 
0603:  BCF    03.5
0604:  BCF    07.2
0605:  MOVLW  0C
0606:  MOVWF  17
....................    setup_timer_2(T2_DIV_BY_16,100,1);  
0607:  MOVLW  00
0608:  MOVWF  78
0609:  IORLW  06
060A:  MOVWF  12
060B:  MOVLW  64
060C:  BSF    03.5
060D:  MOVWF  12
....................    set_pwm1_duty(duty); 
060E:  BCF    03.5
060F:  MOVF   31,W
0610:  MOVWF  15
....................     
....................    setup_adc(adc_clock_div_32); 
0611:  BCF    1F.6
0612:  BSF    1F.7
0613:  BSF    03.5
0614:  BSF    1F.7
0615:  BCF    03.5
0616:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
0617:  BSF    03.5
0618:  BCF    1F.0
0619:  BCF    1F.1
061A:  BCF    1F.2
061B:  BCF    1F.3
....................     
....................    lcd_init(); 
061C:  BCF    03.5
061D:  GOTO   07E
....................     
....................    while(1){ 
....................     
....................       set_adc_channel(0); 
061E:  MOVLW  00
061F:  MOVWF  78
0620:  MOVF   1F,W
0621:  ANDLW  C7
0622:  IORWF  78,W
0623:  MOVWF  1F
....................       delay_us(25); 
0624:  MOVLW  07
0625:  MOVWF  77
0626:  DECFSZ 77,F
0627:  GOTO   626
0628:  GOTO   629
0629:  NOP
....................       adc_pot = read_adc(); 
062A:  BSF    1F.2
062B:  BTFSC  1F.2
062C:  GOTO   62B
062D:  BSF    03.5
062E:  MOVF   1E,W
062F:  BCF    03.5
0630:  MOVWF  20
0631:  MOVF   1E,W
0632:  MOVWF  21
....................       referans = (adc_pot)/10.24; // 0-100 arasinda degisir 
0633:  MOVF   21,W
0634:  MOVWF  33
0635:  MOVF   20,W
0636:  MOVWF  32
0637:  CALL   0BC
0638:  MOVF   7A,W
0639:  MOVWF  35
063A:  MOVF   79,W
063B:  MOVWF  34
063C:  MOVF   78,W
063D:  MOVWF  33
063E:  MOVF   77,W
063F:  MOVWF  32
0640:  MOVLW  0A
0641:  MOVWF  39
0642:  MOVLW  D7
0643:  MOVWF  38
0644:  MOVLW  23
0645:  MOVWF  37
0646:  MOVLW  82
0647:  MOVWF  36
0648:  GOTO   0D9
0649:  MOVF   7A,W
064A:  MOVWF  2F
064B:  MOVF   79,W
064C:  MOVWF  2E
064D:  MOVF   78,W
064E:  MOVWF  2D
064F:  MOVF   77,W
0650:  MOVWF  2C
....................       lcd_gotoxy(1,1); 
0651:  MOVLW  01
0652:  MOVWF  40
0653:  MOVWF  41
0654:  CALL   1A5
....................       printf(lcd_putc,"\fSet:%.1f",referans); 
0655:  MOVLW  04
0656:  BSF    03.6
0657:  MOVWF  0D
0658:  MOVLW  00
0659:  MOVWF  0F
065A:  BCF    03.0
065B:  MOVLW  05
065C:  BCF    03.6
065D:  MOVWF  32
065E:  CALL   1E3
065F:  MOVLW  89
0660:  MOVWF  04
0661:  MOVF   2F,W
0662:  MOVWF  35
0663:  MOVF   2E,W
0664:  MOVWF  34
0665:  MOVF   2D,W
0666:  MOVWF  33
0667:  MOVF   2C,W
0668:  MOVWF  32
0669:  MOVLW  01
066A:  MOVWF  36
066B:  CALL   2FE
....................       delay_ms(200); 
066C:  MOVLW  C8
066D:  MOVWF  40
066E:  CALL   017
....................        
....................       set_adc_channel(1); 
066F:  MOVLW  08
0670:  MOVWF  78
0671:  MOVF   1F,W
0672:  ANDLW  C7
0673:  IORWF  78,W
0674:  MOVWF  1F
....................       delay_us(25); 
0675:  MOVLW  07
0676:  MOVWF  77
0677:  DECFSZ 77,F
0678:  GOTO   677
0679:  GOTO   67A
067A:  NOP
....................       adc_lm35 = read_adc(); 
067B:  BSF    1F.2
067C:  BTFSC  1F.2
067D:  GOTO   67C
067E:  BSF    03.5
067F:  MOVF   1E,W
0680:  BCF    03.5
0681:  MOVWF  22
0682:  MOVF   1E,W
0683:  MOVWF  23
....................       sicaklik = ((adc_lm35) * 0.4887585532746823); // Sicaklik 
0684:  MOVF   23,W
0685:  MOVWF  33
0686:  MOVF   22,W
0687:  MOVWF  32
0688:  CALL   0BC
0689:  MOVF   7A,W
068A:  MOVWF  42
068B:  MOVF   79,W
068C:  MOVWF  41
068D:  MOVF   78,W
068E:  MOVWF  40
068F:  MOVF   77,W
0690:  MOVWF  3F
0691:  MOVLW  90
0692:  MOVWF  46
0693:  MOVLW  3E
0694:  MOVWF  45
0695:  MOVLW  7A
0696:  MOVWF  44
0697:  MOVLW  7D
0698:  MOVWF  43
0699:  CALL   23A
069A:  MOVF   7A,W
069B:  MOVWF  27
069C:  MOVF   79,W
069D:  MOVWF  26
069E:  MOVF   78,W
069F:  MOVWF  25
06A0:  MOVF   77,W
06A1:  MOVWF  24
....................       lcd_gotoxy(1,2); 
06A2:  MOVLW  01
06A3:  MOVWF  40
06A4:  MOVLW  02
06A5:  MOVWF  41
06A6:  CALL   1A5
....................       printf(lcd_putc,"Temp:%.1f",sicaklik); 
06A7:  MOVLW  09
06A8:  BSF    03.6
06A9:  MOVWF  0D
06AA:  MOVLW  00
06AB:  MOVWF  0F
06AC:  BCF    03.0
06AD:  MOVLW  05
06AE:  BCF    03.6
06AF:  MOVWF  32
06B0:  CALL   1E3
06B1:  MOVLW  89
06B2:  MOVWF  04
06B3:  MOVF   27,W
06B4:  MOVWF  35
06B5:  MOVF   26,W
06B6:  MOVWF  34
06B7:  MOVF   25,W
06B8:  MOVWF  33
06B9:  MOVF   24,W
06BA:  MOVWF  32
06BB:  MOVLW  01
06BC:  MOVWF  36
06BD:  CALL   2FE
....................       delay_ms(200); 
06BE:  MOVLW  C8
06BF:  MOVWF  40
06C0:  CALL   017
....................        
....................       hata = referans-sicaklik;           // Hata 
06C1:  BSF    03.1
06C2:  MOVF   2F,W
06C3:  MOVWF  35
06C4:  MOVF   2E,W
06C5:  MOVWF  34
06C6:  MOVF   2D,W
06C7:  MOVWF  33
06C8:  MOVF   2C,W
06C9:  MOVWF  32
06CA:  MOVF   27,W
06CB:  MOVWF  39
06CC:  MOVF   26,W
06CD:  MOVWF  38
06CE:  MOVF   25,W
06CF:  MOVWF  37
06D0:  MOVF   24,W
06D1:  MOVWF  36
06D2:  GOTO   3DE
06D3:  MOVF   7A,W
06D4:  MOVWF  2B
06D5:  MOVF   79,W
06D6:  MOVWF  2A
06D7:  MOVF   78,W
06D8:  MOVWF  29
06D9:  MOVF   77,W
06DA:  MOVWF  28
....................       lcd_gotoxy(9,1); 
06DB:  MOVLW  09
06DC:  MOVWF  40
06DD:  MOVLW  01
06DE:  MOVWF  41
06DF:  CALL   1A5
....................       printf(lcd_putc,"Err:%.1f",hata); 
06E0:  MOVLW  0E
06E1:  BSF    03.6
06E2:  MOVWF  0D
06E3:  MOVLW  00
06E4:  MOVWF  0F
06E5:  BCF    03.0
06E6:  MOVLW  04
06E7:  BCF    03.6
06E8:  MOVWF  32
06E9:  CALL   1E3
06EA:  MOVLW  89
06EB:  MOVWF  04
06EC:  MOVF   2B,W
06ED:  MOVWF  35
06EE:  MOVF   2A,W
06EF:  MOVWF  34
06F0:  MOVF   29,W
06F1:  MOVWF  33
06F2:  MOVF   28,W
06F3:  MOVWF  32
06F4:  MOVLW  01
06F5:  MOVWF  36
06F6:  CALL   2FE
....................       delay_ms(200); 
06F7:  MOVLW  C8
06F8:  MOVWF  40
06F9:  CALL   017
....................        
....................       duty = kp * hata;             // Duty 
06FA:  CLRF   33
06FB:  MOVF   30,W
06FC:  MOVWF  32
06FD:  CALL   0BC
06FE:  MOVF   7A,W
06FF:  MOVWF  42
0700:  MOVF   79,W
0701:  MOVWF  41
0702:  MOVF   78,W
0703:  MOVWF  40
0704:  MOVF   77,W
0705:  MOVWF  3F
0706:  MOVF   2B,W
0707:  MOVWF  46
0708:  MOVF   2A,W
0709:  MOVWF  45
070A:  MOVF   29,W
070B:  MOVWF  44
070C:  MOVF   28,W
070D:  MOVWF  43
070E:  CALL   23A
070F:  MOVF   7A,W
0710:  MOVWF  35
0711:  MOVF   79,W
0712:  MOVWF  34
0713:  MOVF   78,W
0714:  MOVWF  33
0715:  MOVF   77,W
0716:  MOVWF  32
0717:  CALL   521
0718:  MOVF   78,W
0719:  MOVWF  31
....................        
....................       if(hata > 0){ 
071A:  CLRF   35
071B:  CLRF   34
071C:  CLRF   33
071D:  CLRF   32
071E:  MOVF   2B,W
071F:  MOVWF  39
0720:  MOVF   2A,W
0721:  MOVWF  38
0722:  MOVF   29,W
0723:  MOVWF  37
0724:  MOVF   28,W
0725:  MOVWF  36
0726:  CALL   540
0727:  BTFSS  03.0
0728:  GOTO   74B
....................          duty = kp * hata; 
0729:  CLRF   33
072A:  MOVF   30,W
072B:  MOVWF  32
072C:  CALL   0BC
072D:  MOVF   7A,W
072E:  MOVWF  42
072F:  MOVF   79,W
0730:  MOVWF  41
0731:  MOVF   78,W
0732:  MOVWF  40
0733:  MOVF   77,W
0734:  MOVWF  3F
0735:  MOVF   2B,W
0736:  MOVWF  46
0737:  MOVF   2A,W
0738:  MOVWF  45
0739:  MOVF   29,W
073A:  MOVWF  44
073B:  MOVF   28,W
073C:  MOVWF  43
073D:  CALL   23A
073E:  MOVF   7A,W
073F:  MOVWF  35
0740:  MOVF   79,W
0741:  MOVWF  34
0742:  MOVF   78,W
0743:  MOVWF  33
0744:  MOVF   77,W
0745:  MOVWF  32
0746:  CALL   521
0747:  MOVF   78,W
0748:  MOVWF  31
....................          set_pwm1_duty(duty); 
0749:  MOVF   31,W
074A:  MOVWF  15
....................       } 
....................        
....................       if(hata < 0){ 
074B:  MOVF   2B,W
074C:  MOVWF  35
074D:  MOVF   2A,W
074E:  MOVWF  34
074F:  MOVF   29,W
0750:  MOVWF  33
0751:  MOVF   28,W
0752:  MOVWF  32
0753:  CLRF   39
0754:  CLRF   38
0755:  CLRF   37
0756:  CLRF   36
0757:  CALL   540
0758:  BTFSS  03.0
0759:  GOTO   75D
....................          duty = 0; 
075A:  CLRF   31
....................          set_pwm1_duty(duty); 
075B:  MOVF   31,W
075C:  MOVWF  15
....................       } 
....................        
....................       if(duty > 100){ 
075D:  MOVF   31,W
075E:  SUBLW  64
075F:  BTFSC  03.0
0760:  GOTO   765
....................          duty = 100; 
0761:  MOVLW  64
0762:  MOVWF  31
....................          set_pwm1_duty(duty); 
0763:  MOVF   31,W
0764:  MOVWF  15
....................       } 
....................        
....................       lcd_gotoxy(10,2); 
0765:  MOVLW  0A
0766:  MOVWF  40
0767:  MOVLW  02
0768:  MOVWF  41
0769:  CALL   1A5
....................       printf(lcd_putc,"Duty:%d",duty); 
076A:  MOVLW  13
076B:  BSF    03.6
076C:  MOVWF  0D
076D:  MOVLW  00
076E:  MOVWF  0F
076F:  BCF    03.0
0770:  MOVLW  05
0771:  BCF    03.6
0772:  MOVWF  32
0773:  CALL   1E3
0774:  MOVF   31,W
0775:  MOVWF  32
0776:  MOVLW  18
0777:  MOVWF  33
0778:  GOTO   594
....................       delay_ms(200); 
0779:  MOVLW  C8
077A:  MOVWF  40
077B:  CALL   017
077C:  GOTO   61E
....................        
....................    } 
....................  
.................... } 
077D:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
