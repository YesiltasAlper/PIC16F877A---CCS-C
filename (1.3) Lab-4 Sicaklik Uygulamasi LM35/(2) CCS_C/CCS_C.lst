CCS PCM C Compiler, Version 5.015, 5967               10-Ara-21 16:07

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(4) Lab-4 LM35-ODEV ------------[DUZELT]\(2) CCS_C\CCS_C.lst

               ROM used:   1797 words (22%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           47 (13%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5B4
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 8C,29
0005:  DATA 70,1D
0006:  DATA 25,17
0007:  DATA 31,33
0008:  DATA 00,00
0009:  DATA 0A,2B
000A:  DATA 4C,1D
000B:  DATA 25,17
000C:  DATA 31,33
000D:  DATA 6D,2B
000E:  DATA 00,01
000F:  DATA CC,22
0010:  DATA 44,1D
0011:  DATA 31,00
0012:  DATA CC,22
0013:  DATA 44,1D
0014:  DATA 30,00
*
00BA:  MOVLW  8E
00BB:  MOVWF  77
00BC:  MOVF   31,W
00BD:  MOVWF  78
00BE:  MOVF   30,W
00BF:  MOVWF  79
00C0:  CLRF   7A
00C1:  MOVF   78,F
00C2:  BTFSS  03.2
00C3:  GOTO   0CE
00C4:  MOVF   79,W
00C5:  MOVWF  78
00C6:  CLRF   79
00C7:  MOVLW  08
00C8:  SUBWF  77,F
00C9:  MOVF   78,F
00CA:  BTFSS  03.2
00CB:  GOTO   0CE
00CC:  CLRF   77
00CD:  GOTO   0D6
00CE:  BCF    03.0
00CF:  BTFSC  78.7
00D0:  GOTO   0D5
00D1:  RLF    79,F
00D2:  RLF    78,F
00D3:  DECF   77,F
00D4:  GOTO   0CE
00D5:  BCF    78.7
00D6:  RETURN
00D7:  MOVF   30,W
00D8:  BTFSC  03.2
00D9:  GOTO   19C
00DA:  MOVWF  3C
00DB:  MOVF   34,W
00DC:  BTFSC  03.2
00DD:  GOTO   19C
00DE:  SUBWF  3C,F
00DF:  BTFSS  03.0
00E0:  GOTO   0E6
00E1:  MOVLW  7F
00E2:  ADDWF  3C,F
00E3:  BTFSC  03.0
00E4:  GOTO   19C
00E5:  GOTO   0EC
00E6:  MOVLW  81
00E7:  SUBWF  3C,F
00E8:  BTFSS  03.0
00E9:  GOTO   19C
00EA:  BTFSC  03.2
00EB:  GOTO   19C
00EC:  MOVF   3C,W
00ED:  MOVWF  77
00EE:  CLRF   78
00EF:  CLRF   79
00F0:  CLRF   7A
00F1:  CLRF   3B
00F2:  MOVF   31,W
00F3:  MOVWF  3A
00F4:  BSF    3A.7
00F5:  MOVF   32,W
00F6:  MOVWF  39
00F7:  MOVF   33,W
00F8:  MOVWF  38
00F9:  MOVLW  19
00FA:  MOVWF  3C
00FB:  MOVF   37,W
00FC:  SUBWF  38,F
00FD:  BTFSC  03.0
00FE:  GOTO   10F
00FF:  MOVLW  01
0100:  SUBWF  39,F
0101:  BTFSC  03.0
0102:  GOTO   10F
0103:  SUBWF  3A,F
0104:  BTFSC  03.0
0105:  GOTO   10F
0106:  SUBWF  3B,F
0107:  BTFSC  03.0
0108:  GOTO   10F
0109:  INCF   3B,F
010A:  INCF   3A,F
010B:  INCF   39,F
010C:  MOVF   37,W
010D:  ADDWF  38,F
010E:  GOTO   141
010F:  MOVF   36,W
0110:  SUBWF  39,F
0111:  BTFSC  03.0
0112:  GOTO   12A
0113:  MOVLW  01
0114:  SUBWF  3A,F
0115:  BTFSC  03.0
0116:  GOTO   12A
0117:  SUBWF  3B,F
0118:  BTFSC  03.0
0119:  GOTO   12A
011A:  INCF   3B,F
011B:  INCF   3A,F
011C:  MOVF   36,W
011D:  ADDWF  39,F
011E:  MOVF   37,W
011F:  ADDWF  38,F
0120:  BTFSS  03.0
0121:  GOTO   141
0122:  INCF   39,F
0123:  BTFSS  03.2
0124:  GOTO   141
0125:  INCF   3A,F
0126:  BTFSS  03.2
0127:  GOTO   141
0128:  INCF   3B,F
0129:  GOTO   141
012A:  MOVF   35,W
012B:  IORLW  80
012C:  SUBWF  3A,F
012D:  BTFSC  03.0
012E:  GOTO   140
012F:  MOVLW  01
0130:  SUBWF  3B,F
0131:  BTFSC  03.0
0132:  GOTO   140
0133:  INCF   3B,F
0134:  MOVF   35,W
0135:  IORLW  80
0136:  ADDWF  3A,F
0137:  MOVF   36,W
0138:  ADDWF  39,F
0139:  BTFSS  03.0
013A:  GOTO   11E
013B:  INCF   3A,F
013C:  BTFSS  03.2
013D:  GOTO   11E
013E:  INCF   3B,F
013F:  GOTO   11E
0140:  BSF    7A.0
0141:  DECFSZ 3C,F
0142:  GOTO   144
0143:  GOTO   14F
0144:  BCF    03.0
0145:  RLF    38,F
0146:  RLF    39,F
0147:  RLF    3A,F
0148:  RLF    3B,F
0149:  BCF    03.0
014A:  RLF    7A,F
014B:  RLF    79,F
014C:  RLF    78,F
014D:  RLF    3D,F
014E:  GOTO   0FB
014F:  BTFSS  3D.0
0150:  GOTO   157
0151:  BCF    03.0
0152:  RRF    78,F
0153:  RRF    79,F
0154:  RRF    7A,F
0155:  RRF    3D,F
0156:  GOTO   15A
0157:  DECF   77,F
0158:  BTFSC  03.2
0159:  GOTO   19C
015A:  BTFSC  3D.7
015B:  GOTO   183
015C:  BCF    03.0
015D:  RLF    38,F
015E:  RLF    39,F
015F:  RLF    3A,F
0160:  RLF    3B,F
0161:  MOVF   37,W
0162:  SUBWF  38,F
0163:  BTFSC  03.0
0164:  GOTO   16F
0165:  MOVLW  01
0166:  SUBWF  39,F
0167:  BTFSC  03.0
0168:  GOTO   16F
0169:  SUBWF  3A,F
016A:  BTFSC  03.0
016B:  GOTO   16F
016C:  SUBWF  3B,F
016D:  BTFSS  03.0
016E:  GOTO   192
016F:  MOVF   36,W
0170:  SUBWF  39,F
0171:  BTFSC  03.0
0172:  GOTO   17A
0173:  MOVLW  01
0174:  SUBWF  3A,F
0175:  BTFSC  03.0
0176:  GOTO   17A
0177:  SUBWF  3B,F
0178:  BTFSS  03.0
0179:  GOTO   192
017A:  MOVF   35,W
017B:  IORLW  80
017C:  SUBWF  3A,F
017D:  BTFSC  03.0
017E:  GOTO   183
017F:  MOVLW  01
0180:  SUBWF  3B,F
0181:  BTFSS  03.0
0182:  GOTO   192
0183:  INCF   7A,F
0184:  BTFSS  03.2
0185:  GOTO   192
0186:  INCF   79,F
0187:  BTFSS  03.2
0188:  GOTO   192
0189:  INCF   78,F
018A:  BTFSS  03.2
018B:  GOTO   192
018C:  INCF   77,F
018D:  BTFSC  03.2
018E:  GOTO   19C
018F:  RRF    78,F
0190:  RRF    79,F
0191:  RRF    7A,F
0192:  MOVF   31,W
0193:  MOVWF  3C
0194:  MOVF   35,W
0195:  XORWF  3C,F
0196:  BTFSS  3C.7
0197:  GOTO   19A
0198:  BSF    78.7
0199:  GOTO   1A0
019A:  BCF    78.7
019B:  GOTO   1A0
019C:  CLRF   77
019D:  CLRF   78
019E:  CLRF   79
019F:  CLRF   7A
01A0:  RETURN
01A1:  MOVLW  80
01A2:  BTFSC  03.1
01A3:  XORWF  39,F
01A4:  CLRF   3E
01A5:  CLRF   3F
01A6:  MOVF   35,W
01A7:  MOVWF  3D
01A8:  MOVF   39,W
01A9:  XORWF  3D,F
01AA:  MOVF   34,W
01AB:  BTFSC  03.2
01AC:  GOTO   291
01AD:  MOVWF  3C
01AE:  MOVWF  77
01AF:  MOVF   38,W
01B0:  BTFSC  03.2
01B1:  GOTO   29A
01B2:  SUBWF  3C,F
01B3:  BTFSC  03.2
01B4:  GOTO   236
01B5:  BTFSS  03.0
01B6:  GOTO   1F4
01B7:  MOVF   39,W
01B8:  MOVWF  42
01B9:  BSF    42.7
01BA:  MOVF   3A,W
01BB:  MOVWF  41
01BC:  MOVF   3B,W
01BD:  MOVWF  40
01BE:  CLRF   3F
01BF:  BCF    03.0
01C0:  RRF    42,F
01C1:  RRF    41,F
01C2:  RRF    40,F
01C3:  RRF    3F,F
01C4:  DECFSZ 3C,F
01C5:  GOTO   1BE
01C6:  BTFSS  3D.7
01C7:  GOTO   1CB
01C8:  BSF    3E.0
01C9:  GOTO   2AE
01CA:  BCF    3E.0
01CB:  BCF    3C.0
01CC:  BSF    3E.4
01CD:  MOVLW  37
01CE:  MOVWF  04
01CF:  BCF    03.7
01D0:  GOTO   2C3
01D1:  BCF    3E.4
01D2:  BTFSC  3D.7
01D3:  GOTO   1DE
01D4:  BTFSS  3C.0
01D5:  GOTO   1E9
01D6:  RRF    42,F
01D7:  RRF    41,F
01D8:  RRF    40,F
01D9:  RRF    3F,F
01DA:  INCF   77,F
01DB:  BTFSC  03.2
01DC:  GOTO   2A9
01DD:  GOTO   1E9
01DE:  BTFSC  42.7
01DF:  GOTO   1EC
01E0:  BCF    03.0
01E1:  RLF    3F,F
01E2:  RLF    40,F
01E3:  RLF    41,F
01E4:  RLF    42,F
01E5:  DECF   77,F
01E6:  BTFSC  03.2
01E7:  GOTO   2A9
01E8:  GOTO   1DE
01E9:  BSF    3E.6
01EA:  GOTO   256
01EB:  BCF    3E.6
01EC:  MOVF   35,W
01ED:  MOVWF  3D
01EE:  BTFSS  3D.7
01EF:  GOTO   1F2
01F0:  BSF    42.7
01F1:  GOTO   2A2
01F2:  BCF    42.7
01F3:  GOTO   2A2
01F4:  MOVF   38,W
01F5:  MOVWF  3C
01F6:  MOVWF  77
01F7:  MOVF   34,W
01F8:  SUBWF  3C,F
01F9:  MOVF   35,W
01FA:  MOVWF  42
01FB:  BSF    42.7
01FC:  MOVF   36,W
01FD:  MOVWF  41
01FE:  MOVF   37,W
01FF:  MOVWF  40
0200:  CLRF   3F
0201:  BCF    03.0
0202:  RRF    42,F
0203:  RRF    41,F
0204:  RRF    40,F
0205:  RRF    3F,F
0206:  DECFSZ 3C,F
0207:  GOTO   200
0208:  BTFSS  3D.7
0209:  GOTO   20D
020A:  BSF    3E.1
020B:  GOTO   2AE
020C:  BCF    3E.1
020D:  BCF    3C.0
020E:  BSF    3E.5
020F:  MOVLW  3B
0210:  MOVWF  04
0211:  BCF    03.7
0212:  GOTO   2C3
0213:  BCF    3E.5
0214:  BTFSC  3D.7
0215:  GOTO   220
0216:  BTFSS  3C.0
0217:  GOTO   22B
0218:  RRF    42,F
0219:  RRF    41,F
021A:  RRF    40,F
021B:  RRF    3F,F
021C:  INCF   77,F
021D:  BTFSC  03.2
021E:  GOTO   2A9
021F:  GOTO   22B
0220:  BTFSC  42.7
0221:  GOTO   22E
0222:  BCF    03.0
0223:  RLF    3F,F
0224:  RLF    40,F
0225:  RLF    41,F
0226:  RLF    42,F
0227:  DECF   77,F
0228:  BTFSC  03.2
0229:  GOTO   2A9
022A:  GOTO   220
022B:  BSF    3E.7
022C:  GOTO   256
022D:  BCF    3E.7
022E:  MOVF   39,W
022F:  MOVWF  3D
0230:  BTFSS  3D.7
0231:  GOTO   234
0232:  BSF    42.7
0233:  GOTO   2A2
0234:  BCF    42.7
0235:  GOTO   2A2
0236:  MOVF   39,W
0237:  MOVWF  42
0238:  BSF    42.7
0239:  MOVF   3A,W
023A:  MOVWF  41
023B:  MOVF   3B,W
023C:  MOVWF  40
023D:  BTFSS  3D.7
023E:  GOTO   243
023F:  BCF    42.7
0240:  BSF    3E.2
0241:  GOTO   2AE
0242:  BCF    3E.2
0243:  CLRF   3F
0244:  BCF    3C.0
0245:  MOVLW  37
0246:  MOVWF  04
0247:  BCF    03.7
0248:  GOTO   2C3
0249:  BTFSC  3D.7
024A:  GOTO   26C
024B:  MOVF   35,W
024C:  MOVWF  3D
024D:  BTFSS  3C.0
024E:  GOTO   256
024F:  RRF    42,F
0250:  RRF    41,F
0251:  RRF    40,F
0252:  RRF    3F,F
0253:  INCF   77,F
0254:  BTFSC  03.2
0255:  GOTO   2A9
0256:  BTFSS  3F.7
0257:  GOTO   267
0258:  INCF   40,F
0259:  BTFSS  03.2
025A:  GOTO   267
025B:  INCF   41,F
025C:  BTFSS  03.2
025D:  GOTO   267
025E:  INCF   42,F
025F:  BTFSS  03.2
0260:  GOTO   267
0261:  RRF    42,F
0262:  RRF    41,F
0263:  RRF    40,F
0264:  INCF   77,F
0265:  BTFSC  03.2
0266:  GOTO   2A9
0267:  BTFSC  3E.6
0268:  GOTO   1EB
0269:  BTFSC  3E.7
026A:  GOTO   22D
026B:  GOTO   28B
026C:  MOVLW  80
026D:  XORWF  42,F
026E:  BTFSS  42.7
026F:  GOTO   274
0270:  GOTO   2AE
0271:  MOVF   39,W
0272:  MOVWF  3D
0273:  GOTO   281
0274:  MOVF   35,W
0275:  MOVWF  3D
0276:  MOVF   42,F
0277:  BTFSS  03.2
0278:  GOTO   281
0279:  MOVF   41,F
027A:  BTFSS  03.2
027B:  GOTO   281
027C:  MOVF   40,F
027D:  BTFSS  03.2
027E:  GOTO   281
027F:  CLRF   77
0280:  GOTO   2A2
0281:  BTFSC  42.7
0282:  GOTO   28B
0283:  BCF    03.0
0284:  RLF    3F,F
0285:  RLF    40,F
0286:  RLF    41,F
0287:  RLF    42,F
0288:  DECFSZ 77,F
0289:  GOTO   281
028A:  GOTO   2A9
028B:  BTFSS  3D.7
028C:  GOTO   28F
028D:  BSF    42.7
028E:  GOTO   2A2
028F:  BCF    42.7
0290:  GOTO   2A2
0291:  MOVF   38,W
0292:  MOVWF  77
0293:  MOVF   39,W
0294:  MOVWF  42
0295:  MOVF   3A,W
0296:  MOVWF  41
0297:  MOVF   3B,W
0298:  MOVWF  40
0299:  GOTO   2A2
029A:  MOVF   34,W
029B:  MOVWF  77
029C:  MOVF   35,W
029D:  MOVWF  42
029E:  MOVF   36,W
029F:  MOVWF  41
02A0:  MOVF   37,W
02A1:  MOVWF  40
02A2:  MOVF   42,W
02A3:  MOVWF  78
02A4:  MOVF   41,W
02A5:  MOVWF  79
02A6:  MOVF   40,W
02A7:  MOVWF  7A
02A8:  GOTO   2E1
02A9:  CLRF   77
02AA:  CLRF   78
02AB:  CLRF   79
02AC:  CLRF   7A
02AD:  GOTO   2E1
02AE:  CLRF   3F
02AF:  COMF   40,F
02B0:  COMF   41,F
02B1:  COMF   42,F
02B2:  COMF   3F,F
02B3:  INCF   3F,F
02B4:  BTFSS  03.2
02B5:  GOTO   2BC
02B6:  INCF   40,F
02B7:  BTFSS  03.2
02B8:  GOTO   2BC
02B9:  INCF   41,F
02BA:  BTFSC  03.2
02BB:  INCF   42,F
02BC:  BTFSC  3E.0
02BD:  GOTO   1CA
02BE:  BTFSC  3E.1
02BF:  GOTO   20C
02C0:  BTFSC  3E.2
02C1:  GOTO   242
02C2:  GOTO   271
02C3:  MOVF   00,W
02C4:  ADDWF  40,F
02C5:  BTFSS  03.0
02C6:  GOTO   2CD
02C7:  INCF   41,F
02C8:  BTFSS  03.2
02C9:  GOTO   2CD
02CA:  INCF   42,F
02CB:  BTFSC  03.2
02CC:  BSF    3C.0
02CD:  DECF   04,F
02CE:  MOVF   00,W
02CF:  ADDWF  41,F
02D0:  BTFSS  03.0
02D1:  GOTO   2D5
02D2:  INCF   42,F
02D3:  BTFSC  03.2
02D4:  BSF    3C.0
02D5:  DECF   04,F
02D6:  MOVF   00,W
02D7:  BTFSS  00.7
02D8:  XORLW  80
02D9:  ADDWF  42,F
02DA:  BTFSC  03.0
02DB:  BSF    3C.0
02DC:  BTFSC  3E.4
02DD:  GOTO   1D1
02DE:  BTFSC  3E.5
02DF:  GOTO   213
02E0:  GOTO   249
02E1:  BCF    0A.3
02E2:  BCF    0A.4
02E3:  GOTO   61C (RETURN)
*
0322:  MOVF   0B,W
0323:  MOVWF  31
0324:  BCF    0B.7
0325:  BSF    03.5
0326:  BSF    03.6
0327:  BSF    0C.7
0328:  BSF    0C.0
0329:  NOP
032A:  NOP
032B:  BCF    03.5
032C:  BCF    03.6
032D:  BTFSC  31.7
032E:  BSF    0B.7
032F:  BTFSC  03.0
0330:  GOTO   359
0331:  BSF    03.6
0332:  MOVF   0C,W
0333:  ANDLW  7F
0334:  BCF    03.6
0335:  MOVWF  31
0336:  BSF    03.6
0337:  MOVF   0D,W
0338:  BCF    03.6
0339:  MOVWF  32
033A:  BSF    03.6
033B:  MOVF   0F,W
033C:  BCF    03.6
033D:  MOVWF  33
033E:  MOVF   31,W
033F:  MOVWF  3D
0340:  CALL   2F6
0341:  MOVF   32,W
0342:  BSF    03.6
0343:  MOVWF  0D
0344:  BCF    03.6
0345:  MOVF   33,W
0346:  BSF    03.6
0347:  MOVWF  0F
0348:  BCF    03.6
0349:  MOVF   0B,W
034A:  MOVWF  34
034B:  BCF    0B.7
034C:  BSF    03.5
034D:  BSF    03.6
034E:  BSF    0C.7
034F:  BSF    0C.0
0350:  NOP
0351:  NOP
0352:  BCF    03.5
0353:  BCF    03.6
0354:  BTFSC  34.7
0355:  BSF    0B.7
0356:  DECFSZ 30,F
0357:  GOTO   359
0358:  GOTO   378
0359:  BSF    03.6
035A:  RLF    0C,W
035B:  RLF    0E,W
035C:  ANDLW  7F
035D:  BCF    03.6
035E:  MOVWF  31
035F:  BSF    03.6
0360:  MOVF   0D,W
0361:  BCF    03.6
0362:  MOVWF  32
0363:  BSF    03.6
0364:  MOVF   0F,W
0365:  BCF    03.6
0366:  MOVWF  33
0367:  MOVF   31,W
0368:  MOVWF  3D
0369:  CALL   2F6
036A:  MOVF   32,W
036B:  BSF    03.6
036C:  MOVWF  0D
036D:  BCF    03.6
036E:  MOVF   33,W
036F:  BSF    03.6
0370:  MOVWF  0F
0371:  INCF   0D,F
0372:  BTFSC  03.2
0373:  INCF   0F,F
0374:  BCF    03.0
0375:  BCF    03.6
0376:  DECFSZ 30,F
0377:  GOTO   322
0378:  RETURN
0379:  MOVF   3D,W
037A:  BTFSC  03.2
037B:  GOTO   3E9
037C:  MOVWF  45
037D:  MOVF   41,W
037E:  BTFSC  03.2
037F:  GOTO   3E9
0380:  ADDWF  45,F
0381:  BTFSC  03.0
0382:  GOTO   38A
0383:  MOVLW  7F
0384:  SUBWF  45,F
0385:  BTFSS  03.0
0386:  GOTO   3E9
0387:  BTFSC  03.2
0388:  GOTO   3E9
0389:  GOTO   38E
038A:  MOVLW  81
038B:  ADDWF  45,F
038C:  BTFSC  03.0
038D:  GOTO   3E9
038E:  MOVF   45,W
038F:  MOVWF  77
0390:  CLRF   78
0391:  CLRF   79
0392:  CLRF   7A
0393:  MOVF   3E,W
0394:  MOVWF  49
0395:  BSF    49.7
0396:  MOVF   3F,W
0397:  MOVWF  48
0398:  MOVF   40,W
0399:  MOVWF  47
039A:  MOVLW  18
039B:  MOVWF  45
039C:  CLRF   46
039D:  BTFSS  47.0
039E:  GOTO   3B7
039F:  MOVF   44,W
03A0:  ADDWF  7A,F
03A1:  BTFSS  03.0
03A2:  GOTO   3A9
03A3:  INCF   79,F
03A4:  BTFSS  03.2
03A5:  GOTO   3A9
03A6:  INCF   78,F
03A7:  BTFSC  03.2
03A8:  BSF    46.7
03A9:  MOVF   43,W
03AA:  ADDWF  79,F
03AB:  BTFSS  03.0
03AC:  GOTO   3B0
03AD:  INCF   78,F
03AE:  BTFSC  03.2
03AF:  BSF    46.7
03B0:  MOVF   42,W
03B1:  MOVWF  3F
03B2:  BSF    3F.7
03B3:  MOVF   3F,W
03B4:  ADDWF  78,F
03B5:  BTFSC  03.0
03B6:  BSF    46.7
03B7:  RLF    46,F
03B8:  RRF    78,F
03B9:  RRF    79,F
03BA:  RRF    7A,F
03BB:  RRF    49,F
03BC:  RRF    48,F
03BD:  RRF    47,F
03BE:  BCF    03.0
03BF:  DECFSZ 45,F
03C0:  GOTO   39C
03C1:  MOVLW  01
03C2:  ADDWF  77,F
03C3:  BTFSC  03.0
03C4:  GOTO   3E9
03C5:  BTFSC  78.7
03C6:  GOTO   3CE
03C7:  RLF    49,F
03C8:  RLF    7A,F
03C9:  RLF    79,F
03CA:  RLF    78,F
03CB:  DECF   77,F
03CC:  BTFSC  03.2
03CD:  GOTO   3E9
03CE:  BTFSS  49.7
03CF:  GOTO   3DF
03D0:  INCF   7A,F
03D1:  BTFSS  03.2
03D2:  GOTO   3DF
03D3:  INCF   79,F
03D4:  BTFSS  03.2
03D5:  GOTO   3DF
03D6:  INCF   78,F
03D7:  BTFSS  03.2
03D8:  GOTO   3DF
03D9:  RRF    78,F
03DA:  RRF    79,F
03DB:  RRF    7A,F
03DC:  INCF   77,F
03DD:  BTFSC  03.2
03DE:  GOTO   3E9
03DF:  MOVF   3E,W
03E0:  MOVWF  46
03E1:  MOVF   42,W
03E2:  XORWF  46,F
03E3:  BTFSS  46.7
03E4:  GOTO   3E7
03E5:  BSF    78.7
03E6:  GOTO   3ED
03E7:  BCF    78.7
03E8:  GOTO   3ED
03E9:  CLRF   77
03EA:  CLRF   78
03EB:  CLRF   79
03EC:  CLRF   7A
03ED:  RETURN
03EE:  BTFSC  03.1
03EF:  GOTO   3F3
03F0:  MOVLW  45
03F1:  MOVWF  04
03F2:  BCF    03.7
03F3:  CLRF   77
03F4:  CLRF   78
03F5:  CLRF   79
03F6:  CLRF   7A
03F7:  CLRF   45
03F8:  CLRF   46
03F9:  CLRF   47
03FA:  CLRF   48
03FB:  MOVF   44,W
03FC:  IORWF  43,W
03FD:  IORWF  42,W
03FE:  IORWF  41,W
03FF:  BTFSC  03.2
0400:  GOTO   431
0401:  MOVLW  20
0402:  MOVWF  49
0403:  BCF    03.0
0404:  RLF    3D,F
0405:  RLF    3E,F
0406:  RLF    3F,F
0407:  RLF    40,F
0408:  RLF    45,F
0409:  RLF    46,F
040A:  RLF    47,F
040B:  RLF    48,F
040C:  MOVF   44,W
040D:  SUBWF  48,W
040E:  BTFSS  03.2
040F:  GOTO   41A
0410:  MOVF   43,W
0411:  SUBWF  47,W
0412:  BTFSS  03.2
0413:  GOTO   41A
0414:  MOVF   42,W
0415:  SUBWF  46,W
0416:  BTFSS  03.2
0417:  GOTO   41A
0418:  MOVF   41,W
0419:  SUBWF  45,W
041A:  BTFSS  03.0
041B:  GOTO   42B
041C:  MOVF   41,W
041D:  SUBWF  45,F
041E:  MOVF   42,W
041F:  BTFSS  03.0
0420:  INCFSZ 42,W
0421:  SUBWF  46,F
0422:  MOVF   43,W
0423:  BTFSS  03.0
0424:  INCFSZ 43,W
0425:  SUBWF  47,F
0426:  MOVF   44,W
0427:  BTFSS  03.0
0428:  INCFSZ 44,W
0429:  SUBWF  48,F
042A:  BSF    03.0
042B:  RLF    77,F
042C:  RLF    78,F
042D:  RLF    79,F
042E:  RLF    7A,F
042F:  DECFSZ 49,F
0430:  GOTO   403
0431:  MOVF   45,W
0432:  MOVWF  00
0433:  INCF   04,F
0434:  MOVF   46,W
0435:  MOVWF  00
0436:  INCF   04,F
0437:  MOVF   47,W
0438:  MOVWF  00
0439:  INCF   04,F
043A:  MOVF   48,W
043B:  MOVWF  00
043C:  RETURN
043D:  MOVF   04,W
043E:  MOVWF  35
043F:  MOVF   34,W
0440:  MOVWF  37
0441:  BTFSC  03.2
0442:  GOTO   45C
0443:  MOVF   33,W
0444:  MOVWF  40
0445:  MOVF   32,W
0446:  MOVWF  3F
0447:  MOVF   31,W
0448:  MOVWF  3E
0449:  MOVF   30,W
044A:  MOVWF  3D
044B:  CLRF   44
044C:  CLRF   43
044D:  MOVLW  20
044E:  MOVWF  42
044F:  MOVLW  82
0450:  MOVWF  41
0451:  CALL   379
0452:  MOVF   7A,W
0453:  MOVWF  33
0454:  MOVF   79,W
0455:  MOVWF  32
0456:  MOVF   78,W
0457:  MOVWF  31
0458:  MOVF   77,W
0459:  MOVWF  30
045A:  DECFSZ 37,F
045B:  GOTO   443
045C:  MOVF   33,W
045D:  MOVWF  40
045E:  MOVF   32,W
045F:  MOVWF  3F
0460:  MOVF   31,W
0461:  MOVWF  3E
0462:  MOVF   30,W
0463:  MOVWF  3D
0464:  MOVF   3D,W
0465:  SUBLW  B6
0466:  MOVWF  3D
0467:  CLRF   7A
0468:  MOVF   3E,W
0469:  MOVWF  41
046A:  BSF    3E.7
046B:  BCF    03.0
046C:  RRF    3E,F
046D:  RRF    3F,F
046E:  RRF    40,F
046F:  RRF    7A,F
0470:  RRF    79,F
0471:  RRF    78,F
0472:  RRF    77,F
0473:  DECFSZ 3D,F
0474:  GOTO   46B
0475:  BTFSS  41.7
0476:  GOTO   482
0477:  COMF   77,F
0478:  COMF   78,F
0479:  COMF   79,F
047A:  COMF   7A,F
047B:  INCF   77,F
047C:  BTFSC  03.2
047D:  INCF   78,F
047E:  BTFSC  03.2
047F:  INCF   79,F
0480:  BTFSC  03.2
0481:  INCF   7A,F
0482:  MOVF   7A,W
0483:  MOVWF  33
0484:  MOVF   79,W
0485:  MOVWF  32
0486:  MOVF   78,W
0487:  MOVWF  31
0488:  MOVF   77,W
0489:  MOVWF  30
048A:  BTFSS  33.7
048B:  GOTO   499
048C:  DECF   35,F
048D:  BSF    35.5
048E:  COMF   30,F
048F:  COMF   31,F
0490:  COMF   32,F
0491:  COMF   33,F
0492:  INCF   30,F
0493:  BTFSC  03.2
0494:  INCF   31,F
0495:  BTFSC  03.2
0496:  INCF   32,F
0497:  BTFSC  03.2
0498:  INCF   33,F
0499:  MOVLW  3B
049A:  MOVWF  3C
049B:  MOVLW  9A
049C:  MOVWF  3B
049D:  MOVLW  CA
049E:  MOVWF  3A
049F:  CLRF   39
04A0:  MOVLW  0A
04A1:  MOVWF  37
04A2:  MOVF   34,W
04A3:  BTFSC  03.2
04A4:  INCF   35,F
04A5:  BSF    03.1
04A6:  MOVLW  30
04A7:  MOVWF  04
04A8:  BCF    03.7
04A9:  MOVF   33,W
04AA:  MOVWF  40
04AB:  MOVF   32,W
04AC:  MOVWF  3F
04AD:  MOVF   31,W
04AE:  MOVWF  3E
04AF:  MOVF   30,W
04B0:  MOVWF  3D
04B1:  MOVF   3C,W
04B2:  MOVWF  44
04B3:  MOVF   3B,W
04B4:  MOVWF  43
04B5:  MOVF   3A,W
04B6:  MOVWF  42
04B7:  MOVF   39,W
04B8:  MOVWF  41
04B9:  CALL   3EE
04BA:  MOVF   78,W
04BB:  MOVF   77,F
04BC:  BTFSS  03.2
04BD:  GOTO   4D1
04BE:  INCF   34,W
04BF:  SUBWF  37,W
04C0:  BTFSC  03.2
04C1:  GOTO   4D1
04C2:  MOVF   35,W
04C3:  BTFSC  03.2
04C4:  GOTO   4D3
04C5:  ANDLW  0F
04C6:  SUBWF  37,W
04C7:  BTFSC  03.2
04C8:  GOTO   4CB
04C9:  BTFSC  03.0
04CA:  GOTO   503
04CB:  BTFSC  35.7
04CC:  GOTO   503
04CD:  BTFSC  35.6
04CE:  GOTO   4D3
04CF:  MOVLW  20
04D0:  GOTO   4FF
04D1:  MOVLW  20
04D2:  ANDWF  35,F
04D3:  BTFSS  35.5
04D4:  GOTO   4E1
04D5:  BCF    35.5
04D6:  MOVF   34,W
04D7:  BTFSS  03.2
04D8:  DECF   35,F
04D9:  MOVF   77,W
04DA:  MOVWF  35
04DB:  MOVLW  2D
04DC:  MOVWF  3D
04DD:  CALL   2F6
04DE:  MOVF   35,W
04DF:  MOVWF  77
04E0:  CLRF   35
04E1:  MOVF   34,W
04E2:  SUBWF  37,W
04E3:  BTFSS  03.2
04E4:  GOTO   4EF
04E5:  MOVF   77,W
04E6:  MOVWF  35
04E7:  MOVLW  2E
04E8:  MOVWF  3D
04E9:  CALL   2F6
04EA:  MOVF   35,W
04EB:  MOVWF  77
04EC:  MOVLW  20
04ED:  ANDWF  35,F
04EE:  MOVLW  00
04EF:  MOVLW  30
04F0:  BTFSS  35.5
04F1:  GOTO   4FF
04F2:  BCF    35.5
04F3:  MOVF   34,W
04F4:  BTFSS  03.2
04F5:  DECF   35,F
04F6:  MOVF   77,W
04F7:  MOVWF  35
04F8:  MOVLW  2D
04F9:  MOVWF  3D
04FA:  CALL   2F6
04FB:  MOVF   35,W
04FC:  MOVWF  77
04FD:  CLRF   35
04FE:  MOVLW  30
04FF:  ADDWF  77,F
0500:  MOVF   77,W
0501:  MOVWF  3D
0502:  CALL   2F6
0503:  BCF    03.1
0504:  MOVF   3C,W
0505:  MOVWF  40
0506:  MOVF   3B,W
0507:  MOVWF  3F
0508:  MOVF   3A,W
0509:  MOVWF  3E
050A:  MOVF   39,W
050B:  MOVWF  3D
050C:  CLRF   44
050D:  CLRF   43
050E:  CLRF   42
050F:  MOVLW  0A
0510:  MOVWF  41
0511:  CALL   3EE
0512:  MOVF   7A,W
0513:  MOVWF  3C
0514:  MOVF   79,W
0515:  MOVWF  3B
0516:  MOVF   78,W
0517:  MOVWF  3A
0518:  MOVF   77,W
0519:  MOVWF  39
051A:  DECFSZ 37,F
051B:  GOTO   4A5
051C:  RETURN
051D:  MOVF   31,W
051E:  MOVWF  38
051F:  MOVF   35,W
0520:  XORWF  38,F
0521:  BTFSS  38.7
0522:  GOTO   528
0523:  BCF    03.2
0524:  BCF    03.0
0525:  BTFSC  31.7
0526:  BSF    03.0
0527:  GOTO   55B
0528:  MOVF   31,W
0529:  MOVWF  38
052A:  MOVF   34,W
052B:  MOVWF  39
052C:  MOVF   30,W
052D:  SUBWF  39,F
052E:  BTFSC  03.2
052F:  GOTO   536
0530:  BTFSS  38.7
0531:  GOTO   55B
0532:  MOVF   03,W
0533:  XORLW  01
0534:  MOVWF  03
0535:  GOTO   55B
0536:  MOVF   35,W
0537:  MOVWF  39
0538:  MOVF   31,W
0539:  SUBWF  39,F
053A:  BTFSC  03.2
053B:  GOTO   542
053C:  BTFSS  38.7
053D:  GOTO   55B
053E:  MOVF   03,W
053F:  XORLW  01
0540:  MOVWF  03
0541:  GOTO   55B
0542:  MOVF   36,W
0543:  MOVWF  39
0544:  MOVF   32,W
0545:  SUBWF  39,F
0546:  BTFSC  03.2
0547:  GOTO   54E
0548:  BTFSS  38.7
0549:  GOTO   55B
054A:  MOVF   03,W
054B:  XORLW  01
054C:  MOVWF  03
054D:  GOTO   55B
054E:  MOVF   37,W
054F:  MOVWF  39
0550:  MOVF   33,W
0551:  SUBWF  39,F
0552:  BTFSC  03.2
0553:  GOTO   55A
0554:  BTFSS  38.7
0555:  GOTO   55B
0556:  MOVF   03,W
0557:  XORLW  01
0558:  MOVWF  03
0559:  GOTO   55B
055A:  BCF    03.0
055B:  BCF    0A.3
055C:  BCF    0A.4
055D:  GOTO   6E0 (RETURN)
055E:  MOVF   0B,W
055F:  MOVWF  30
0560:  BCF    0B.7
0561:  BSF    03.5
0562:  BSF    03.6
0563:  BSF    0C.7
0564:  BSF    0C.0
0565:  NOP
0566:  NOP
0567:  BCF    03.5
0568:  BCF    03.6
0569:  BTFSC  30.7
056A:  BSF    0B.7
056B:  BSF    03.6
056C:  MOVF   0C,W
056D:  ANDLW  7F
056E:  BTFSC  03.2
056F:  GOTO   5B2
0570:  BCF    03.6
0571:  MOVWF  30
0572:  BSF    03.6
0573:  MOVF   0D,W
0574:  BCF    03.6
0575:  MOVWF  31
0576:  BSF    03.6
0577:  MOVF   0F,W
0578:  BCF    03.6
0579:  MOVWF  32
057A:  MOVF   30,W
057B:  MOVWF  3D
057C:  CALL   2F6
057D:  MOVF   31,W
057E:  BSF    03.6
057F:  MOVWF  0D
0580:  BCF    03.6
0581:  MOVF   32,W
0582:  BSF    03.6
0583:  MOVWF  0F
0584:  BCF    03.6
0585:  MOVF   0B,W
0586:  MOVWF  33
0587:  BCF    0B.7
0588:  BSF    03.5
0589:  BSF    03.6
058A:  BSF    0C.7
058B:  BSF    0C.0
058C:  NOP
058D:  NOP
058E:  BCF    03.5
058F:  BCF    03.6
0590:  BTFSC  33.7
0591:  BSF    0B.7
0592:  BSF    03.6
0593:  RLF    0C,W
0594:  RLF    0E,W
0595:  ANDLW  7F
0596:  BTFSC  03.2
0597:  GOTO   5B2
0598:  BCF    03.6
0599:  MOVWF  30
059A:  BSF    03.6
059B:  MOVF   0D,W
059C:  BCF    03.6
059D:  MOVWF  31
059E:  BSF    03.6
059F:  MOVF   0F,W
05A0:  BCF    03.6
05A1:  MOVWF  32
05A2:  MOVF   30,W
05A3:  MOVWF  3D
05A4:  CALL   2F6
05A5:  MOVF   31,W
05A6:  BSF    03.6
05A7:  MOVWF  0D
05A8:  BCF    03.6
05A9:  MOVF   32,W
05AA:  BSF    03.6
05AB:  MOVWF  0F
05AC:  INCF   0D,F
05AD:  BTFSC  03.2
05AE:  INCF   0F,F
05AF:  BCF    03.6
05B0:  GOTO   55E
05B1:  BSF    03.6
05B2:  BCF    03.6
05B3:  RETURN
....................  
.................... #list 
....................  
.................... #device adc = 10 
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT  
.................... #use delay (clock=4000000) 
*
0015:  MOVLW  3E
0016:  MOVWF  04
0017:  BCF    03.7
0018:  MOVF   00,W
0019:  BTFSC  03.2
001A:  GOTO   029
001B:  MOVLW  01
001C:  MOVWF  78
001D:  CLRF   77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 78,F
0021:  GOTO   01D
0022:  MOVLW  4A
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  GOTO   027
0027:  DECFSZ 00,F
0028:  GOTO   01B
0029:  RETURN
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0042:  MOVLW  0F
0043:  BSF    03.5
0044:  ANDWF  06,W
0045:  IORLW  F0
0046:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0047:  BCF    03.5
0048:  BSF    06.2
....................    delay_cycles(1); 
0049:  NOP
....................    lcd_output_enable(1); 
004A:  BSF    06.0
....................    delay_cycles(1); 
004B:  NOP
....................    high = lcd_read_nibble(); 
004C:  CALL   036
004D:  MOVF   78,W
004E:  MOVWF  45
....................        
....................    lcd_output_enable(0); 
004F:  BCF    06.0
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BSF    06.0
....................    delay_us(1); 
0052:  NOP
....................    low = lcd_read_nibble(); 
0053:  CALL   036
0054:  MOVF   78,W
0055:  MOVWF  44
....................        
....................    lcd_output_enable(0); 
0056:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0057:  MOVLW  0F
0058:  BSF    03.5
0059:  ANDWF  06,W
005A:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005B:  BCF    03.5
005C:  SWAPF  45,W
005D:  MOVWF  77
005E:  MOVLW  F0
005F:  ANDWF  77,F
0060:  MOVF   77,W
0061:  IORWF  44,W
0062:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0036:  MOVF   06,W
0037:  MOVWF  77
0038:  SWAPF  06,W
0039:  ANDLW  0F
003A:  MOVWF  78
....................   #endif 
003B:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002A:  SWAPF  45,W
002B:  ANDLW  F0
002C:  MOVWF  77
002D:  MOVLW  0F
002E:  ANDWF  06,W
002F:  IORWF  77,W
0030:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0031:  NOP
....................    lcd_output_enable(1); 
0032:  BSF    06.0
....................    delay_us(2); 
0033:  GOTO   034
....................    lcd_output_enable(0); 
0034:  BCF    06.0
0035:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003C:  BSF    03.5
003D:  BCF    06.0
....................    lcd_rs_tris(); 
003E:  BCF    06.1
....................    lcd_rw_tris(); 
003F:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0040:  BCF    03.5
0041:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0063:  MOVF   78,W
0064:  MOVWF  44
0065:  BTFSC  44.7
0066:  GOTO   042
....................    lcd_output_rs(address); 
0067:  BTFSS  42.0
0068:  BCF    06.1
0069:  BTFSC  42.0
006A:  BSF    06.1
....................    delay_cycles(1); 
006B:  NOP
....................    lcd_output_rw(0); 
006C:  BCF    06.2
....................    delay_cycles(1); 
006D:  NOP
....................    lcd_output_enable(0); 
006E:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
006F:  SWAPF  43,W
0070:  MOVWF  44
0071:  MOVLW  0F
0072:  ANDWF  44,F
0073:  MOVF   44,W
0074:  MOVWF  45
0075:  CALL   02A
....................    lcd_send_nibble(n & 0xf); 
0076:  MOVF   43,W
0077:  ANDLW  0F
0078:  MOVWF  44
0079:  MOVWF  45
007A:  CALL   02A
007B:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007C:  MOVLW  28
007D:  MOVWF  31
007E:  MOVLW  0C
007F:  MOVWF  32
0080:  MOVLW  01
0081:  MOVWF  33
0082:  MOVLW  06
0083:  MOVWF  34
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0084:  BCF    06.0
....................    lcd_output_rs(0); 
0085:  BCF    06.1
....................    lcd_output_rw(0); 
0086:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0087:  MOVLW  0F
0088:  BSF    03.5
0089:  ANDWF  06,W
008A:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
008B:  BCF    06.0
....................    lcd_rs_tris(); 
008C:  BCF    06.1
....................    lcd_rw_tris(); 
008D:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
008E:  MOVLW  0F
008F:  BCF    03.5
0090:  MOVWF  3E
0091:  CALL   015
....................    for(i=1;i<=3;++i) 
0092:  MOVLW  01
0093:  MOVWF  30
0094:  MOVF   30,W
0095:  SUBLW  03
0096:  BTFSS  03.0
0097:  GOTO   0A0
....................    { 
....................        lcd_send_nibble(3); 
0098:  MOVLW  03
0099:  MOVWF  45
009A:  CALL   02A
....................        delay_ms(5); 
009B:  MOVLW  05
009C:  MOVWF  3E
009D:  CALL   015
009E:  INCF   30,F
009F:  GOTO   094
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A0:  MOVLW  02
00A1:  MOVWF  45
00A2:  CALL   02A
....................    delay_ms(5); 
00A3:  MOVLW  05
00A4:  MOVWF  3E
00A5:  CALL   015
....................    for(i=0;i<=3;++i) 
00A6:  CLRF   30
00A7:  MOVF   30,W
00A8:  SUBLW  03
00A9:  BTFSS  03.0
00AA:  GOTO   0B7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AB:  MOVLW  31
00AC:  ADDWF  30,W
00AD:  MOVWF  04
00AE:  BCF    03.7
00AF:  MOVF   00,W
00B0:  MOVWF  35
00B1:  CLRF   42
00B2:  MOVF   35,W
00B3:  MOVWF  43
00B4:  CALL   03C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B5:  INCF   30,F
00B6:  GOTO   0A7
00B7:  BCF    0A.3
00B8:  BCF    0A.4
00B9:  GOTO   5DC (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
02E4:  DECFSZ 3F,W
02E5:  GOTO   2E7
02E6:  GOTO   2EA
....................       address=LCD_LINE_TWO; 
02E7:  MOVLW  40
02E8:  MOVWF  40
02E9:  GOTO   2EB
....................    else 
....................       address=0; 
02EA:  CLRF   40
....................       
....................    address+=x-1; 
02EB:  MOVLW  01
02EC:  SUBWF  3E,W
02ED:  ADDWF  40,F
....................    lcd_send_byte(0,0x80|address); 
02EE:  MOVF   40,W
02EF:  IORLW  80
02F0:  MOVWF  41
02F1:  CLRF   42
02F2:  MOVF   41,W
02F3:  MOVWF  43
02F4:  CALL   03C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02F5:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
02F6:  MOVF   3D,W
02F7:  XORLW  07
02F8:  BTFSC  03.2
02F9:  GOTO   304
02FA:  XORLW  0B
02FB:  BTFSC  03.2
02FC:  GOTO   309
02FD:  XORLW  06
02FE:  BTFSC  03.2
02FF:  GOTO   311
0300:  XORLW  02
0301:  BTFSC  03.2
0302:  GOTO   317
0303:  GOTO   31C
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0304:  MOVLW  01
0305:  MOVWF  3E
0306:  MOVWF  3F
0307:  CALL   2E4
0308:  GOTO   321
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0309:  CLRF   42
030A:  MOVLW  01
030B:  MOVWF  43
030C:  CALL   03C
....................                      delay_ms(2); 
030D:  MOVLW  02
030E:  MOVWF  3E
030F:  CALL   015
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0310:  GOTO   321
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0311:  MOVLW  01
0312:  MOVWF  3E
0313:  MOVLW  02
0314:  MOVWF  3F
0315:  CALL   2E4
0316:  GOTO   321
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0317:  CLRF   42
0318:  MOVLW  10
0319:  MOVWF  43
031A:  CALL   03C
031B:  GOTO   321
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
031C:  MOVLW  01
031D:  MOVWF  42
031E:  MOVF   3D,W
031F:  MOVWF  43
0320:  CALL   03C
....................      #endif 
....................    } 
0321:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned int16 adc_okuma1,adc_okuma2; 
.................... float sicaklik_lm35,voltaj_lm35,sicaklik_pot; 
....................  
.................... void main(){ 
*
05B4:  MOVF   03,W
05B5:  ANDLW  1F
05B6:  MOVWF  03
05B7:  BSF    03.5
05B8:  BSF    1F.0
05B9:  BSF    1F.1
05BA:  BSF    1F.2
05BB:  BCF    1F.3
05BC:  BCF    03.7
....................     
....................    setup_psp(PSP_DISABLED); setup_timer_1(T1_DISABLED); setup_timer_2(T2_DISABLED,0,1); setup_CCP1(CCP_OFF); setup_CCP2(CCP_OFF);  
05BD:  BCF    09.4
05BE:  BCF    03.5
05BF:  CLRF   10
05C0:  MOVLW  00
05C1:  MOVWF  78
05C2:  MOVWF  12
05C3:  MOVLW  00
05C4:  BSF    03.5
05C5:  MOVWF  12
05C6:  MOVLW  F0
05C7:  BCF    03.5
05C8:  ANDWF  17,F
05C9:  ANDWF  1D,F
....................    
....................    setup_adc(adc_clock_div_32); 
05CA:  BCF    1F.6
05CB:  BSF    1F.7
05CC:  BSF    03.5
05CD:  BSF    1F.7
05CE:  BCF    03.5
05CF:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN3); // RA0-RA1-RA3 ANALOG 
05D0:  BSF    03.5
05D1:  BCF    1F.0
05D2:  BCF    1F.1
05D3:  BSF    1F.2
05D4:  BCF    1F.3
....................     
....................    set_tris_a(0x03); 
05D5:  MOVLW  03
05D6:  MOVWF  05
....................    set_tris_c(0x00); 
05D7:  MOVLW  00
05D8:  MOVWF  07
....................    output_c(0x00); 
05D9:  BCF    03.5
05DA:  CLRF   07
....................    
....................    lcd_init(); 
05DB:  GOTO   07C
....................     
....................    while(1){ 
....................        
....................       set_adc_channel(0); 
05DC:  MOVLW  00
05DD:  MOVWF  78
05DE:  MOVF   1F,W
05DF:  ANDLW  C7
05E0:  IORWF  78,W
05E1:  MOVWF  1F
....................       delay_ms (10); 
05E2:  MOVLW  0A
05E3:  MOVWF  3E
05E4:  CALL   015
....................       adc_okuma1 = read_adc(); 
05E5:  BSF    1F.2
05E6:  BTFSC  1F.2
05E7:  GOTO   5E6
05E8:  BSF    03.5
05E9:  MOVF   1E,W
05EA:  BCF    03.5
05EB:  MOVWF  20
05EC:  MOVF   1E,W
05ED:  MOVWF  21
....................       sicaklik_pot = (adc_okuma1/25.575)+30;    // Max 70 derece 
05EE:  MOVF   21,W
05EF:  MOVWF  31
05F0:  MOVF   20,W
05F1:  MOVWF  30
05F2:  CALL   0BA
05F3:  MOVF   7A,W
05F4:  MOVWF  33
05F5:  MOVF   79,W
05F6:  MOVWF  32
05F7:  MOVF   78,W
05F8:  MOVWF  31
05F9:  MOVF   77,W
05FA:  MOVWF  30
05FB:  MOVLW  9A
05FC:  MOVWF  37
05FD:  MOVLW  99
05FE:  MOVWF  36
05FF:  MOVLW  4C
0600:  MOVWF  35
0601:  MOVLW  83
0602:  MOVWF  34
0603:  CALL   0D7
0604:  MOVF   7A,W
0605:  MOVWF  33
0606:  MOVF   79,W
0607:  MOVWF  32
0608:  MOVF   78,W
0609:  MOVWF  31
060A:  MOVF   77,W
060B:  MOVWF  30
060C:  BCF    03.1
060D:  MOVF   7A,W
060E:  MOVWF  37
060F:  MOVF   79,W
0610:  MOVWF  36
0611:  MOVF   78,W
0612:  MOVWF  35
0613:  MOVF   77,W
0614:  MOVWF  34
0615:  CLRF   3B
0616:  CLRF   3A
0617:  MOVLW  70
0618:  MOVWF  39
0619:  MOVLW  83
061A:  MOVWF  38
061B:  GOTO   1A1
061C:  MOVF   7A,W
061D:  MOVWF  2F
061E:  MOVF   79,W
061F:  MOVWF  2E
0620:  MOVF   78,W
0621:  MOVWF  2D
0622:  MOVF   77,W
0623:  MOVWF  2C
....................       printf(lcd_putc,"\fSp:%.1f",sicaklik_pot); 
0624:  MOVLW  04
0625:  BSF    03.6
0626:  MOVWF  0D
0627:  MOVLW  00
0628:  MOVWF  0F
0629:  BCF    03.0
062A:  MOVLW  04
062B:  BCF    03.6
062C:  MOVWF  30
062D:  CALL   322
062E:  MOVLW  89
062F:  MOVWF  04
0630:  MOVF   2F,W
0631:  MOVWF  33
0632:  MOVF   2E,W
0633:  MOVWF  32
0634:  MOVF   2D,W
0635:  MOVWF  31
0636:  MOVF   2C,W
0637:  MOVWF  30
0638:  MOVLW  01
0639:  MOVWF  34
063A:  CALL   43D
....................       
....................       set_adc_channel(1); 
063B:  MOVLW  08
063C:  MOVWF  78
063D:  MOVF   1F,W
063E:  ANDLW  C7
063F:  IORWF  78,W
0640:  MOVWF  1F
....................       delay_ms (10); 
0641:  MOVLW  0A
0642:  MOVWF  3E
0643:  CALL   015
....................       adc_okuma2 = read_adc(); 
0644:  BSF    1F.2
0645:  BTFSC  1F.2
0646:  GOTO   645
0647:  BSF    03.5
0648:  MOVF   1E,W
0649:  BCF    03.5
064A:  MOVWF  22
064B:  MOVF   1E,W
064C:  MOVWF  23
....................       voltaj_lm35 = (adc_okuma2 * 0.0048828125)*1000; // MV cinsinden gerilim degeri 
064D:  MOVF   23,W
064E:  MOVWF  31
064F:  MOVF   22,W
0650:  MOVWF  30
0651:  CALL   0BA
0652:  MOVF   7A,W
0653:  MOVWF  40
0654:  MOVF   79,W
0655:  MOVWF  3F
0656:  MOVF   78,W
0657:  MOVWF  3E
0658:  MOVF   77,W
0659:  MOVWF  3D
065A:  CLRF   44
065B:  CLRF   43
065C:  MOVLW  20
065D:  MOVWF  42
065E:  MOVLW  77
065F:  MOVWF  41
0660:  CALL   379
0661:  MOVF   7A,W
0662:  MOVWF  33
0663:  MOVF   79,W
0664:  MOVWF  32
0665:  MOVF   78,W
0666:  MOVWF  31
0667:  MOVF   77,W
0668:  MOVWF  30
0669:  MOVF   7A,W
066A:  MOVWF  40
066B:  MOVF   79,W
066C:  MOVWF  3F
066D:  MOVF   78,W
066E:  MOVWF  3E
066F:  MOVF   77,W
0670:  MOVWF  3D
0671:  CLRF   44
0672:  CLRF   43
0673:  MOVLW  7A
0674:  MOVWF  42
0675:  MOVLW  88
0676:  MOVWF  41
0677:  CALL   379
0678:  MOVF   7A,W
0679:  MOVWF  2B
067A:  MOVF   79,W
067B:  MOVWF  2A
067C:  MOVF   78,W
067D:  MOVWF  29
067E:  MOVF   77,W
067F:  MOVWF  28
....................       printf(lcd_putc,"\nVL:%.1fmV",voltaj_lm35); 
0680:  MOVLW  09
0681:  BSF    03.6
0682:  MOVWF  0D
0683:  MOVLW  00
0684:  MOVWF  0F
0685:  BCF    03.0
0686:  MOVLW  04
0687:  BCF    03.6
0688:  MOVWF  30
0689:  CALL   322
068A:  MOVLW  89
068B:  MOVWF  04
068C:  MOVF   2B,W
068D:  MOVWF  33
068E:  MOVF   2A,W
068F:  MOVWF  32
0690:  MOVF   29,W
0691:  MOVWF  31
0692:  MOVF   28,W
0693:  MOVWF  30
0694:  MOVLW  01
0695:  MOVWF  34
0696:  CALL   43D
0697:  MOVLW  6D
0698:  MOVWF  3D
0699:  CALL   2F6
069A:  MOVLW  56
069B:  MOVWF  3D
069C:  CALL   2F6
....................        
....................       lcd_gotoxy(9,1); 
069D:  MOVLW  09
069E:  MOVWF  3E
069F:  MOVLW  01
06A0:  MOVWF  3F
06A1:  CALL   2E4
....................       sicaklik_lm35 = (voltaj_lm35/10); 
06A2:  MOVF   2B,W
06A3:  MOVWF  33
06A4:  MOVF   2A,W
06A5:  MOVWF  32
06A6:  MOVF   29,W
06A7:  MOVWF  31
06A8:  MOVF   28,W
06A9:  MOVWF  30
06AA:  CLRF   37
06AB:  CLRF   36
06AC:  MOVLW  20
06AD:  MOVWF  35
06AE:  MOVLW  82
06AF:  MOVWF  34
06B0:  CALL   0D7
06B1:  MOVF   7A,W
06B2:  MOVWF  27
06B3:  MOVF   79,W
06B4:  MOVWF  26
06B5:  MOVF   78,W
06B6:  MOVWF  25
06B7:  MOVF   77,W
06B8:  MOVWF  24
....................       printf(lcd_putc,"SL:%.1f",sicaklik_lm35); 
06B9:  MOVLW  53
06BA:  MOVWF  3D
06BB:  CALL   2F6
06BC:  MOVLW  4C
06BD:  MOVWF  3D
06BE:  CALL   2F6
06BF:  MOVLW  3A
06C0:  MOVWF  3D
06C1:  CALL   2F6
06C2:  MOVLW  89
06C3:  MOVWF  04
06C4:  MOVF   27,W
06C5:  MOVWF  33
06C6:  MOVF   26,W
06C7:  MOVWF  32
06C8:  MOVF   25,W
06C9:  MOVWF  31
06CA:  MOVF   24,W
06CB:  MOVWF  30
06CC:  MOVLW  01
06CD:  MOVWF  34
06CE:  CALL   43D
....................        
....................       
....................       if(sicaklik_lm35 > sicaklik_pot){    
06CF:  MOVF   2F,W
06D0:  MOVWF  33
06D1:  MOVF   2E,W
06D2:  MOVWF  32
06D3:  MOVF   2D,W
06D4:  MOVWF  31
06D5:  MOVF   2C,W
06D6:  MOVWF  30
06D7:  MOVF   27,W
06D8:  MOVWF  37
06D9:  MOVF   26,W
06DA:  MOVWF  36
06DB:  MOVF   25,W
06DC:  MOVWF  35
06DD:  MOVF   24,W
06DE:  MOVWF  34
06DF:  GOTO   51D
06E0:  BTFSS  03.0
06E1:  GOTO   6F3
....................          output_high(pin_c0); 
06E2:  BSF    07.0
....................          lcd_gotoxy(11,2); 
06E3:  MOVLW  0B
06E4:  MOVWF  3E
06E5:  MOVLW  02
06E6:  MOVWF  3F
06E7:  CALL   2E4
....................          printf(lcd_putc,"LED:1"); 
06E8:  MOVLW  0F
06E9:  BSF    03.6
06EA:  MOVWF  0D
06EB:  MOVLW  00
06EC:  MOVWF  0F
06ED:  BCF    03.6
06EE:  CALL   55E
....................          delay_ms (10); 
06EF:  MOVLW  0A
06F0:  MOVWF  3E
06F1:  CALL   015
....................       } 
06F2:  GOTO   703
....................     
....................       else{ 
....................          output_low(pin_c0); 
06F3:  BCF    07.0
....................          lcd_gotoxy(11,2); 
06F4:  MOVLW  0B
06F5:  MOVWF  3E
06F6:  MOVLW  02
06F7:  MOVWF  3F
06F8:  CALL   2E4
....................          printf(lcd_putc,"LED:0"); 
06F9:  MOVLW  12
06FA:  BSF    03.6
06FB:  MOVWF  0D
06FC:  MOVLW  00
06FD:  MOVWF  0F
06FE:  BCF    03.6
06FF:  CALL   55E
....................          delay_ms (10); 
0700:  MOVLW  0A
0701:  MOVWF  3E
0702:  CALL   015
....................       } 
0703:  GOTO   5DC
....................    } 
.................... } 
0704:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
