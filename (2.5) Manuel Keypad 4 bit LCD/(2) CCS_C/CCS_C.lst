CCS PCM C Compiler, Version 5.015, 5967               04-Kas-21 16:38

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(14) Manuel_Keypad_4_bit_LCD\(2) CCS_C\CCS_C.lst

               ROM used:   269 words (3%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0DD
0003:  NOP
.................... #include <16f877.h>                                 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
....................  
.................... #list 
....................  
.................... #use delay (clock = 4000000)                        
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT  
....................  
.................... #define use_portb_lcd TRUE                         // Normalde D portuna ayarlanmis LCD B portundan kontrol edilecektir. 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_cycles(1); 
....................    high = lcd_read_nibble(); 
....................        
....................    lcd_output_enable(0); 
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
....................        
....................    lcd_output_enable(0); 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_us(2); 
....................    lcd_output_enable(0); 
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
....................    lcd_rs_tris(); 
....................    lcd_rw_tris(); 
....................   #endif 
....................  
....................    lcd_output_rs(0); 
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
....................    lcd_output_rs(address); 
....................    delay_cycles(1); 
....................    lcd_output_rw(0); 
....................    delay_cycles(1); 
....................    lcd_output_enable(0); 
....................    lcd_send_nibble(n >> 4); 
....................    lcd_send_nibble(n & 0xf); 
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
....................    lcd_output_rs(0); 
....................    lcd_output_rw(0); 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
....................    lcd_rs_tris(); 
....................    lcd_rw_tris(); 
....................  #endif 
....................      
....................    delay_ms(15); 
....................    for(i=1;i<=3;++i) 
....................    { 
....................        lcd_send_nibble(3); 
....................        delay_ms(5); 
....................    } 
....................     
....................    lcd_send_nibble(2); 
....................    delay_ms(5); 
....................    for(i=0;i<=3;++i) 
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int tus = 0 , a = 0; 
....................  
.................... char tus_takimi(){ 
....................  
....................    output_high(pin_d4); 
0019:  BSF    03.5
001A:  BCF    08.4
001B:  BCF    03.5
001C:  BSF    08.4
....................    if(input(pin_d0))  {delay_ms(20);  tus = 0;} 
001D:  BSF    03.5
001E:  BSF    08.0
001F:  BCF    03.5
0020:  BTFSS  08.0
0021:  GOTO   026
0022:  MOVLW  14
0023:  MOVWF  22
0024:  CALL   004
0025:  CLRF   20
....................    if(input(pin_d1))  {delay_ms(20);  tus = 1;} 
0026:  BSF    03.5
0027:  BSF    08.1
0028:  BCF    03.5
0029:  BTFSS  08.1
002A:  GOTO   030
002B:  MOVLW  14
002C:  MOVWF  22
002D:  CALL   004
002E:  MOVLW  01
002F:  MOVWF  20
....................    if(input(pin_d2))  {delay_ms(20);  tus = 2;} 
0030:  BSF    03.5
0031:  BSF    08.2
0032:  BCF    03.5
0033:  BTFSS  08.2
0034:  GOTO   03A
0035:  MOVLW  14
0036:  MOVWF  22
0037:  CALL   004
0038:  MOVLW  02
0039:  MOVWF  20
....................    if(input(pin_d3))  {delay_ms(20);  tus = 3;} 
003A:  BSF    03.5
003B:  BSF    08.3
003C:  BCF    03.5
003D:  BTFSS  08.3
003E:  GOTO   044
003F:  MOVLW  14
0040:  MOVWF  22
0041:  CALL   004
0042:  MOVLW  03
0043:  MOVWF  20
....................    output_low(pin_d4); 
0044:  BSF    03.5
0045:  BCF    08.4
0046:  BCF    03.5
0047:  BCF    08.4
....................     
....................    output_high(pin_d5); 
0048:  BSF    03.5
0049:  BCF    08.5
004A:  BCF    03.5
004B:  BSF    08.5
....................    if(input(pin_d0))  {delay_ms(20);  tus = 4;} 
004C:  BSF    03.5
004D:  BSF    08.0
004E:  BCF    03.5
004F:  BTFSS  08.0
0050:  GOTO   056
0051:  MOVLW  14
0052:  MOVWF  22
0053:  CALL   004
0054:  MOVLW  04
0055:  MOVWF  20
....................    if(input(pin_d1))  {delay_ms(20);  tus = 5;} 
0056:  BSF    03.5
0057:  BSF    08.1
0058:  BCF    03.5
0059:  BTFSS  08.1
005A:  GOTO   060
005B:  MOVLW  14
005C:  MOVWF  22
005D:  CALL   004
005E:  MOVLW  05
005F:  MOVWF  20
....................    if(input(pin_d2))  {delay_ms(20);  tus = 6;} 
0060:  BSF    03.5
0061:  BSF    08.2
0062:  BCF    03.5
0063:  BTFSS  08.2
0064:  GOTO   06A
0065:  MOVLW  14
0066:  MOVWF  22
0067:  CALL   004
0068:  MOVLW  06
0069:  MOVWF  20
....................    if(input(pin_d3))  {delay_ms(20);  tus = 7;} 
006A:  BSF    03.5
006B:  BSF    08.3
006C:  BCF    03.5
006D:  BTFSS  08.3
006E:  GOTO   074
006F:  MOVLW  14
0070:  MOVWF  22
0071:  CALL   004
0072:  MOVLW  07
0073:  MOVWF  20
....................    output_low(pin_d5); 
0074:  BSF    03.5
0075:  BCF    08.5
0076:  BCF    03.5
0077:  BCF    08.5
....................     
....................    output_high(pin_d6); 
0078:  BSF    03.5
0079:  BCF    08.6
007A:  BCF    03.5
007B:  BSF    08.6
....................    if(input(pin_d0))  {delay_ms(20);  tus = 8;} 
007C:  BSF    03.5
007D:  BSF    08.0
007E:  BCF    03.5
007F:  BTFSS  08.0
0080:  GOTO   086
0081:  MOVLW  14
0082:  MOVWF  22
0083:  CALL   004
0084:  MOVLW  08
0085:  MOVWF  20
....................    if(input(pin_d1))  {delay_ms(20);  tus = 9;} 
0086:  BSF    03.5
0087:  BSF    08.1
0088:  BCF    03.5
0089:  BTFSS  08.1
008A:  GOTO   090
008B:  MOVLW  14
008C:  MOVWF  22
008D:  CALL   004
008E:  MOVLW  09
008F:  MOVWF  20
....................    if(input(pin_d2))  {delay_ms(20);  tus = 10;} 
0090:  BSF    03.5
0091:  BSF    08.2
0092:  BCF    03.5
0093:  BTFSS  08.2
0094:  GOTO   09A
0095:  MOVLW  14
0096:  MOVWF  22
0097:  CALL   004
0098:  MOVLW  0A
0099:  MOVWF  20
....................    if(input(pin_d3))  {delay_ms(20);  tus = 11;} 
009A:  BSF    03.5
009B:  BSF    08.3
009C:  BCF    03.5
009D:  BTFSS  08.3
009E:  GOTO   0A4
009F:  MOVLW  14
00A0:  MOVWF  22
00A1:  CALL   004
00A2:  MOVLW  0B
00A3:  MOVWF  20
....................    output_low(pin_d6); 
00A4:  BSF    03.5
00A5:  BCF    08.6
00A6:  BCF    03.5
00A7:  BCF    08.6
....................     
....................    output_high(pin_d7); 
00A8:  BSF    03.5
00A9:  BCF    08.7
00AA:  BCF    03.5
00AB:  BSF    08.7
....................    if(input(pin_d0))  {delay_ms(20);  tus = 12;} 
00AC:  BSF    03.5
00AD:  BSF    08.0
00AE:  BCF    03.5
00AF:  BTFSS  08.0
00B0:  GOTO   0B6
00B1:  MOVLW  14
00B2:  MOVWF  22
00B3:  CALL   004
00B4:  MOVLW  0C
00B5:  MOVWF  20
....................    if(input(pin_d1))  {delay_ms(20);  tus = 13;} 
00B6:  BSF    03.5
00B7:  BSF    08.1
00B8:  BCF    03.5
00B9:  BTFSS  08.1
00BA:  GOTO   0C0
00BB:  MOVLW  14
00BC:  MOVWF  22
00BD:  CALL   004
00BE:  MOVLW  0D
00BF:  MOVWF  20
....................    if(input(pin_d2))  {delay_ms(20);  tus = 14;} 
00C0:  BSF    03.5
00C1:  BSF    08.2
00C2:  BCF    03.5
00C3:  BTFSS  08.2
00C4:  GOTO   0CA
00C5:  MOVLW  14
00C6:  MOVWF  22
00C7:  CALL   004
00C8:  MOVLW  0E
00C9:  MOVWF  20
....................    if(input(pin_d3))  {delay_ms(20);  tus = 15;} 
00CA:  BSF    03.5
00CB:  BSF    08.3
00CC:  BCF    03.5
00CD:  BTFSS  08.3
00CE:  GOTO   0D4
00CF:  MOVLW  14
00D0:  MOVWF  22
00D1:  CALL   004
00D2:  MOVLW  0F
00D3:  MOVWF  20
....................    output_low(pin_d7); 
00D4:  BSF    03.5
00D5:  BCF    08.7
00D6:  BCF    03.5
00D7:  BCF    08.7
....................     
....................    return tus; 
00D8:  MOVF   20,W
00D9:  MOVWF  78
00DA:  BCF    0A.3
00DB:  BCF    0A.4
00DC:  GOTO   101 (RETURN)
....................  
....................    } 
....................  
.................... void main(){ 
00DD:  MOVF   03,W
00DE:  ANDLW  1F
00DF:  MOVWF  03
00E0:  CLRF   20
00E1:  CLRF   21
00E2:  BSF    03.5
00E3:  BSF    1F.0
00E4:  BSF    1F.1
00E5:  BSF    1F.2
00E6:  BCF    1F.3
00E7:  BCF    03.7
....................  
....................    setup_psp(PSP_DISABLED); setup_timer_1(T1_DISABLED); setup_timer_2(T2_DISABLED,0,1); setup_adc_ports(NO_ANALOGS); setup_adc(ADC_OFF); setup_CCP1(CCP_OFF); setup_CCP2(CCP_OFF); 
00E8:  BCF    09.4
00E9:  BCF    03.5
00EA:  CLRF   10
00EB:  MOVLW  00
00EC:  MOVWF  78
00ED:  MOVWF  12
00EE:  MOVLW  00
00EF:  BSF    03.5
00F0:  MOVWF  12
00F1:  BSF    1F.0
00F2:  BSF    1F.1
00F3:  BSF    1F.2
00F4:  BCF    1F.3
00F5:  BCF    03.5
00F6:  BCF    1F.0
00F7:  MOVLW  F0
00F8:  ANDWF  17,F
00F9:  ANDWF  1D,F
....................     
....................    set_tris_b(0b00000000); 
00FA:  MOVLW  00
00FB:  BSF    03.5
00FC:  MOVWF  06
....................    set_tris_d(0b00001111); // D portunun ilk 4 biti (d0,d1,d2,d3) giris , son 4 biti (d4,d5d,d6,d7) cikis 
00FD:  MOVLW  0F
00FE:  MOVWF  08
....................     
....................    while(1){ 
....................        
....................      a = tus_takimi(); 
00FF:  BCF    03.5
0100:  GOTO   019
0101:  MOVF   78,W
0102:  MOVWF  21
....................      output_b(a); 
0103:  BSF    03.5
0104:  CLRF   06
0105:  BCF    03.5
0106:  MOVF   21,W
0107:  MOVWF  06
....................      delay_ms(20); 
0108:  MOVLW  14
0109:  MOVWF  22
010A:  CALL   004
010B:  GOTO   100
....................    } 
....................  
.................... } 
010C:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
