CCS PCM C Compiler, Version 5.015, 5967               05-Kas-21 22:34

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(33) Step Motor Uygulamasi\(2) CCS_C\CCS_C.lst

               ROM used:   812 words (10%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           21 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   21A
0003:  NOP
.................... #include <16f877.h>  
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 8C,29
0005:  DATA D4,22
0006:  DATA 50,10
0007:  DATA CB,27
0008:  DATA 4E,2A
0009:  DATA D2,27
000A:  DATA 4C,17
000B:  DATA 2E,17
000C:  DATA 00,00
000D:  DATA 8C,20
000E:  DATA E4,34
000F:  DATA 6D,10
0010:  DATA 3D,10
0011:  DATA A5,3A
0012:  DATA 20,05
0013:  DATA C4,2A
0014:  DATA D2,2A
0015:  DATA 4D,10
0016:  DATA A0,16
0017:  DATA 2D,1F
0018:  DATA 3E,00
0019:  DATA 8C,20
001A:  DATA E4,34
001B:  DATA 6D,10
001C:  DATA 3D,10
001D:  DATA A5,3A
001E:  DATA 20,05
001F:  DATA C4,2A
0020:  DATA D2,2A
0021:  DATA 4D,10
0022:  DATA 20,1E
0023:  DATA BC,16
0024:  DATA 2D,00
0025:  DATA 8C,20
0026:  DATA E4,34
0027:  DATA 6D,10
0028:  DATA 3D,10
0029:  DATA A5,3A
002A:  DATA 20,05
002B:  DATA C4,2A
002C:  DATA D2,2A
002D:  DATA 4D,10
002E:  DATA 20,21
002F:  DATA CF,29
0030:  DATA 00,01
0031:  DATA 8C,20
0032:  DATA E4,34
0033:  DATA 6D,10
0034:  DATA 3D,10
0035:  DATA A5,3A
0036:  DATA 20,05
0037:  DATA C4,2A
0038:  DATA D2,2A
0039:  DATA 4D,10
003A:  DATA A0,11
003B:  DATA C8,20
003C:  DATA D4,20
003D:  DATA 00,01
*
0121:  MOVF   0B,W
0122:  MOVWF  22
0123:  BCF    0B.7
0124:  BSF    03.5
0125:  BSF    03.6
0126:  BSF    0C.7
0127:  BSF    0C.0
0128:  NOP
0129:  NOP
012A:  BCF    03.5
012B:  BCF    03.6
012C:  BTFSC  22.7
012D:  BSF    0B.7
012E:  BSF    03.6
012F:  MOVF   0C,W
0130:  ANDLW  7F
0131:  BTFSC  03.2
0132:  GOTO   175
0133:  BCF    03.6
0134:  MOVWF  22
0135:  BSF    03.6
0136:  MOVF   0D,W
0137:  BCF    03.6
0138:  MOVWF  23
0139:  BSF    03.6
013A:  MOVF   0F,W
013B:  BCF    03.6
013C:  MOVWF  24
013D:  MOVF   22,W
013E:  MOVWF  26
013F:  CALL   0F5
0140:  MOVF   23,W
0141:  BSF    03.6
0142:  MOVWF  0D
0143:  BCF    03.6
0144:  MOVF   24,W
0145:  BSF    03.6
0146:  MOVWF  0F
0147:  BCF    03.6
0148:  MOVF   0B,W
0149:  MOVWF  25
014A:  BCF    0B.7
014B:  BSF    03.5
014C:  BSF    03.6
014D:  BSF    0C.7
014E:  BSF    0C.0
014F:  NOP
0150:  NOP
0151:  BCF    03.5
0152:  BCF    03.6
0153:  BTFSC  25.7
0154:  BSF    0B.7
0155:  BSF    03.6
0156:  RLF    0C,W
0157:  RLF    0E,W
0158:  ANDLW  7F
0159:  BTFSC  03.2
015A:  GOTO   175
015B:  BCF    03.6
015C:  MOVWF  22
015D:  BSF    03.6
015E:  MOVF   0D,W
015F:  BCF    03.6
0160:  MOVWF  23
0161:  BSF    03.6
0162:  MOVF   0F,W
0163:  BCF    03.6
0164:  MOVWF  24
0165:  MOVF   22,W
0166:  MOVWF  26
0167:  CALL   0F5
0168:  MOVF   23,W
0169:  BSF    03.6
016A:  MOVWF  0D
016B:  BCF    03.6
016C:  MOVF   24,W
016D:  BSF    03.6
016E:  MOVWF  0F
016F:  INCF   0D,F
0170:  BTFSC  03.2
0171:  INCF   0F,F
0172:  BCF    03.6
0173:  GOTO   121
0174:  BSF    03.6
0175:  BCF    03.6
0176:  BCF    0A.3
0177:  BCF    0A.4
0178:  GOTO   24B (RETURN)
0179:  MOVF   0B,W
017A:  MOVWF  23
017B:  BCF    0B.7
017C:  BSF    03.5
017D:  BSF    03.6
017E:  BSF    0C.7
017F:  BSF    0C.0
0180:  NOP
0181:  NOP
0182:  BCF    03.5
0183:  BCF    03.6
0184:  BTFSC  23.7
0185:  BSF    0B.7
0186:  BTFSC  03.0
0187:  GOTO   1B0
0188:  BSF    03.6
0189:  MOVF   0C,W
018A:  ANDLW  7F
018B:  BCF    03.6
018C:  MOVWF  23
018D:  BSF    03.6
018E:  MOVF   0D,W
018F:  BCF    03.6
0190:  MOVWF  24
0191:  BSF    03.6
0192:  MOVF   0F,W
0193:  BCF    03.6
0194:  MOVWF  25
0195:  MOVF   23,W
0196:  MOVWF  26
0197:  CALL   0F5
0198:  MOVF   24,W
0199:  BSF    03.6
019A:  MOVWF  0D
019B:  BCF    03.6
019C:  MOVF   25,W
019D:  BSF    03.6
019E:  MOVWF  0F
019F:  BCF    03.6
01A0:  MOVF   0B,W
01A1:  MOVWF  26
01A2:  BCF    0B.7
01A3:  BSF    03.5
01A4:  BSF    03.6
01A5:  BSF    0C.7
01A6:  BSF    0C.0
01A7:  NOP
01A8:  NOP
01A9:  BCF    03.5
01AA:  BCF    03.6
01AB:  BTFSC  26.7
01AC:  BSF    0B.7
01AD:  DECFSZ 22,F
01AE:  GOTO   1B0
01AF:  GOTO   1CF
01B0:  BSF    03.6
01B1:  RLF    0C,W
01B2:  RLF    0E,W
01B3:  ANDLW  7F
01B4:  BCF    03.6
01B5:  MOVWF  23
01B6:  BSF    03.6
01B7:  MOVF   0D,W
01B8:  BCF    03.6
01B9:  MOVWF  24
01BA:  BSF    03.6
01BB:  MOVF   0F,W
01BC:  BCF    03.6
01BD:  MOVWF  25
01BE:  MOVF   23,W
01BF:  MOVWF  26
01C0:  CALL   0F5
01C1:  MOVF   24,W
01C2:  BSF    03.6
01C3:  MOVWF  0D
01C4:  BCF    03.6
01C5:  MOVF   25,W
01C6:  BSF    03.6
01C7:  MOVWF  0F
01C8:  INCF   0D,F
01C9:  BTFSC  03.2
01CA:  INCF   0F,F
01CB:  BCF    03.0
01CC:  BCF    03.6
01CD:  DECFSZ 22,F
01CE:  GOTO   179
01CF:  RETURN
01D0:  MOVF   25,W
01D1:  CLRF   78
01D2:  SUBWF  24,W
01D3:  BTFSC  03.0
01D4:  GOTO   1D8
01D5:  MOVF   24,W
01D6:  MOVWF  77
01D7:  GOTO   1E4
01D8:  CLRF   77
01D9:  MOVLW  08
01DA:  MOVWF  26
01DB:  RLF    24,F
01DC:  RLF    77,F
01DD:  MOVF   25,W
01DE:  SUBWF  77,W
01DF:  BTFSC  03.0
01E0:  MOVWF  77
01E1:  RLF    78,F
01E2:  DECFSZ 26,F
01E3:  GOTO   1DB
01E4:  RETURN
01E5:  MOVF   78,W
01E6:  MOVF   22,W
01E7:  MOVWF  24
01E8:  MOVLW  64
01E9:  MOVWF  25
01EA:  CALL   1D0
01EB:  MOVF   77,W
01EC:  MOVWF  22
01ED:  MOVF   78,W
01EE:  MOVLW  30
01EF:  BTFSS  03.2
01F0:  GOTO   1F8
01F1:  BTFSS  23.1
01F2:  GOTO   1FF
01F3:  BTFSC  23.3
01F4:  GOTO   1FF
01F5:  BTFSC  23.4
01F6:  MOVLW  20
01F7:  GOTO   1FB
01F8:  BCF    23.3
01F9:  BCF    23.4
01FA:  BSF    23.0
01FB:  ADDWF  78,F
01FC:  MOVF   78,W
01FD:  MOVWF  26
01FE:  CALL   0F5
01FF:  MOVF   22,W
0200:  MOVWF  24
0201:  MOVLW  0A
0202:  MOVWF  25
0203:  CALL   1D0
0204:  MOVF   77,W
0205:  MOVWF  22
0206:  MOVF   78,W
0207:  MOVLW  30
0208:  BTFSS  03.2
0209:  GOTO   210
020A:  BTFSC  23.3
020B:  GOTO   214
020C:  BTFSS  23.0
020D:  GOTO   214
020E:  BTFSC  23.4
020F:  MOVLW  20
0210:  ADDWF  78,F
0211:  MOVF   78,W
0212:  MOVWF  26
0213:  CALL   0F5
0214:  MOVLW  30
0215:  ADDWF  22,F
0216:  MOVF   22,W
0217:  MOVWF  26
0218:  CALL   0F5
0219:  RETURN
*
0318:  BSF    0A.0
0319:  BSF    0A.1
031A:  BCF    0A.2
031B:  ADDWF  02,F
031C:  GOTO   259
031D:  GOTO   25C
031E:  GOTO   25F
031F:  GOTO   262
0320:  GOTO   265
0321:  GOTO   268
0322:  GOTO   26B
0323:  GOTO   26E
0324:  BSF    0A.0
0325:  BSF    0A.1
0326:  BCF    0A.2
0327:  ADDWF  02,F
0328:  GOTO   27A
0329:  GOTO   294
032A:  GOTO   2AE
032B:  GOTO   2C8
....................  
.................... #list 
....................  
.................... #use delay (clock = 4000000)     
*
003E:  MOVLW  27
003F:  MOVWF  04
0040:  BCF    03.7
0041:  MOVF   00,W
0042:  BTFSC  03.2
0043:  GOTO   052
0044:  MOVLW  01
0045:  MOVWF  78
0046:  CLRF   77
0047:  DECFSZ 77,F
0048:  GOTO   047
0049:  DECFSZ 78,F
004A:  GOTO   046
004B:  MOVLW  4A
004C:  MOVWF  77
004D:  DECFSZ 77,F
004E:  GOTO   04D
004F:  GOTO   050
0050:  DECFSZ 00,F
0051:  GOTO   044
0052:  RETURN
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
006B:  MOVLW  0F
006C:  BSF    03.5
006D:  ANDWF  06,W
006E:  IORLW  F0
006F:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0070:  BCF    03.5
0071:  BSF    06.2
....................    delay_cycles(1); 
0072:  NOP
....................    lcd_output_enable(1); 
0073:  BSF    06.0
....................    delay_cycles(1); 
0074:  NOP
....................    high = lcd_read_nibble(); 
0075:  CALL   05F
0076:  MOVF   78,W
0077:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
0078:  BCF    06.0
....................    delay_cycles(1); 
0079:  NOP
....................    lcd_output_enable(1); 
007A:  BSF    06.0
....................    delay_us(1); 
007B:  NOP
....................    low = lcd_read_nibble(); 
007C:  CALL   05F
007D:  MOVF   78,W
007E:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
007F:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0080:  MOVLW  0F
0081:  BSF    03.5
0082:  ANDWF  06,W
0083:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0084:  BCF    03.5
0085:  SWAPF  2E,W
0086:  MOVWF  77
0087:  MOVLW  F0
0088:  ANDWF  77,F
0089:  MOVF   77,W
008A:  IORWF  2D,W
008B:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
005F:  MOVF   06,W
0060:  MOVWF  77
0061:  SWAPF  06,W
0062:  ANDLW  0F
0063:  MOVWF  78
....................   #endif 
0064:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0053:  SWAPF  2E,W
0054:  ANDLW  F0
0055:  MOVWF  77
0056:  MOVLW  0F
0057:  ANDWF  06,W
0058:  IORWF  77,W
0059:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
005A:  NOP
....................    lcd_output_enable(1); 
005B:  BSF    06.0
....................    delay_us(2); 
005C:  GOTO   05D
....................    lcd_output_enable(0); 
005D:  BCF    06.0
005E:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0065:  BSF    03.5
0066:  BCF    06.0
....................    lcd_rs_tris(); 
0067:  BCF    06.1
....................    lcd_rw_tris(); 
0068:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0069:  BCF    03.5
006A:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
008C:  MOVF   78,W
008D:  MOVWF  2D
008E:  BTFSC  2D.7
008F:  GOTO   06B
....................    lcd_output_rs(address); 
0090:  BTFSS  2B.0
0091:  BCF    06.1
0092:  BTFSC  2B.0
0093:  BSF    06.1
....................    delay_cycles(1); 
0094:  NOP
....................    lcd_output_rw(0); 
0095:  BCF    06.2
....................    delay_cycles(1); 
0096:  NOP
....................    lcd_output_enable(0); 
0097:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0098:  SWAPF  2C,W
0099:  MOVWF  2D
009A:  MOVLW  0F
009B:  ANDWF  2D,F
009C:  MOVF   2D,W
009D:  MOVWF  2E
009E:  CALL   053
....................    lcd_send_nibble(n & 0xf); 
009F:  MOVF   2C,W
00A0:  ANDLW  0F
00A1:  MOVWF  2D
00A2:  MOVWF  2E
00A3:  CALL   053
00A4:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00A5:  MOVLW  28
00A6:  MOVWF  23
00A7:  MOVLW  0C
00A8:  MOVWF  24
00A9:  MOVLW  01
00AA:  MOVWF  25
00AB:  MOVLW  06
00AC:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00AD:  BCF    06.0
....................    lcd_output_rs(0); 
00AE:  BCF    06.1
....................    lcd_output_rw(0); 
00AF:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00B0:  MOVLW  0F
00B1:  BSF    03.5
00B2:  ANDWF  06,W
00B3:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00B4:  BCF    06.0
....................    lcd_rs_tris(); 
00B5:  BCF    06.1
....................    lcd_rw_tris(); 
00B6:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00B7:  MOVLW  0F
00B8:  BCF    03.5
00B9:  MOVWF  27
00BA:  CALL   03E
....................    for(i=1;i<=3;++i) 
00BB:  MOVLW  01
00BC:  MOVWF  22
00BD:  MOVF   22,W
00BE:  SUBLW  03
00BF:  BTFSS  03.0
00C0:  GOTO   0C9
....................    { 
....................        lcd_send_nibble(3); 
00C1:  MOVLW  03
00C2:  MOVWF  2E
00C3:  CALL   053
....................        delay_ms(5); 
00C4:  MOVLW  05
00C5:  MOVWF  27
00C6:  CALL   03E
00C7:  INCF   22,F
00C8:  GOTO   0BD
....................    } 
....................     
....................    lcd_send_nibble(2); 
00C9:  MOVLW  02
00CA:  MOVWF  2E
00CB:  CALL   053
....................    delay_ms(5); 
00CC:  MOVLW  05
00CD:  MOVWF  27
00CE:  CALL   03E
....................    for(i=0;i<=3;++i) 
00CF:  CLRF   22
00D0:  MOVF   22,W
00D1:  SUBLW  03
00D2:  BTFSS  03.0
00D3:  GOTO   0E0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D4:  MOVLW  23
00D5:  ADDWF  22,W
00D6:  MOVWF  04
00D7:  BCF    03.7
00D8:  MOVF   00,W
00D9:  MOVWF  27
00DA:  CLRF   2B
00DB:  MOVF   27,W
00DC:  MOVWF  2C
00DD:  CALL   065
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DE:  INCF   22,F
00DF:  GOTO   0D0
00E0:  BCF    0A.3
00E1:  BCF    0A.4
00E2:  GOTO   241 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00E3:  DECFSZ 28,W
00E4:  GOTO   0E6
00E5:  GOTO   0E9
....................       address=LCD_LINE_TWO; 
00E6:  MOVLW  40
00E7:  MOVWF  29
00E8:  GOTO   0EA
....................    else 
....................       address=0; 
00E9:  CLRF   29
....................       
....................    address+=x-1; 
00EA:  MOVLW  01
00EB:  SUBWF  27,W
00EC:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
00ED:  MOVF   29,W
00EE:  IORLW  80
00EF:  MOVWF  2A
00F0:  CLRF   2B
00F1:  MOVF   2A,W
00F2:  MOVWF  2C
00F3:  CALL   065
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00F4:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00F5:  MOVF   26,W
00F6:  XORLW  07
00F7:  BTFSC  03.2
00F8:  GOTO   103
00F9:  XORLW  0B
00FA:  BTFSC  03.2
00FB:  GOTO   108
00FC:  XORLW  06
00FD:  BTFSC  03.2
00FE:  GOTO   110
00FF:  XORLW  02
0100:  BTFSC  03.2
0101:  GOTO   116
0102:  GOTO   11B
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0103:  MOVLW  01
0104:  MOVWF  27
0105:  MOVWF  28
0106:  CALL   0E3
0107:  GOTO   120
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0108:  CLRF   2B
0109:  MOVLW  01
010A:  MOVWF  2C
010B:  CALL   065
....................                      delay_ms(2); 
010C:  MOVLW  02
010D:  MOVWF  27
010E:  CALL   03E
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
010F:  GOTO   120
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0110:  MOVLW  01
0111:  MOVWF  27
0112:  MOVLW  02
0113:  MOVWF  28
0114:  CALL   0E3
0115:  GOTO   120
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0116:  CLRF   2B
0117:  MOVLW  10
0118:  MOVWF  2C
0119:  CALL   065
011A:  GOTO   120
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
011B:  MOVLW  01
011C:  MOVWF  2B
011D:  MOVF   26,W
011E:  MOVWF  2C
011F:  CALL   065
....................      #endif 
....................    } 
0120:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(d) 
....................  
.................... #define buton_ileri  pin_a0 
.................... #define buton_geri   pin_a1 
....................  
.................... unsigned int adim = 1; 
.................... int durum; 
....................  
.................... void main() 
*
021A:  MOVF   03,W
021B:  ANDLW  1F
021C:  MOVWF  03
021D:  MOVLW  01
021E:  MOVWF  20
021F:  BSF    03.5
0220:  BSF    1F.0
0221:  BSF    1F.1
0222:  BSF    1F.2
0223:  BCF    1F.3
0224:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
0225:  BCF    09.4
....................    setup_timer_1(T1_DISABLED);   
0226:  BCF    03.5
0227:  CLRF   10
....................    setup_CCP2(CCP_OFF); 
0228:  MOVLW  F0
0229:  ANDWF  1D,F
....................    setup_timer_2(T2_DISABLED,0,1); 
022A:  MOVLW  00
022B:  MOVWF  78
022C:  MOVWF  12
022D:  MOVLW  00
022E:  BSF    03.5
022F:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
0230:  BSF    1F.0
0231:  BSF    1F.1
0232:  BSF    1F.2
0233:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0234:  BCF    03.5
0235:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0236:  MOVLW  F0
0237:  ANDWF  17,F
....................     
....................    set_tris_a(0x03); 
0238:  MOVLW  03
0239:  BSF    03.5
023A:  MOVWF  05
....................    set_tris_b(0x00); 
023B:  MOVLW  00
023C:  MOVWF  06
....................    set_tris_d(0x00); 
023D:  MOVWF  08
....................     
....................    output_b(0x00); 
023E:  BCF    03.5
023F:  CLRF   06
....................     
....................    lcd_init(); 
0240:  GOTO   0A5
....................    delay_ms(10); 
0241:  MOVLW  0A
0242:  MOVWF  27
0243:  CALL   03E
....................     
....................    printf(lcd_putc,"\fSTEP KONTROL..."); 
0244:  MOVLW  04
0245:  BSF    03.6
0246:  MOVWF  0D
0247:  MOVLW  00
0248:  MOVWF  0F
0249:  BCF    03.6
024A:  GOTO   121
....................    delay_ms(1000); 
024B:  MOVLW  04
024C:  MOVWF  22
024D:  MOVLW  FA
024E:  MOVWF  27
024F:  CALL   03E
0250:  DECFSZ 22,F
0251:  GOTO   24D
....................     
....................    while(1){ 
....................     
....................       switch(adim){ 
0252:  MOVLW  01
0253:  SUBWF  20,W
0254:  ADDLW  F8
0255:  BTFSC  03.0
0256:  GOTO   270
0257:  ADDLW  08
0258:  GOTO   318
....................          
....................          case 1: output_d(0b00000001); break; 
0259:  MOVLW  01
025A:  MOVWF  08
025B:  GOTO   270
....................          case 2: output_d(0b00000011); break; 
025C:  MOVLW  03
025D:  MOVWF  08
025E:  GOTO   270
....................          case 3: output_d(0b00000010); break; 
025F:  MOVLW  02
0260:  MOVWF  08
0261:  GOTO   270
....................          case 4: output_d(0b00000110); break; 
0262:  MOVLW  06
0263:  MOVWF  08
0264:  GOTO   270
....................          case 5: output_d(0b00000100); break; 
0265:  MOVLW  04
0266:  MOVWF  08
0267:  GOTO   270
....................          case 6: output_d(0b00001100); break; 
0268:  MOVLW  0C
0269:  MOVWF  08
026A:  GOTO   270
....................          case 7: output_d(0b00001000); break; 
026B:  MOVLW  08
026C:  MOVWF  08
026D:  GOTO   270
....................          case 8: output_d(0b00001001); break; 
026E:  MOVLW  09
026F:  MOVWF  08
....................       } 
....................        
....................       delay_ms(10); 
0270:  MOVLW  0A
0271:  MOVWF  27
0272:  CALL   03E
....................        
....................       switch(durum){ 
0273:  MOVLW  01
0274:  SUBWF  21,W
0275:  ADDLW  FC
0276:  BTFSC  03.0
0277:  GOTO   2E1
0278:  ADDLW  04
0279:  GOTO   324
....................          case 1: printf(lcd_putc,"\fAdim = %u \nDURUM  -->>",adim); break; 
027A:  MOVLW  0D
027B:  BSF    03.6
027C:  MOVWF  0D
027D:  MOVLW  00
027E:  MOVWF  0F
027F:  BCF    03.0
0280:  MOVLW  08
0281:  BCF    03.6
0282:  MOVWF  22
0283:  CALL   179
0284:  MOVF   20,W
0285:  MOVWF  22
0286:  MOVLW  1B
0287:  MOVWF  23
0288:  CALL   1E5
0289:  MOVLW  12
028A:  BSF    03.6
028B:  MOVWF  0D
028C:  MOVLW  00
028D:  MOVWF  0F
028E:  BCF    03.0
028F:  MOVLW  0D
0290:  BCF    03.6
0291:  MOVWF  22
0292:  CALL   179
0293:  GOTO   2E1
....................          case 2: printf(lcd_putc,"\fAdim = %u \nDURUM  <<--",adim); break; 
0294:  MOVLW  19
0295:  BSF    03.6
0296:  MOVWF  0D
0297:  MOVLW  00
0298:  MOVWF  0F
0299:  BCF    03.0
029A:  MOVLW  08
029B:  BCF    03.6
029C:  MOVWF  22
029D:  CALL   179
029E:  MOVF   20,W
029F:  MOVWF  22
02A0:  MOVLW  1B
02A1:  MOVWF  23
02A2:  CALL   1E5
02A3:  MOVLW  1E
02A4:  BSF    03.6
02A5:  MOVWF  0D
02A6:  MOVLW  00
02A7:  MOVWF  0F
02A8:  BCF    03.0
02A9:  MOVLW  0D
02AA:  BCF    03.6
02AB:  MOVWF  22
02AC:  CALL   179
02AD:  GOTO   2E1
....................          case 3: printf(lcd_putc,"\fAdim = %u \nDURUM  BOS",adim);  break; 
02AE:  MOVLW  25
02AF:  BSF    03.6
02B0:  MOVWF  0D
02B1:  MOVLW  00
02B2:  MOVWF  0F
02B3:  BCF    03.0
02B4:  MOVLW  08
02B5:  BCF    03.6
02B6:  MOVWF  22
02B7:  CALL   179
02B8:  MOVF   20,W
02B9:  MOVWF  22
02BA:  MOVLW  1B
02BB:  MOVWF  23
02BC:  CALL   1E5
02BD:  MOVLW  2A
02BE:  BSF    03.6
02BF:  MOVWF  0D
02C0:  MOVLW  00
02C1:  MOVWF  0F
02C2:  BCF    03.0
02C3:  MOVLW  0C
02C4:  BCF    03.6
02C5:  MOVWF  22
02C6:  CALL   179
02C7:  GOTO   2E1
....................          case 4: printf(lcd_putc,"\fAdim = %u \nDURUM  #HATA",adim);break; 
02C8:  MOVLW  31
02C9:  BSF    03.6
02CA:  MOVWF  0D
02CB:  MOVLW  00
02CC:  MOVWF  0F
02CD:  BCF    03.0
02CE:  MOVLW  08
02CF:  BCF    03.6
02D0:  MOVWF  22
02D1:  CALL   179
02D2:  MOVF   20,W
02D3:  MOVWF  22
02D4:  MOVLW  1B
02D5:  MOVWF  23
02D6:  CALL   1E5
02D7:  MOVLW  36
02D8:  BSF    03.6
02D9:  MOVWF  0D
02DA:  MOVLW  00
02DB:  MOVWF  0F
02DC:  BCF    03.0
02DD:  MOVLW  0E
02DE:  BCF    03.6
02DF:  MOVWF  22
02E0:  CALL   179
....................       } 
....................        
....................       delay_ms(10); 
02E1:  MOVLW  0A
02E2:  MOVWF  27
02E3:  CALL   03E
....................        
....................       if(input(buton_ileri)){ 
02E4:  BTFSS  05.0
02E5:  GOTO   2F7
....................         delay_ms(500); 
02E6:  MOVLW  02
02E7:  MOVWF  22
02E8:  MOVLW  FA
02E9:  MOVWF  27
02EA:  CALL   03E
02EB:  DECFSZ 22,F
02EC:  GOTO   2E8
....................         adim++; 
02ED:  INCF   20,F
....................         durum =1; 
02EE:  MOVLW  01
02EF:  MOVWF  21
....................          
....................         if(adim == 9){ 
02F0:  MOVF   20,W
02F1:  SUBLW  09
02F2:  BTFSS  03.2
02F3:  GOTO   2F7
....................            adim = 0; 
02F4:  CLRF   20
....................            durum = 1; 
02F5:  MOVLW  01
02F6:  MOVWF  21
....................         } 
....................       } 
....................        
....................       if(input(buton_geri)){ 
02F7:  BTFSS  05.1
02F8:  GOTO   30A
....................         delay_ms(500); 
02F9:  MOVLW  02
02FA:  MOVWF  22
02FB:  MOVLW  FA
02FC:  MOVWF  27
02FD:  CALL   03E
02FE:  DECFSZ 22,F
02FF:  GOTO   2FB
....................         adim--; 
0300:  DECF   20,F
....................         durum =2; 
0301:  MOVLW  02
0302:  MOVWF  21
....................          
....................         if(adim == 0){ 
0303:  MOVF   20,F
0304:  BTFSS  03.2
0305:  GOTO   30A
....................            adim = 8; 
0306:  MOVLW  08
0307:  MOVWF  20
....................            durum = 2; 
0308:  MOVLW  02
0309:  MOVWF  21
....................         } 
....................       } 
....................        
....................       if(input(buton_ileri) == 0 && input(buton_geri) == 0) 
030A:  BTFSC  05.0
030B:  GOTO   310
030C:  BTFSC  05.1
030D:  GOTO   310
....................       durum = 3; 
030E:  MOVLW  03
030F:  MOVWF  21
....................        
....................       if(input(buton_ileri) == 1 && input(buton_geri) == 1) 
0310:  BTFSS  05.0
0311:  GOTO   316
0312:  BTFSS  05.1
0313:  GOTO   316
....................       durum = 4; 
0314:  MOVLW  04
0315:  MOVWF  21
0316:  GOTO   252
....................       
....................       
....................    } 
....................  
.................... } 
0317:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
