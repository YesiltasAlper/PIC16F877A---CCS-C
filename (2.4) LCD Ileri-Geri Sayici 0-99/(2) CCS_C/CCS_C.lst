CCS PCM C Compiler, Version 5.015, 5967               04-Kas-21 16:08

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(8) LCD_Ileri-Geri-Sayici_0-99\(2) CCS_C\CCS_C.lst

               ROM used:   670 words (8%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   217
0003:  NOP
.................... #include <16f877.h>  
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 8C,29
0005:  DATA E1,3C
0006:  DATA E9,31
0007:  DATA E9,18
0008:  DATA 20,1D
0009:  DATA A0,12
000A:  DATA 64,00
000B:  DATA D3,30
000C:  DATA F9,34
000D:  DATA E3,34
000E:  DATA 32,10
000F:  DATA 3A,10
0010:  DATA 25,32
0011:  DATA 00,01
0012:  DATA C3,34
0013:  DATA EB,34
0014:  DATA 73,00
0015:  DATA C2,30
0016:  DATA F3,30
0017:  DATA F2,34
0018:  DATA EC,34
0019:  DATA 2E,17
001A:  DATA 2E,00
*
00FE:  MOVF   0B,W
00FF:  MOVWF  23
0100:  BCF    0B.7
0101:  BSF    03.5
0102:  BSF    03.6
0103:  BSF    0C.7
0104:  BSF    0C.0
0105:  NOP
0106:  NOP
0107:  BCF    03.5
0108:  BCF    03.6
0109:  BTFSC  23.7
010A:  BSF    0B.7
010B:  BTFSC  03.0
010C:  GOTO   135
010D:  BSF    03.6
010E:  MOVF   0C,W
010F:  ANDLW  7F
0110:  BCF    03.6
0111:  MOVWF  23
0112:  BSF    03.6
0113:  MOVF   0D,W
0114:  BCF    03.6
0115:  MOVWF  24
0116:  BSF    03.6
0117:  MOVF   0F,W
0118:  BCF    03.6
0119:  MOVWF  25
011A:  MOVF   23,W
011B:  MOVWF  28
011C:  CALL   0D2
011D:  MOVF   24,W
011E:  BSF    03.6
011F:  MOVWF  0D
0120:  BCF    03.6
0121:  MOVF   25,W
0122:  BSF    03.6
0123:  MOVWF  0F
0124:  BCF    03.6
0125:  MOVF   0B,W
0126:  MOVWF  26
0127:  BCF    0B.7
0128:  BSF    03.5
0129:  BSF    03.6
012A:  BSF    0C.7
012B:  BSF    0C.0
012C:  NOP
012D:  NOP
012E:  BCF    03.5
012F:  BCF    03.6
0130:  BTFSC  26.7
0131:  BSF    0B.7
0132:  DECFSZ 22,F
0133:  GOTO   135
0134:  GOTO   154
0135:  BSF    03.6
0136:  RLF    0C,W
0137:  RLF    0E,W
0138:  ANDLW  7F
0139:  BCF    03.6
013A:  MOVWF  23
013B:  BSF    03.6
013C:  MOVF   0D,W
013D:  BCF    03.6
013E:  MOVWF  24
013F:  BSF    03.6
0140:  MOVF   0F,W
0141:  BCF    03.6
0142:  MOVWF  25
0143:  MOVF   23,W
0144:  MOVWF  28
0145:  CALL   0D2
0146:  MOVF   24,W
0147:  BSF    03.6
0148:  MOVWF  0D
0149:  BCF    03.6
014A:  MOVF   25,W
014B:  BSF    03.6
014C:  MOVWF  0F
014D:  INCF   0D,F
014E:  BTFSC  03.2
014F:  INCF   0F,F
0150:  BCF    03.0
0151:  BCF    03.6
0152:  DECFSZ 22,F
0153:  GOTO   0FE
0154:  RETURN
0155:  MOVF   29,W
0156:  CLRF   78
0157:  SUBWF  28,W
0158:  BTFSC  03.0
0159:  GOTO   15D
015A:  MOVF   28,W
015B:  MOVWF  77
015C:  GOTO   169
015D:  CLRF   77
015E:  MOVLW  08
015F:  MOVWF  2A
0160:  RLF    28,F
0161:  RLF    77,F
0162:  MOVF   29,W
0163:  SUBWF  77,W
0164:  BTFSC  03.0
0165:  MOVWF  77
0166:  RLF    78,F
0167:  DECFSZ 2A,F
0168:  GOTO   160
0169:  RETURN
016A:  MOVLW  20
016B:  BTFSS  23.4
016C:  MOVLW  30
016D:  MOVWF  24
016E:  MOVF   22,W
016F:  MOVWF  77
0170:  BTFSS  22.7
0171:  GOTO   17A
0172:  COMF   77,F
0173:  INCF   77,F
0174:  MOVF   77,W
0175:  MOVWF  22
0176:  MOVLW  2D
0177:  MOVWF  24
0178:  BSF    23.7
0179:  BSF    23.0
017A:  MOVF   22,W
017B:  MOVWF  28
017C:  MOVLW  64
017D:  MOVWF  29
017E:  CALL   155
017F:  MOVF   77,W
0180:  MOVWF  22
0181:  MOVLW  30
0182:  ADDWF  78,W
0183:  MOVWF  25
0184:  MOVF   22,W
0185:  MOVWF  28
0186:  MOVLW  0A
0187:  MOVWF  29
0188:  CALL   155
0189:  MOVLW  30
018A:  ADDWF  77,W
018B:  MOVWF  27
018C:  MOVLW  30
018D:  ADDWF  78,W
018E:  MOVWF  26
018F:  MOVF   24,W
0190:  MOVWF  77
0191:  MOVLW  30
0192:  SUBWF  25,W
0193:  BTFSC  03.2
0194:  GOTO   199
0195:  BSF    23.1
0196:  BTFSC  23.7
0197:  BSF    23.2
0198:  GOTO   1AD
0199:  MOVF   24,W
019A:  MOVWF  25
019B:  MOVLW  20
019C:  MOVWF  24
019D:  MOVLW  30
019E:  SUBWF  26,W
019F:  BTFSC  03.2
01A0:  GOTO   1A5
01A1:  BSF    23.0
01A2:  BTFSC  23.7
01A3:  BSF    23.1
01A4:  GOTO   1AD
01A5:  BTFSS  03.2
01A6:  BSF    23.0
01A7:  BTFSS  03.2
01A8:  GOTO   1AD
01A9:  MOVF   25,W
01AA:  MOVWF  26
01AB:  MOVLW  20
01AC:  MOVWF  25
01AD:  BTFSC  23.2
01AE:  GOTO   1B4
01AF:  BTFSC  23.1
01B0:  GOTO   1B7
01B1:  BTFSC  23.0
01B2:  GOTO   1BA
01B3:  GOTO   1BD
01B4:  MOVF   24,W
01B5:  MOVWF  28
01B6:  CALL   0D2
01B7:  MOVF   25,W
01B8:  MOVWF  28
01B9:  CALL   0D2
01BA:  MOVF   26,W
01BB:  MOVWF  28
01BC:  CALL   0D2
01BD:  MOVF   27,W
01BE:  MOVWF  28
01BF:  CALL   0D2
01C0:  RETURN
01C1:  MOVF   0B,W
01C2:  MOVWF  22
01C3:  BCF    0B.7
01C4:  BSF    03.5
01C5:  BSF    03.6
01C6:  BSF    0C.7
01C7:  BSF    0C.0
01C8:  NOP
01C9:  NOP
01CA:  BCF    03.5
01CB:  BCF    03.6
01CC:  BTFSC  22.7
01CD:  BSF    0B.7
01CE:  BSF    03.6
01CF:  MOVF   0C,W
01D0:  ANDLW  7F
01D1:  BTFSC  03.2
01D2:  GOTO   215
01D3:  BCF    03.6
01D4:  MOVWF  22
01D5:  BSF    03.6
01D6:  MOVF   0D,W
01D7:  BCF    03.6
01D8:  MOVWF  23
01D9:  BSF    03.6
01DA:  MOVF   0F,W
01DB:  BCF    03.6
01DC:  MOVWF  24
01DD:  MOVF   22,W
01DE:  MOVWF  28
01DF:  CALL   0D2
01E0:  MOVF   23,W
01E1:  BSF    03.6
01E2:  MOVWF  0D
01E3:  BCF    03.6
01E4:  MOVF   24,W
01E5:  BSF    03.6
01E6:  MOVWF  0F
01E7:  BCF    03.6
01E8:  MOVF   0B,W
01E9:  MOVWF  25
01EA:  BCF    0B.7
01EB:  BSF    03.5
01EC:  BSF    03.6
01ED:  BSF    0C.7
01EE:  BSF    0C.0
01EF:  NOP
01F0:  NOP
01F1:  BCF    03.5
01F2:  BCF    03.6
01F3:  BTFSC  25.7
01F4:  BSF    0B.7
01F5:  BSF    03.6
01F6:  RLF    0C,W
01F7:  RLF    0E,W
01F8:  ANDLW  7F
01F9:  BTFSC  03.2
01FA:  GOTO   215
01FB:  BCF    03.6
01FC:  MOVWF  22
01FD:  BSF    03.6
01FE:  MOVF   0D,W
01FF:  BCF    03.6
0200:  MOVWF  23
0201:  BSF    03.6
0202:  MOVF   0F,W
0203:  BCF    03.6
0204:  MOVWF  24
0205:  MOVF   22,W
0206:  MOVWF  28
0207:  CALL   0D2
0208:  MOVF   23,W
0209:  BSF    03.6
020A:  MOVWF  0D
020B:  BCF    03.6
020C:  MOVF   24,W
020D:  BSF    03.6
020E:  MOVWF  0F
020F:  INCF   0D,F
0210:  BTFSC  03.2
0211:  INCF   0F,F
0212:  BCF    03.6
0213:  GOTO   1C1
0214:  BSF    03.6
0215:  BCF    03.6
0216:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT  
.................... #use delay (clock = 4M)         
*
001B:  MOVLW  29
001C:  MOVWF  04
001D:  BCF    03.7
001E:  MOVF   00,W
001F:  BTFSC  03.2
0020:  GOTO   02F
0021:  MOVLW  01
0022:  MOVWF  78
0023:  CLRF   77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 78,F
0027:  GOTO   023
0028:  MOVLW  4A
0029:  MOVWF  77
002A:  DECFSZ 77,F
002B:  GOTO   02A
002C:  GOTO   02D
002D:  DECFSZ 00,F
002E:  GOTO   021
002F:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0048:  MOVLW  0F
0049:  BSF    03.5
004A:  ANDWF  08,W
004B:  IORLW  F0
004C:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004D:  BCF    03.5
004E:  BSF    08.2
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    08.0
....................    delay_cycles(1); 
0051:  NOP
....................    high = lcd_read_nibble(); 
0052:  CALL   03C
0053:  MOVF   78,W
0054:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
0055:  BCF    08.0
....................    delay_cycles(1); 
0056:  NOP
....................    lcd_output_enable(1); 
0057:  BSF    08.0
....................    delay_us(1); 
0058:  NOP
....................    low = lcd_read_nibble(); 
0059:  CALL   03C
005A:  MOVF   78,W
005B:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
005C:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005D:  MOVLW  0F
005E:  BSF    03.5
005F:  ANDWF  08,W
0060:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0061:  BCF    03.5
0062:  SWAPF  30,W
0063:  MOVWF  77
0064:  MOVLW  F0
0065:  ANDWF  77,F
0066:  MOVF   77,W
0067:  IORWF  2F,W
0068:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003C:  MOVF   08,W
003D:  MOVWF  77
003E:  SWAPF  08,W
003F:  ANDLW  0F
0040:  MOVWF  78
....................   #endif 
0041:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0030:  SWAPF  30,W
0031:  ANDLW  F0
0032:  MOVWF  77
0033:  MOVLW  0F
0034:  ANDWF  08,W
0035:  IORWF  77,W
0036:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0037:  NOP
....................    lcd_output_enable(1); 
0038:  BSF    08.0
....................    delay_us(2); 
0039:  GOTO   03A
....................    lcd_output_enable(0); 
003A:  BCF    08.0
003B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0042:  BSF    03.5
0043:  BCF    08.0
....................    lcd_rs_tris(); 
0044:  BCF    08.1
....................    lcd_rw_tris(); 
0045:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0046:  BCF    03.5
0047:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0069:  MOVF   78,W
006A:  MOVWF  2F
006B:  BTFSC  2F.7
006C:  GOTO   048
....................    lcd_output_rs(address); 
006D:  BTFSS  2D.0
006E:  BCF    08.1
006F:  BTFSC  2D.0
0070:  BSF    08.1
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_rw(0); 
0072:  BCF    08.2
....................    delay_cycles(1); 
0073:  NOP
....................    lcd_output_enable(0); 
0074:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0075:  SWAPF  2E,W
0076:  MOVWF  2F
0077:  MOVLW  0F
0078:  ANDWF  2F,F
0079:  MOVF   2F,W
007A:  MOVWF  30
007B:  CALL   030
....................    lcd_send_nibble(n & 0xf); 
007C:  MOVF   2E,W
007D:  ANDLW  0F
007E:  MOVWF  2F
007F:  MOVWF  30
0080:  CALL   030
0081:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0082:  MOVLW  28
0083:  MOVWF  23
0084:  MOVLW  0C
0085:  MOVWF  24
0086:  MOVLW  01
0087:  MOVWF  25
0088:  MOVLW  06
0089:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
008A:  BCF    08.0
....................    lcd_output_rs(0); 
008B:  BCF    08.1
....................    lcd_output_rw(0); 
008C:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008D:  MOVLW  0F
008E:  BSF    03.5
008F:  ANDWF  08,W
0090:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0091:  BCF    08.0
....................    lcd_rs_tris(); 
0092:  BCF    08.1
....................    lcd_rw_tris(); 
0093:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0094:  MOVLW  0F
0095:  BCF    03.5
0096:  MOVWF  29
0097:  CALL   01B
....................    for(i=1;i<=3;++i) 
0098:  MOVLW  01
0099:  MOVWF  22
009A:  MOVF   22,W
009B:  SUBLW  03
009C:  BTFSS  03.0
009D:  GOTO   0A6
....................    { 
....................        lcd_send_nibble(3); 
009E:  MOVLW  03
009F:  MOVWF  30
00A0:  CALL   030
....................        delay_ms(5); 
00A1:  MOVLW  05
00A2:  MOVWF  29
00A3:  CALL   01B
00A4:  INCF   22,F
00A5:  GOTO   09A
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A6:  MOVLW  02
00A7:  MOVWF  30
00A8:  CALL   030
....................    delay_ms(5); 
00A9:  MOVLW  05
00AA:  MOVWF  29
00AB:  CALL   01B
....................    for(i=0;i<=3;++i) 
00AC:  CLRF   22
00AD:  MOVF   22,W
00AE:  SUBLW  03
00AF:  BTFSS  03.0
00B0:  GOTO   0BD
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B1:  MOVLW  23
00B2:  ADDWF  22,W
00B3:  MOVWF  04
00B4:  BCF    03.7
00B5:  MOVF   00,W
00B6:  MOVWF  27
00B7:  CLRF   2D
00B8:  MOVF   27,W
00B9:  MOVWF  2E
00BA:  CALL   042
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BB:  INCF   22,F
00BC:  GOTO   0AD
00BD:  BCF    0A.3
00BE:  BCF    0A.4
00BF:  GOTO   23C (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C0:  DECFSZ 2A,W
00C1:  GOTO   0C3
00C2:  GOTO   0C6
....................       address=LCD_LINE_TWO; 
00C3:  MOVLW  40
00C4:  MOVWF  2B
00C5:  GOTO   0C7
....................    else 
....................       address=0; 
00C6:  CLRF   2B
....................       
....................    address+=x-1; 
00C7:  MOVLW  01
00C8:  SUBWF  29,W
00C9:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
00CA:  MOVF   2B,W
00CB:  IORLW  80
00CC:  MOVWF  2C
00CD:  CLRF   2D
00CE:  MOVF   2C,W
00CF:  MOVWF  2E
00D0:  CALL   042
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D1:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D2:  MOVF   28,W
00D3:  XORLW  07
00D4:  BTFSC  03.2
00D5:  GOTO   0E0
00D6:  XORLW  0B
00D7:  BTFSC  03.2
00D8:  GOTO   0E5
00D9:  XORLW  06
00DA:  BTFSC  03.2
00DB:  GOTO   0ED
00DC:  XORLW  02
00DD:  BTFSC  03.2
00DE:  GOTO   0F3
00DF:  GOTO   0F8
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E0:  MOVLW  01
00E1:  MOVWF  29
00E2:  MOVWF  2A
00E3:  CALL   0C0
00E4:  GOTO   0FD
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E5:  CLRF   2D
00E6:  MOVLW  01
00E7:  MOVWF  2E
00E8:  CALL   042
....................                      delay_ms(2); 
00E9:  MOVLW  02
00EA:  MOVWF  29
00EB:  CALL   01B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00EC:  GOTO   0FD
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00ED:  MOVLW  01
00EE:  MOVWF  29
00EF:  MOVLW  02
00F0:  MOVWF  2A
00F1:  CALL   0C0
00F2:  GOTO   0FD
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F3:  CLRF   2D
00F4:  MOVLW  10
00F5:  MOVWF  2E
00F6:  CALL   042
00F7:  GOTO   0FD
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F8:  MOVLW  01
00F9:  MOVWF  2D
00FA:  MOVF   28,W
00FB:  MOVWF  2E
00FC:  CALL   042
....................      #endif 
....................    } 
00FD:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int sayi1 = 0,sayi2 = 99; 
....................  
.................... void main(){ 
*
0217:  MOVF   03,W
0218:  ANDLW  1F
0219:  MOVWF  03
021A:  CLRF   20
021B:  MOVLW  63
021C:  MOVWF  21
021D:  BSF    03.5
021E:  BSF    1F.0
021F:  BSF    1F.1
0220:  BSF    1F.2
0221:  BCF    1F.3
0222:  BCF    03.7
....................  
....................    setup_psp(PSP_DISABLED); 
0223:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0224:  BCF    03.5
0225:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0226:  MOVLW  00
0227:  MOVWF  78
0228:  MOVWF  12
0229:  MOVLW  00
022A:  BSF    03.5
022B:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
022C:  BSF    1F.0
022D:  BSF    1F.1
022E:  BSF    1F.2
022F:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0230:  BCF    03.5
0231:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0232:  MOVLW  F0
0233:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0234:  ANDWF  1D,F
....................     
....................    set_tris_a(0x01); 
0235:  MOVLW  01
0236:  BSF    03.5
0237:  MOVWF  05
....................    set_tris_d(0x00); 
0238:  MOVLW  00
0239:  MOVWF  08
....................     
....................    lcd_init(); 
023A:  BCF    03.5
023B:  GOTO   082
....................     
....................    while(1){ 
....................     
....................       printf(lcd_putc,"\fSayici1 : %d",sayi1); 
023C:  MOVLW  04
023D:  BSF    03.6
023E:  MOVWF  0D
023F:  MOVLW  00
0240:  MOVWF  0F
0241:  BCF    03.0
0242:  MOVLW  0B
0243:  BCF    03.6
0244:  MOVWF  22
0245:  CALL   0FE
0246:  MOVF   20,W
0247:  MOVWF  22
0248:  MOVLW  18
0249:  MOVWF  23
024A:  CALL   16A
....................       lcd_gotoxy(1,2); 
024B:  MOVLW  01
024C:  MOVWF  29
024D:  MOVLW  02
024E:  MOVWF  2A
024F:  CALL   0C0
....................       printf(lcd_putc,"Sayici2 : %d",sayi2); 
0250:  MOVLW  0B
0251:  BSF    03.6
0252:  MOVWF  0D
0253:  MOVLW  00
0254:  MOVWF  0F
0255:  BCF    03.0
0256:  MOVLW  0A
0257:  BCF    03.6
0258:  MOVWF  22
0259:  CALL   0FE
025A:  MOVF   21,W
025B:  MOVWF  22
025C:  MOVLW  18
025D:  MOVWF  23
025E:  CALL   16A
....................       delay_ms(100); 
025F:  MOVLW  64
0260:  MOVWF  29
0261:  CALL   01B
....................       sayi1++; 
0262:  INCF   20,F
....................       sayi2--; 
0263:  DECF   21,F
....................        
....................       if(sayi1 == 99 || sayi2 == 0){ 
0264:  MOVF   20,W
0265:  SUBLW  63
0266:  BTFSC  03.2
0267:  GOTO   26B
0268:  MOVF   21,F
0269:  BTFSS  03.2
026A:  GOTO   26F
....................          sayi1 = 0; 
026B:  CLRF   20
....................          sayi2 = 99; 
026C:  MOVLW  63
026D:  MOVWF  21
....................       } 
026E:  GOTO   274
....................        
....................       else if(input(pin_a0) == 1){ 
026F:  BSF    03.5
0270:  BSF    05.0
0271:  BCF    03.5
0272:  BTFSC  05.0
....................          break; 
0273:  GOTO   275
....................       } 
0274:  GOTO   23C
....................    } 
....................     
....................    lcd_putc('\f'); 
0275:  MOVLW  0C
0276:  MOVWF  28
0277:  CALL   0D2
....................    lcd_gotoxy(1,1); 
0278:  MOVLW  01
0279:  MOVWF  29
027A:  MOVWF  2A
027B:  CALL   0C0
....................    lcd_putc("Cikis"); 
027C:  MOVLW  12
027D:  BSF    03.6
027E:  MOVWF  0D
027F:  MOVLW  00
0280:  MOVWF  0F
0281:  BCF    03.6
0282:  CALL   1C1
....................    lcd_gotoxy(1,2); 
0283:  MOVLW  01
0284:  MOVWF  29
0285:  MOVLW  02
0286:  MOVWF  2A
0287:  CALL   0C0
....................    lcd_putc("Basarili..."); 
0288:  MOVLW  15
0289:  BSF    03.6
028A:  MOVWF  0D
028B:  MOVLW  00
028C:  MOVWF  0F
028D:  BCF    03.6
028E:  CALL   1C1
....................    delay_ms(1500); 
028F:  MOVLW  06
0290:  MOVWF  22
0291:  MOVLW  FA
0292:  MOVWF  29
0293:  CALL   01B
0294:  DECFSZ 22,F
0295:  GOTO   291
....................    lcd_putc('\f'); 
0296:  MOVLW  0C
0297:  MOVWF  28
0298:  CALL   0D2
....................    output_d(0x00); 
0299:  BSF    03.5
029A:  CLRF   08
029B:  BCF    03.5
029C:  CLRF   08
.................... } 
029D:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
