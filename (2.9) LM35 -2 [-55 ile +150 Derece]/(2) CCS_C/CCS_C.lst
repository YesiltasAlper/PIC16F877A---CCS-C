CCS PCM C Compiler, Version 5.015, 5967               10-Ara-21 15:17

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(20) LM35-2  [-55 ile +150 Derece]\(2) CCS_C\CCS_C.lst

               ROM used:   1407 words (17%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           43 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   43B
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA F4,32
0005:  DATA 6D,38
0006:  DATA 3D,10
0007:  DATA 25,19
0008:  DATA AE,18
0009:  DATA 66,00
000A:  DATA 43,10
000B:  DATA 20,10
000C:  DATA 00,00
000D:  DATA F6,37
000E:  DATA 6C,3A
000F:  DATA E1,33
0010:  DATA E5,1E
0011:  DATA A0,12
0012:  DATA 32,17
0013:  DATA 31,33
0014:  DATA 00,01
0015:  DATA 56,10
0016:  DATA 20,10
0017:  DATA 00,00
*
00CF:  MOVLW  8E
00D0:  MOVWF  77
00D1:  MOVF   2A,W
00D2:  MOVWF  78
00D3:  MOVF   29,W
00D4:  MOVWF  79
00D5:  CLRF   7A
00D6:  BTFSS  2A.7
00D7:  GOTO   0DD
00D8:  COMF   78,F
00D9:  COMF   79,F
00DA:  INCF   79,F
00DB:  BTFSC  03.2
00DC:  INCF   78,F
00DD:  MOVF   78,F
00DE:  BTFSS  03.2
00DF:  GOTO   0EA
00E0:  MOVF   79,W
00E1:  MOVWF  78
00E2:  CLRF   79
00E3:  MOVLW  08
00E4:  SUBWF  77,F
00E5:  MOVF   78,F
00E6:  BTFSS  03.2
00E7:  GOTO   0EA
00E8:  CLRF   77
00E9:  GOTO   0F3
00EA:  BCF    03.0
00EB:  BTFSC  78.7
00EC:  GOTO   0F1
00ED:  RLF    79,F
00EE:  RLF    78,F
00EF:  DECF   77,F
00F0:  GOTO   0EA
00F1:  BTFSS  2A.7
00F2:  BCF    78.7
00F3:  RETURN
00F4:  MOVF   3A,W
00F5:  BTFSC  03.2
00F6:  GOTO   164
00F7:  MOVWF  42
00F8:  MOVF   3E,W
00F9:  BTFSC  03.2
00FA:  GOTO   164
00FB:  ADDWF  42,F
00FC:  BTFSC  03.0
00FD:  GOTO   105
00FE:  MOVLW  7F
00FF:  SUBWF  42,F
0100:  BTFSS  03.0
0101:  GOTO   164
0102:  BTFSC  03.2
0103:  GOTO   164
0104:  GOTO   109
0105:  MOVLW  81
0106:  ADDWF  42,F
0107:  BTFSC  03.0
0108:  GOTO   164
0109:  MOVF   42,W
010A:  MOVWF  77
010B:  CLRF   78
010C:  CLRF   79
010D:  CLRF   7A
010E:  MOVF   3B,W
010F:  MOVWF  46
0110:  BSF    46.7
0111:  MOVF   3C,W
0112:  MOVWF  45
0113:  MOVF   3D,W
0114:  MOVWF  44
0115:  MOVLW  18
0116:  MOVWF  42
0117:  CLRF   43
0118:  BTFSS  44.0
0119:  GOTO   132
011A:  MOVF   41,W
011B:  ADDWF  7A,F
011C:  BTFSS  03.0
011D:  GOTO   124
011E:  INCF   79,F
011F:  BTFSS  03.2
0120:  GOTO   124
0121:  INCF   78,F
0122:  BTFSC  03.2
0123:  BSF    43.7
0124:  MOVF   40,W
0125:  ADDWF  79,F
0126:  BTFSS  03.0
0127:  GOTO   12B
0128:  INCF   78,F
0129:  BTFSC  03.2
012A:  BSF    43.7
012B:  MOVF   3F,W
012C:  MOVWF  3C
012D:  BSF    3C.7
012E:  MOVF   3C,W
012F:  ADDWF  78,F
0130:  BTFSC  03.0
0131:  BSF    43.7
0132:  RLF    43,F
0133:  RRF    78,F
0134:  RRF    79,F
0135:  RRF    7A,F
0136:  RRF    46,F
0137:  RRF    45,F
0138:  RRF    44,F
0139:  BCF    03.0
013A:  DECFSZ 42,F
013B:  GOTO   117
013C:  MOVLW  01
013D:  ADDWF  77,F
013E:  BTFSC  03.0
013F:  GOTO   164
0140:  BTFSC  78.7
0141:  GOTO   149
0142:  RLF    46,F
0143:  RLF    7A,F
0144:  RLF    79,F
0145:  RLF    78,F
0146:  DECF   77,F
0147:  BTFSC  03.2
0148:  GOTO   164
0149:  BTFSS  46.7
014A:  GOTO   15A
014B:  INCF   7A,F
014C:  BTFSS  03.2
014D:  GOTO   15A
014E:  INCF   79,F
014F:  BTFSS  03.2
0150:  GOTO   15A
0151:  INCF   78,F
0152:  BTFSS  03.2
0153:  GOTO   15A
0154:  RRF    78,F
0155:  RRF    79,F
0156:  RRF    7A,F
0157:  INCF   77,F
0158:  BTFSC  03.2
0159:  GOTO   164
015A:  MOVF   3B,W
015B:  MOVWF  43
015C:  MOVF   3F,W
015D:  XORWF  43,F
015E:  BTFSS  43.7
015F:  GOTO   162
0160:  BSF    78.7
0161:  GOTO   168
0162:  BCF    78.7
0163:  GOTO   168
0164:  CLRF   77
0165:  CLRF   78
0166:  CLRF   79
0167:  CLRF   7A
0168:  RETURN
0169:  MOVF   2D,W
016A:  BTFSC  03.2
016B:  GOTO   22E
016C:  MOVWF  39
016D:  MOVF   31,W
016E:  BTFSC  03.2
016F:  GOTO   22E
0170:  SUBWF  39,F
0171:  BTFSS  03.0
0172:  GOTO   178
0173:  MOVLW  7F
0174:  ADDWF  39,F
0175:  BTFSC  03.0
0176:  GOTO   22E
0177:  GOTO   17E
0178:  MOVLW  81
0179:  SUBWF  39,F
017A:  BTFSS  03.0
017B:  GOTO   22E
017C:  BTFSC  03.2
017D:  GOTO   22E
017E:  MOVF   39,W
017F:  MOVWF  77
0180:  CLRF   78
0181:  CLRF   79
0182:  CLRF   7A
0183:  CLRF   38
0184:  MOVF   2E,W
0185:  MOVWF  37
0186:  BSF    37.7
0187:  MOVF   2F,W
0188:  MOVWF  36
0189:  MOVF   30,W
018A:  MOVWF  35
018B:  MOVLW  19
018C:  MOVWF  39
018D:  MOVF   34,W
018E:  SUBWF  35,F
018F:  BTFSC  03.0
0190:  GOTO   1A1
0191:  MOVLW  01
0192:  SUBWF  36,F
0193:  BTFSC  03.0
0194:  GOTO   1A1
0195:  SUBWF  37,F
0196:  BTFSC  03.0
0197:  GOTO   1A1
0198:  SUBWF  38,F
0199:  BTFSC  03.0
019A:  GOTO   1A1
019B:  INCF   38,F
019C:  INCF   37,F
019D:  INCF   36,F
019E:  MOVF   34,W
019F:  ADDWF  35,F
01A0:  GOTO   1D3
01A1:  MOVF   33,W
01A2:  SUBWF  36,F
01A3:  BTFSC  03.0
01A4:  GOTO   1BC
01A5:  MOVLW  01
01A6:  SUBWF  37,F
01A7:  BTFSC  03.0
01A8:  GOTO   1BC
01A9:  SUBWF  38,F
01AA:  BTFSC  03.0
01AB:  GOTO   1BC
01AC:  INCF   38,F
01AD:  INCF   37,F
01AE:  MOVF   33,W
01AF:  ADDWF  36,F
01B0:  MOVF   34,W
01B1:  ADDWF  35,F
01B2:  BTFSS  03.0
01B3:  GOTO   1D3
01B4:  INCF   36,F
01B5:  BTFSS  03.2
01B6:  GOTO   1D3
01B7:  INCF   37,F
01B8:  BTFSS  03.2
01B9:  GOTO   1D3
01BA:  INCF   38,F
01BB:  GOTO   1D3
01BC:  MOVF   32,W
01BD:  IORLW  80
01BE:  SUBWF  37,F
01BF:  BTFSC  03.0
01C0:  GOTO   1D2
01C1:  MOVLW  01
01C2:  SUBWF  38,F
01C3:  BTFSC  03.0
01C4:  GOTO   1D2
01C5:  INCF   38,F
01C6:  MOVF   32,W
01C7:  IORLW  80
01C8:  ADDWF  37,F
01C9:  MOVF   33,W
01CA:  ADDWF  36,F
01CB:  BTFSS  03.0
01CC:  GOTO   1B0
01CD:  INCF   37,F
01CE:  BTFSS  03.2
01CF:  GOTO   1B0
01D0:  INCF   38,F
01D1:  GOTO   1B0
01D2:  BSF    7A.0
01D3:  DECFSZ 39,F
01D4:  GOTO   1D6
01D5:  GOTO   1E1
01D6:  BCF    03.0
01D7:  RLF    35,F
01D8:  RLF    36,F
01D9:  RLF    37,F
01DA:  RLF    38,F
01DB:  BCF    03.0
01DC:  RLF    7A,F
01DD:  RLF    79,F
01DE:  RLF    78,F
01DF:  RLF    3A,F
01E0:  GOTO   18D
01E1:  BTFSS  3A.0
01E2:  GOTO   1E9
01E3:  BCF    03.0
01E4:  RRF    78,F
01E5:  RRF    79,F
01E6:  RRF    7A,F
01E7:  RRF    3A,F
01E8:  GOTO   1EC
01E9:  DECF   77,F
01EA:  BTFSC  03.2
01EB:  GOTO   22E
01EC:  BTFSC  3A.7
01ED:  GOTO   215
01EE:  BCF    03.0
01EF:  RLF    35,F
01F0:  RLF    36,F
01F1:  RLF    37,F
01F2:  RLF    38,F
01F3:  MOVF   34,W
01F4:  SUBWF  35,F
01F5:  BTFSC  03.0
01F6:  GOTO   201
01F7:  MOVLW  01
01F8:  SUBWF  36,F
01F9:  BTFSC  03.0
01FA:  GOTO   201
01FB:  SUBWF  37,F
01FC:  BTFSC  03.0
01FD:  GOTO   201
01FE:  SUBWF  38,F
01FF:  BTFSS  03.0
0200:  GOTO   224
0201:  MOVF   33,W
0202:  SUBWF  36,F
0203:  BTFSC  03.0
0204:  GOTO   20C
0205:  MOVLW  01
0206:  SUBWF  37,F
0207:  BTFSC  03.0
0208:  GOTO   20C
0209:  SUBWF  38,F
020A:  BTFSS  03.0
020B:  GOTO   224
020C:  MOVF   32,W
020D:  IORLW  80
020E:  SUBWF  37,F
020F:  BTFSC  03.0
0210:  GOTO   215
0211:  MOVLW  01
0212:  SUBWF  38,F
0213:  BTFSS  03.0
0214:  GOTO   224
0215:  INCF   7A,F
0216:  BTFSS  03.2
0217:  GOTO   224
0218:  INCF   79,F
0219:  BTFSS  03.2
021A:  GOTO   224
021B:  INCF   78,F
021C:  BTFSS  03.2
021D:  GOTO   224
021E:  INCF   77,F
021F:  BTFSC  03.2
0220:  GOTO   22E
0221:  RRF    78,F
0222:  RRF    79,F
0223:  RRF    7A,F
0224:  MOVF   2E,W
0225:  MOVWF  39
0226:  MOVF   32,W
0227:  XORWF  39,F
0228:  BTFSS  39.7
0229:  GOTO   22C
022A:  BSF    78.7
022B:  GOTO   232
022C:  BCF    78.7
022D:  GOTO   232
022E:  CLRF   77
022F:  CLRF   78
0230:  CLRF   79
0231:  CLRF   7A
0232:  RETURN
*
025F:  MOVF   0B,W
0260:  MOVWF  2E
0261:  BCF    0B.7
0262:  BSF    03.5
0263:  BSF    03.6
0264:  BSF    0C.7
0265:  BSF    0C.0
0266:  NOP
0267:  NOP
0268:  BCF    03.5
0269:  BCF    03.6
026A:  BTFSC  2E.7
026B:  BSF    0B.7
026C:  BTFSC  03.0
026D:  GOTO   296
026E:  BSF    03.6
026F:  MOVF   0C,W
0270:  ANDLW  7F
0271:  BCF    03.6
0272:  MOVWF  2E
0273:  BSF    03.6
0274:  MOVF   0D,W
0275:  BCF    03.6
0276:  MOVWF  2F
0277:  BSF    03.6
0278:  MOVF   0F,W
0279:  BCF    03.6
027A:  MOVWF  30
027B:  MOVF   2E,W
027C:  MOVWF  3A
027D:  CALL   233
027E:  MOVF   2F,W
027F:  BSF    03.6
0280:  MOVWF  0D
0281:  BCF    03.6
0282:  MOVF   30,W
0283:  BSF    03.6
0284:  MOVWF  0F
0285:  BCF    03.6
0286:  MOVF   0B,W
0287:  MOVWF  31
0288:  BCF    0B.7
0289:  BSF    03.5
028A:  BSF    03.6
028B:  BSF    0C.7
028C:  BSF    0C.0
028D:  NOP
028E:  NOP
028F:  BCF    03.5
0290:  BCF    03.6
0291:  BTFSC  31.7
0292:  BSF    0B.7
0293:  DECFSZ 2D,F
0294:  GOTO   296
0295:  GOTO   2B5
0296:  BSF    03.6
0297:  RLF    0C,W
0298:  RLF    0E,W
0299:  ANDLW  7F
029A:  BCF    03.6
029B:  MOVWF  2E
029C:  BSF    03.6
029D:  MOVF   0D,W
029E:  BCF    03.6
029F:  MOVWF  2F
02A0:  BSF    03.6
02A1:  MOVF   0F,W
02A2:  BCF    03.6
02A3:  MOVWF  30
02A4:  MOVF   2E,W
02A5:  MOVWF  3A
02A6:  CALL   233
02A7:  MOVF   2F,W
02A8:  BSF    03.6
02A9:  MOVWF  0D
02AA:  BCF    03.6
02AB:  MOVF   30,W
02AC:  BSF    03.6
02AD:  MOVWF  0F
02AE:  INCF   0D,F
02AF:  BTFSC  03.2
02B0:  INCF   0F,F
02B1:  BCF    03.0
02B2:  BCF    03.6
02B3:  DECFSZ 2D,F
02B4:  GOTO   25F
02B5:  RETURN
02B6:  BTFSC  03.1
02B7:  GOTO   2BB
02B8:  MOVLW  42
02B9:  MOVWF  04
02BA:  BCF    03.7
02BB:  CLRF   77
02BC:  CLRF   78
02BD:  CLRF   79
02BE:  CLRF   7A
02BF:  CLRF   42
02C0:  CLRF   43
02C1:  CLRF   44
02C2:  CLRF   45
02C3:  MOVF   41,W
02C4:  IORWF  40,W
02C5:  IORWF  3F,W
02C6:  IORWF  3E,W
02C7:  BTFSC  03.2
02C8:  GOTO   2F9
02C9:  MOVLW  20
02CA:  MOVWF  46
02CB:  BCF    03.0
02CC:  RLF    3A,F
02CD:  RLF    3B,F
02CE:  RLF    3C,F
02CF:  RLF    3D,F
02D0:  RLF    42,F
02D1:  RLF    43,F
02D2:  RLF    44,F
02D3:  RLF    45,F
02D4:  MOVF   41,W
02D5:  SUBWF  45,W
02D6:  BTFSS  03.2
02D7:  GOTO   2E2
02D8:  MOVF   40,W
02D9:  SUBWF  44,W
02DA:  BTFSS  03.2
02DB:  GOTO   2E2
02DC:  MOVF   3F,W
02DD:  SUBWF  43,W
02DE:  BTFSS  03.2
02DF:  GOTO   2E2
02E0:  MOVF   3E,W
02E1:  SUBWF  42,W
02E2:  BTFSS  03.0
02E3:  GOTO   2F3
02E4:  MOVF   3E,W
02E5:  SUBWF  42,F
02E6:  MOVF   3F,W
02E7:  BTFSS  03.0
02E8:  INCFSZ 3F,W
02E9:  SUBWF  43,F
02EA:  MOVF   40,W
02EB:  BTFSS  03.0
02EC:  INCFSZ 40,W
02ED:  SUBWF  44,F
02EE:  MOVF   41,W
02EF:  BTFSS  03.0
02F0:  INCFSZ 41,W
02F1:  SUBWF  45,F
02F2:  BSF    03.0
02F3:  RLF    77,F
02F4:  RLF    78,F
02F5:  RLF    79,F
02F6:  RLF    7A,F
02F7:  DECFSZ 46,F
02F8:  GOTO   2CB
02F9:  MOVF   42,W
02FA:  MOVWF  00
02FB:  INCF   04,F
02FC:  MOVF   43,W
02FD:  MOVWF  00
02FE:  INCF   04,F
02FF:  MOVF   44,W
0300:  MOVWF  00
0301:  INCF   04,F
0302:  MOVF   45,W
0303:  MOVWF  00
0304:  RETURN
0305:  MOVF   04,W
0306:  MOVWF  32
0307:  MOVF   31,W
0308:  MOVWF  34
0309:  BTFSC  03.2
030A:  GOTO   324
030B:  MOVF   30,W
030C:  MOVWF  3D
030D:  MOVF   2F,W
030E:  MOVWF  3C
030F:  MOVF   2E,W
0310:  MOVWF  3B
0311:  MOVF   2D,W
0312:  MOVWF  3A
0313:  CLRF   41
0314:  CLRF   40
0315:  MOVLW  20
0316:  MOVWF  3F
0317:  MOVLW  82
0318:  MOVWF  3E
0319:  CALL   0F4
031A:  MOVF   7A,W
031B:  MOVWF  30
031C:  MOVF   79,W
031D:  MOVWF  2F
031E:  MOVF   78,W
031F:  MOVWF  2E
0320:  MOVF   77,W
0321:  MOVWF  2D
0322:  DECFSZ 34,F
0323:  GOTO   30B
0324:  MOVF   30,W
0325:  MOVWF  3D
0326:  MOVF   2F,W
0327:  MOVWF  3C
0328:  MOVF   2E,W
0329:  MOVWF  3B
032A:  MOVF   2D,W
032B:  MOVWF  3A
032C:  MOVF   3A,W
032D:  SUBLW  B6
032E:  MOVWF  3A
032F:  CLRF   7A
0330:  MOVF   3B,W
0331:  MOVWF  3E
0332:  BSF    3B.7
0333:  BCF    03.0
0334:  RRF    3B,F
0335:  RRF    3C,F
0336:  RRF    3D,F
0337:  RRF    7A,F
0338:  RRF    79,F
0339:  RRF    78,F
033A:  RRF    77,F
033B:  DECFSZ 3A,F
033C:  GOTO   333
033D:  BTFSS  3E.7
033E:  GOTO   34A
033F:  COMF   77,F
0340:  COMF   78,F
0341:  COMF   79,F
0342:  COMF   7A,F
0343:  INCF   77,F
0344:  BTFSC  03.2
0345:  INCF   78,F
0346:  BTFSC  03.2
0347:  INCF   79,F
0348:  BTFSC  03.2
0349:  INCF   7A,F
034A:  MOVF   7A,W
034B:  MOVWF  30
034C:  MOVF   79,W
034D:  MOVWF  2F
034E:  MOVF   78,W
034F:  MOVWF  2E
0350:  MOVF   77,W
0351:  MOVWF  2D
0352:  BTFSS  30.7
0353:  GOTO   361
0354:  DECF   32,F
0355:  BSF    32.5
0356:  COMF   2D,F
0357:  COMF   2E,F
0358:  COMF   2F,F
0359:  COMF   30,F
035A:  INCF   2D,F
035B:  BTFSC  03.2
035C:  INCF   2E,F
035D:  BTFSC  03.2
035E:  INCF   2F,F
035F:  BTFSC  03.2
0360:  INCF   30,F
0361:  MOVLW  3B
0362:  MOVWF  39
0363:  MOVLW  9A
0364:  MOVWF  38
0365:  MOVLW  CA
0366:  MOVWF  37
0367:  CLRF   36
0368:  MOVLW  0A
0369:  MOVWF  34
036A:  MOVF   31,W
036B:  BTFSC  03.2
036C:  INCF   32,F
036D:  BSF    03.1
036E:  MOVLW  2D
036F:  MOVWF  04
0370:  BCF    03.7
0371:  MOVF   30,W
0372:  MOVWF  3D
0373:  MOVF   2F,W
0374:  MOVWF  3C
0375:  MOVF   2E,W
0376:  MOVWF  3B
0377:  MOVF   2D,W
0378:  MOVWF  3A
0379:  MOVF   39,W
037A:  MOVWF  41
037B:  MOVF   38,W
037C:  MOVWF  40
037D:  MOVF   37,W
037E:  MOVWF  3F
037F:  MOVF   36,W
0380:  MOVWF  3E
0381:  CALL   2B6
0382:  MOVF   78,W
0383:  MOVF   77,F
0384:  BTFSS  03.2
0385:  GOTO   399
0386:  INCF   31,W
0387:  SUBWF  34,W
0388:  BTFSC  03.2
0389:  GOTO   399
038A:  MOVF   32,W
038B:  BTFSC  03.2
038C:  GOTO   39B
038D:  ANDLW  0F
038E:  SUBWF  34,W
038F:  BTFSC  03.2
0390:  GOTO   393
0391:  BTFSC  03.0
0392:  GOTO   3CB
0393:  BTFSC  32.7
0394:  GOTO   3CB
0395:  BTFSC  32.6
0396:  GOTO   39B
0397:  MOVLW  20
0398:  GOTO   3C7
0399:  MOVLW  20
039A:  ANDWF  32,F
039B:  BTFSS  32.5
039C:  GOTO   3A9
039D:  BCF    32.5
039E:  MOVF   31,W
039F:  BTFSS  03.2
03A0:  DECF   32,F
03A1:  MOVF   77,W
03A2:  MOVWF  32
03A3:  MOVLW  2D
03A4:  MOVWF  3A
03A5:  CALL   233
03A6:  MOVF   32,W
03A7:  MOVWF  77
03A8:  CLRF   32
03A9:  MOVF   31,W
03AA:  SUBWF  34,W
03AB:  BTFSS  03.2
03AC:  GOTO   3B7
03AD:  MOVF   77,W
03AE:  MOVWF  32
03AF:  MOVLW  2E
03B0:  MOVWF  3A
03B1:  CALL   233
03B2:  MOVF   32,W
03B3:  MOVWF  77
03B4:  MOVLW  20
03B5:  ANDWF  32,F
03B6:  MOVLW  00
03B7:  MOVLW  30
03B8:  BTFSS  32.5
03B9:  GOTO   3C7
03BA:  BCF    32.5
03BB:  MOVF   31,W
03BC:  BTFSS  03.2
03BD:  DECF   32,F
03BE:  MOVF   77,W
03BF:  MOVWF  32
03C0:  MOVLW  2D
03C1:  MOVWF  3A
03C2:  CALL   233
03C3:  MOVF   32,W
03C4:  MOVWF  77
03C5:  CLRF   32
03C6:  MOVLW  30
03C7:  ADDWF  77,F
03C8:  MOVF   77,W
03C9:  MOVWF  3A
03CA:  CALL   233
03CB:  BCF    03.1
03CC:  MOVF   39,W
03CD:  MOVWF  3D
03CE:  MOVF   38,W
03CF:  MOVWF  3C
03D0:  MOVF   37,W
03D1:  MOVWF  3B
03D2:  MOVF   36,W
03D3:  MOVWF  3A
03D4:  CLRF   41
03D5:  CLRF   40
03D6:  CLRF   3F
03D7:  MOVLW  0A
03D8:  MOVWF  3E
03D9:  CALL   2B6
03DA:  MOVF   7A,W
03DB:  MOVWF  39
03DC:  MOVF   79,W
03DD:  MOVWF  38
03DE:  MOVF   78,W
03DF:  MOVWF  37
03E0:  MOVF   77,W
03E1:  MOVWF  36
03E2:  DECFSZ 34,F
03E3:  GOTO   36D
03E4:  RETURN
03E5:  MOVF   0B,W
03E6:  MOVWF  29
03E7:  BCF    0B.7
03E8:  BSF    03.5
03E9:  BSF    03.6
03EA:  BSF    0C.7
03EB:  BSF    0C.0
03EC:  NOP
03ED:  NOP
03EE:  BCF    03.5
03EF:  BCF    03.6
03F0:  BTFSC  29.7
03F1:  BSF    0B.7
03F2:  BSF    03.6
03F3:  MOVF   0C,W
03F4:  ANDLW  7F
03F5:  BTFSC  03.2
03F6:  GOTO   439
03F7:  BCF    03.6
03F8:  MOVWF  29
03F9:  BSF    03.6
03FA:  MOVF   0D,W
03FB:  BCF    03.6
03FC:  MOVWF  2A
03FD:  BSF    03.6
03FE:  MOVF   0F,W
03FF:  BCF    03.6
0400:  MOVWF  2B
0401:  MOVF   29,W
0402:  MOVWF  3A
0403:  CALL   233
0404:  MOVF   2A,W
0405:  BSF    03.6
0406:  MOVWF  0D
0407:  BCF    03.6
0408:  MOVF   2B,W
0409:  BSF    03.6
040A:  MOVWF  0F
040B:  BCF    03.6
040C:  MOVF   0B,W
040D:  MOVWF  2C
040E:  BCF    0B.7
040F:  BSF    03.5
0410:  BSF    03.6
0411:  BSF    0C.7
0412:  BSF    0C.0
0413:  NOP
0414:  NOP
0415:  BCF    03.5
0416:  BCF    03.6
0417:  BTFSC  2C.7
0418:  BSF    0B.7
0419:  BSF    03.6
041A:  RLF    0C,W
041B:  RLF    0E,W
041C:  ANDLW  7F
041D:  BTFSC  03.2
041E:  GOTO   439
041F:  BCF    03.6
0420:  MOVWF  29
0421:  BSF    03.6
0422:  MOVF   0D,W
0423:  BCF    03.6
0424:  MOVWF  2A
0425:  BSF    03.6
0426:  MOVF   0F,W
0427:  BCF    03.6
0428:  MOVWF  2B
0429:  MOVF   29,W
042A:  MOVWF  3A
042B:  CALL   233
042C:  MOVF   2A,W
042D:  BSF    03.6
042E:  MOVWF  0D
042F:  BCF    03.6
0430:  MOVF   2B,W
0431:  BSF    03.6
0432:  MOVWF  0F
0433:  INCF   0D,F
0434:  BTFSC  03.2
0435:  INCF   0F,F
0436:  BCF    03.6
0437:  GOTO   3E5
0438:  BSF    03.6
0439:  BCF    03.6
043A:  RETURN
....................  
.................... #list 
....................  
.................... #device adc = 10 
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT  
.................... #use delay (clock=4000000) 
*
0018:  MOVLW  3B
0019:  MOVWF  04
001A:  BCF    03.7
001B:  MOVF   00,W
001C:  BTFSC  03.2
001D:  GOTO   02C
001E:  MOVLW  01
001F:  MOVWF  78
0020:  CLRF   77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 78,F
0024:  GOTO   020
0025:  MOVLW  4A
0026:  MOVWF  77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  GOTO   02A
002A:  DECFSZ 00,F
002B:  GOTO   01E
002C:  RETURN
.................... #use fast_io(a) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0045:  MOVLW  0F
0046:  BSF    03.5
0047:  ANDWF  06,W
0048:  IORLW  F0
0049:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004A:  BCF    03.5
004B:  BSF    06.2
....................    delay_cycles(1); 
004C:  NOP
....................    lcd_output_enable(1); 
004D:  BSF    06.0
....................    delay_cycles(1); 
004E:  NOP
....................    high = lcd_read_nibble(); 
004F:  CALL   039
0050:  MOVF   78,W
0051:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
0052:  BCF    06.0
....................    delay_cycles(1); 
0053:  NOP
....................    lcd_output_enable(1); 
0054:  BSF    06.0
....................    delay_us(1); 
0055:  NOP
....................    low = lcd_read_nibble(); 
0056:  CALL   039
0057:  MOVF   78,W
0058:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
0059:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005A:  MOVLW  0F
005B:  BSF    03.5
005C:  ANDWF  06,W
005D:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005E:  BCF    03.5
005F:  SWAPF  42,W
0060:  MOVWF  77
0061:  MOVLW  F0
0062:  ANDWF  77,F
0063:  MOVF   77,W
0064:  IORWF  41,W
0065:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0039:  MOVF   06,W
003A:  MOVWF  77
003B:  SWAPF  06,W
003C:  ANDLW  0F
003D:  MOVWF  78
....................   #endif 
003E:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002D:  SWAPF  42,W
002E:  ANDLW  F0
002F:  MOVWF  77
0030:  MOVLW  0F
0031:  ANDWF  06,W
0032:  IORWF  77,W
0033:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0034:  NOP
....................    lcd_output_enable(1); 
0035:  BSF    06.0
....................    delay_us(2); 
0036:  GOTO   037
....................    lcd_output_enable(0); 
0037:  BCF    06.0
0038:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003F:  BSF    03.5
0040:  BCF    06.0
....................    lcd_rs_tris(); 
0041:  BCF    06.1
....................    lcd_rw_tris(); 
0042:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0043:  BCF    03.5
0044:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0066:  MOVF   78,W
0067:  MOVWF  41
0068:  BTFSC  41.7
0069:  GOTO   045
....................    lcd_output_rs(address); 
006A:  BTFSS  3F.0
006B:  BCF    06.1
006C:  BTFSC  3F.0
006D:  BSF    06.1
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_rw(0); 
006F:  BCF    06.2
....................    delay_cycles(1); 
0070:  NOP
....................    lcd_output_enable(0); 
0071:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0072:  SWAPF  40,W
0073:  MOVWF  41
0074:  MOVLW  0F
0075:  ANDWF  41,F
0076:  MOVF   41,W
0077:  MOVWF  42
0078:  CALL   02D
....................    lcd_send_nibble(n & 0xf); 
0079:  MOVF   40,W
007A:  ANDLW  0F
007B:  MOVWF  41
007C:  MOVWF  42
007D:  CALL   02D
007E:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007F:  MOVLW  28
0080:  MOVWF  2A
0081:  MOVLW  0C
0082:  MOVWF  2B
0083:  MOVLW  01
0084:  MOVWF  2C
0085:  MOVLW  06
0086:  MOVWF  2D
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0087:  BCF    06.0
....................    lcd_output_rs(0); 
0088:  BCF    06.1
....................    lcd_output_rw(0); 
0089:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008A:  MOVLW  0F
008B:  BSF    03.5
008C:  ANDWF  06,W
008D:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
008E:  BCF    06.0
....................    lcd_rs_tris(); 
008F:  BCF    06.1
....................    lcd_rw_tris(); 
0090:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0091:  MOVLW  0F
0092:  BCF    03.5
0093:  MOVWF  3B
0094:  CALL   018
....................    for(i=1;i<=3;++i) 
0095:  MOVLW  01
0096:  MOVWF  29
0097:  MOVF   29,W
0098:  SUBLW  03
0099:  BTFSS  03.0
009A:  GOTO   0A3
....................    { 
....................        lcd_send_nibble(3); 
009B:  MOVLW  03
009C:  MOVWF  42
009D:  CALL   02D
....................        delay_ms(5); 
009E:  MOVLW  05
009F:  MOVWF  3B
00A0:  CALL   018
00A1:  INCF   29,F
00A2:  GOTO   097
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A3:  MOVLW  02
00A4:  MOVWF  42
00A5:  CALL   02D
....................    delay_ms(5); 
00A6:  MOVLW  05
00A7:  MOVWF  3B
00A8:  CALL   018
....................    for(i=0;i<=3;++i) 
00A9:  CLRF   29
00AA:  MOVF   29,W
00AB:  SUBLW  03
00AC:  BTFSS  03.0
00AD:  GOTO   0BA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AE:  MOVLW  2A
00AF:  ADDWF  29,W
00B0:  MOVWF  04
00B1:  BCF    03.7
00B2:  MOVF   00,W
00B3:  MOVWF  2E
00B4:  CLRF   3F
00B5:  MOVF   2E,W
00B6:  MOVWF  40
00B7:  CALL   03F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B8:  INCF   29,F
00B9:  GOTO   0AA
00BA:  BCF    0A.3
00BB:  BCF    0A.4
00BC:  GOTO   464 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00BD:  DECFSZ 3C,W
00BE:  GOTO   0C0
00BF:  GOTO   0C3
....................       address=LCD_LINE_TWO; 
00C0:  MOVLW  40
00C1:  MOVWF  3D
00C2:  GOTO   0C4
....................    else 
....................       address=0; 
00C3:  CLRF   3D
....................       
....................    address+=x-1; 
00C4:  MOVLW  01
00C5:  SUBWF  3B,W
00C6:  ADDWF  3D,F
....................    lcd_send_byte(0,0x80|address); 
00C7:  MOVF   3D,W
00C8:  IORLW  80
00C9:  MOVWF  3E
00CA:  CLRF   3F
00CB:  MOVF   3E,W
00CC:  MOVWF  40
00CD:  CALL   03F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CE:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
0233:  MOVF   3A,W
0234:  XORLW  07
0235:  BTFSC  03.2
0236:  GOTO   241
0237:  XORLW  0B
0238:  BTFSC  03.2
0239:  GOTO   246
023A:  XORLW  06
023B:  BTFSC  03.2
023C:  GOTO   24E
023D:  XORLW  02
023E:  BTFSC  03.2
023F:  GOTO   254
0240:  GOTO   259
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0241:  MOVLW  01
0242:  MOVWF  3B
0243:  MOVWF  3C
0244:  CALL   0BD
0245:  GOTO   25E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0246:  CLRF   3F
0247:  MOVLW  01
0248:  MOVWF  40
0249:  CALL   03F
....................                      delay_ms(2); 
024A:  MOVLW  02
024B:  MOVWF  3B
024C:  CALL   018
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
024D:  GOTO   25E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
024E:  MOVLW  01
024F:  MOVWF  3B
0250:  MOVLW  02
0251:  MOVWF  3C
0252:  CALL   0BD
0253:  GOTO   25E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0254:  CLRF   3F
0255:  MOVLW  10
0256:  MOVWF  40
0257:  CALL   03F
0258:  GOTO   25E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0259:  MOVLW  01
025A:  MOVWF  3F
025B:  MOVF   3A,W
025C:  MOVWF  40
025D:  CALL   03F
....................      #endif 
....................    } 
025E:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main(){ 
*
043B:  MOVF   03,W
043C:  ANDLW  1F
043D:  MOVWF  03
043E:  BSF    03.5
043F:  BSF    1F.0
0440:  BSF    1F.1
0441:  BSF    1F.2
0442:  BCF    1F.3
0443:  BCF    03.7
....................     
....................    setup_psp(PSP_DISABLED); setup_timer_1(T1_DISABLED); setup_timer_2(T2_DISABLED,0,1); setup_CCP1(CCP_OFF); setup_CCP2(CCP_OFF);  
0444:  BCF    09.4
0445:  BCF    03.5
0446:  CLRF   10
0447:  MOVLW  00
0448:  MOVWF  78
0449:  MOVWF  12
044A:  MOVLW  00
044B:  BSF    03.5
044C:  MOVWF  12
044D:  MOVLW  F0
044E:  BCF    03.5
044F:  ANDWF  17,F
0450:  ANDWF  1D,F
....................     
....................    set_tris_a(0x03); 
0451:  MOVLW  03
0452:  BSF    03.5
0453:  MOVWF  05
....................    set_tris_b(0x00); 
0454:  MOVLW  00
0455:  MOVWF  06
....................     
....................    setup_adc(adc_clock_div_32); 
0456:  BCF    03.5
0457:  BCF    1F.6
0458:  BSF    1F.7
0459:  BSF    03.5
045A:  BSF    1F.7
045B:  BCF    03.5
045C:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN3);    // RA0-RA1-RA3 ANALOG 
045D:  BSF    03.5
045E:  BCF    1F.0
045F:  BCF    1F.1
0460:  BSF    1F.2
0461:  BCF    1F.3
....................     
....................    lcd_init(); 
0462:  BCF    03.5
0463:  GOTO   07F
....................     
....................    while(1){ 
....................     
....................       set_adc_channel(0); 
0464:  MOVLW  00
0465:  MOVWF  78
0466:  MOVF   1F,W
0467:  ANDLW  C7
0468:  IORWF  78,W
0469:  MOVWF  1F
....................       delay_ms (10); 
046A:  MOVLW  0A
046B:  MOVWF  3B
046C:  CALL   018
....................       int16 adc_oku1 = read_adc(); 
046D:  BSF    1F.2
046E:  BTFSC  1F.2
046F:  GOTO   46E
0470:  BSF    03.5
0471:  MOVF   1E,W
0472:  BCF    03.5
0473:  MOVWF  21
0474:  MOVF   1E,W
0475:  MOVWF  22
....................        
....................       set_adc_channel(1); 
0476:  MOVLW  08
0477:  MOVWF  78
0478:  MOVF   1F,W
0479:  ANDLW  C7
047A:  IORWF  78,W
047B:  MOVWF  1F
....................       delay_ms (10); 
047C:  MOVLW  0A
047D:  MOVWF  3B
047E:  CALL   018
....................       int16 adc_oku2 = read_adc(); 
....................        
....................       signed int16 sicaklik = adc_oku1 - adc_oku2; 
047F:  BSF    1F.2
0480:  BTFSC  1F.2
0481:  GOTO   480
0482:  BSF    03.5
0483:  MOVF   1E,W
0484:  BCF    03.5
0485:  MOVWF  23
0486:  MOVF   1E,W
0487:  MOVWF  24
0488:  MOVF   23,W
0489:  SUBWF  21,W
048A:  MOVWF  77
048B:  MOVF   22,W
048C:  MOVWF  7A
048D:  MOVF   24,W
048E:  BTFSS  03.0
048F:  INCFSZ 24,W
0490:  SUBWF  7A,F
0491:  MOVF   77,W
0492:  MOVWF  25
0493:  MOVF   7A,W
0494:  MOVWF  26
....................        
....................       lcd_gotoxy(1,1); 
0495:  MOVLW  01
0496:  MOVWF  3B
0497:  MOVWF  3C
0498:  CALL   0BD
....................       printf(lcd_putc,"temp= %2.1f",sicaklik*5.*100./1023.); // afficher la temperature 
0499:  MOVF   26,W
049A:  MOVWF  2A
049B:  MOVF   25,W
049C:  MOVWF  29
049D:  CALL   0CF
049E:  MOVF   7A,W
049F:  MOVWF  3D
04A0:  MOVF   79,W
04A1:  MOVWF  3C
04A2:  MOVF   78,W
04A3:  MOVWF  3B
04A4:  MOVF   77,W
04A5:  MOVWF  3A
04A6:  CLRF   41
04A7:  CLRF   40
04A8:  MOVLW  20
04A9:  MOVWF  3F
04AA:  MOVLW  81
04AB:  MOVWF  3E
04AC:  CALL   0F4
04AD:  MOVF   7A,W
04AE:  MOVWF  2C
04AF:  MOVF   79,W
04B0:  MOVWF  2B
04B1:  MOVF   78,W
04B2:  MOVWF  2A
04B3:  MOVF   77,W
04B4:  MOVWF  29
04B5:  MOVF   7A,W
04B6:  MOVWF  3D
04B7:  MOVF   79,W
04B8:  MOVWF  3C
04B9:  MOVF   78,W
04BA:  MOVWF  3B
04BB:  MOVF   77,W
04BC:  MOVWF  3A
04BD:  CLRF   41
04BE:  CLRF   40
04BF:  MOVLW  48
04C0:  MOVWF  3F
04C1:  MOVLW  85
04C2:  MOVWF  3E
04C3:  CALL   0F4
04C4:  MOVF   7A,W
04C5:  MOVWF  2C
04C6:  MOVF   79,W
04C7:  MOVWF  2B
04C8:  MOVF   78,W
04C9:  MOVWF  2A
04CA:  MOVF   77,W
04CB:  MOVWF  29
04CC:  MOVF   7A,W
04CD:  MOVWF  30
04CE:  MOVF   79,W
04CF:  MOVWF  2F
04D0:  MOVF   78,W
04D1:  MOVWF  2E
04D2:  MOVF   77,W
04D3:  MOVWF  2D
04D4:  CLRF   34
04D5:  MOVLW  C0
04D6:  MOVWF  33
04D7:  MOVLW  7F
04D8:  MOVWF  32
04D9:  MOVLW  88
04DA:  MOVWF  31
04DB:  CALL   169
04DC:  MOVF   7A,W
04DD:  MOVWF  2C
04DE:  MOVF   79,W
04DF:  MOVWF  2B
04E0:  MOVF   78,W
04E1:  MOVWF  2A
04E2:  MOVF   77,W
04E3:  MOVWF  29
04E4:  MOVLW  04
04E5:  BSF    03.6
04E6:  MOVWF  0D
04E7:  MOVLW  00
04E8:  MOVWF  0F
04E9:  BCF    03.0
04EA:  MOVLW  06
04EB:  BCF    03.6
04EC:  MOVWF  2D
04ED:  CALL   25F
04EE:  MOVLW  01
04EF:  MOVWF  04
04F0:  MOVF   2C,W
04F1:  MOVWF  30
04F2:  MOVF   2B,W
04F3:  MOVWF  2F
04F4:  MOVF   2A,W
04F5:  MOVWF  2E
04F6:  MOVF   29,W
04F7:  MOVWF  2D
04F8:  MOVLW  01
04F9:  MOVWF  31
04FA:  CALL   305
....................       printf(lcd_putc,"C   "); 
04FB:  MOVLW  0A
04FC:  BSF    03.6
04FD:  MOVWF  0D
04FE:  MOVLW  00
04FF:  MOVWF  0F
0500:  BCF    03.6
0501:  CALL   3E5
....................        
....................       signed int16 voltage = adc_oku1 - adc_oku2; 
0502:  MOVF   23,W
0503:  SUBWF  21,W
0504:  MOVWF  77
0505:  MOVF   22,W
0506:  MOVWF  7A
0507:  MOVF   24,W
0508:  BTFSS  03.0
0509:  INCFSZ 24,W
050A:  SUBWF  7A,F
050B:  MOVF   77,W
050C:  MOVWF  27
050D:  MOVF   7A,W
050E:  MOVWF  28
....................        
....................       lcd_gotoxy(1,2); 
050F:  MOVLW  01
0510:  MOVWF  3B
0511:  MOVLW  02
0512:  MOVWF  3C
0513:  CALL   0BD
....................       printf(lcd_putc,"voltage= %2.1f",voltage*5.*10./1023.); // afficher la temperature 
0514:  MOVF   28,W
0515:  MOVWF  2A
0516:  MOVF   27,W
0517:  MOVWF  29
0518:  CALL   0CF
0519:  MOVF   7A,W
051A:  MOVWF  3D
051B:  MOVF   79,W
051C:  MOVWF  3C
051D:  MOVF   78,W
051E:  MOVWF  3B
051F:  MOVF   77,W
0520:  MOVWF  3A
0521:  CLRF   41
0522:  CLRF   40
0523:  MOVLW  20
0524:  MOVWF  3F
0525:  MOVLW  81
0526:  MOVWF  3E
0527:  CALL   0F4
0528:  MOVF   7A,W
0529:  MOVWF  2C
052A:  MOVF   79,W
052B:  MOVWF  2B
052C:  MOVF   78,W
052D:  MOVWF  2A
052E:  MOVF   77,W
052F:  MOVWF  29
0530:  MOVF   7A,W
0531:  MOVWF  3D
0532:  MOVF   79,W
0533:  MOVWF  3C
0534:  MOVF   78,W
0535:  MOVWF  3B
0536:  MOVF   77,W
0537:  MOVWF  3A
0538:  CLRF   41
0539:  CLRF   40
053A:  MOVLW  20
053B:  MOVWF  3F
053C:  MOVLW  82
053D:  MOVWF  3E
053E:  CALL   0F4
053F:  MOVF   7A,W
0540:  MOVWF  2C
0541:  MOVF   79,W
0542:  MOVWF  2B
0543:  MOVF   78,W
0544:  MOVWF  2A
0545:  MOVF   77,W
0546:  MOVWF  29
0547:  MOVF   7A,W
0548:  MOVWF  30
0549:  MOVF   79,W
054A:  MOVWF  2F
054B:  MOVF   78,W
054C:  MOVWF  2E
054D:  MOVF   77,W
054E:  MOVWF  2D
054F:  CLRF   34
0550:  MOVLW  C0
0551:  MOVWF  33
0552:  MOVLW  7F
0553:  MOVWF  32
0554:  MOVLW  88
0555:  MOVWF  31
0556:  CALL   169
0557:  MOVF   7A,W
0558:  MOVWF  2C
0559:  MOVF   79,W
055A:  MOVWF  2B
055B:  MOVF   78,W
055C:  MOVWF  2A
055D:  MOVF   77,W
055E:  MOVWF  29
055F:  MOVLW  0D
0560:  BSF    03.6
0561:  MOVWF  0D
0562:  MOVLW  00
0563:  MOVWF  0F
0564:  BCF    03.0
0565:  MOVLW  09
0566:  BCF    03.6
0567:  MOVWF  2D
0568:  CALL   25F
0569:  MOVLW  01
056A:  MOVWF  04
056B:  MOVF   2C,W
056C:  MOVWF  30
056D:  MOVF   2B,W
056E:  MOVWF  2F
056F:  MOVF   2A,W
0570:  MOVWF  2E
0571:  MOVF   29,W
0572:  MOVWF  2D
0573:  MOVLW  01
0574:  MOVWF  31
0575:  CALL   305
....................       printf(lcd_putc,"V   "); 
0576:  MOVLW  15
0577:  BSF    03.6
0578:  MOVWF  0D
0579:  MOVLW  00
057A:  MOVWF  0F
057B:  BCF    03.6
057C:  CALL   3E5
057D:  GOTO   464
....................    } 
....................  
.................... } 
057E:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
