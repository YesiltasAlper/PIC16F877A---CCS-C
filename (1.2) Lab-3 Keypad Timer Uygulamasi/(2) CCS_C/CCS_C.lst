CCS PCM C Compiler, Version 5.015, 5967               04-Kas-21 17:26

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(3) Lab-3\(2) CCS_C\CCS_C.lst

               ROM used:   1047 words (13%)
                           Largest free fragment is 2048
               RAM used:   24 (7%) at main() level
                           42 (11%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   386
0003:  NOP
.................... #include <16f877.h>    
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 0C,24
0005:  DATA 45,22
0006:  DATA 45,23
0007:  DATA 3A,00
0008:  DATA 53,1D
0009:  DATA 00,01
000A:  DATA C4,2A
000B:  DATA D2,2A
000C:  DATA 4D,1D
000D:  DATA 00,01
000E:  DATA CC,21
000F:  DATA C4,2F
0010:  DATA C1,25
0011:  DATA D4,24
0012:  DATA 46,00
0013:  DATA A0,29
0014:  DATA C1,2C
0015:  DATA C9,2C
0016:  DATA 4F,29
0017:  DATA 2E,00
0018:  DATA D3,20
0019:  DATA D9,24
001A:  DATA CD,2F
001B:  DATA CF,25
001C:  DATA 2E,00
001D:  DATA 0C,24
001E:  DATA 45,22
001F:  DATA 45,23
0020:  DATA 3A,00
0021:  DATA 53,1D
0022:  DATA 00,01
0023:  DATA C4,2A
0024:  DATA D2,2A
0025:  DATA 4D,1D
0026:  DATA 00,01
0027:  DATA D2,22
0028:  DATA D3,22
0029:  DATA D4,2F
002A:  DATA CF,25
002B:  DATA 2E,00
002C:  DATA CC,21
002D:  DATA C4,2F
002E:  DATA C1,25
002F:  DATA D4,24
0030:  DATA 46,00
*
0114:  MOVF   0B,W
0115:  MOVWF  32
0116:  BCF    0B.7
0117:  BSF    03.5
0118:  BSF    03.6
0119:  BSF    0C.7
011A:  BSF    0C.0
011B:  NOP
011C:  NOP
011D:  BCF    03.5
011E:  BCF    03.6
011F:  BTFSC  32.7
0120:  BSF    0B.7
0121:  BSF    03.6
0122:  MOVF   0C,W
0123:  ANDLW  7F
0124:  BTFSC  03.2
0125:  GOTO   168
0126:  BCF    03.6
0127:  MOVWF  32
0128:  BSF    03.6
0129:  MOVF   0D,W
012A:  BCF    03.6
012B:  MOVWF  33
012C:  BSF    03.6
012D:  MOVF   0F,W
012E:  BCF    03.6
012F:  MOVWF  34
0130:  MOVF   32,W
0131:  MOVWF  3B
0132:  CALL   0E8
0133:  MOVF   33,W
0134:  BSF    03.6
0135:  MOVWF  0D
0136:  BCF    03.6
0137:  MOVF   34,W
0138:  BSF    03.6
0139:  MOVWF  0F
013A:  BCF    03.6
013B:  MOVF   0B,W
013C:  MOVWF  35
013D:  BCF    0B.7
013E:  BSF    03.5
013F:  BSF    03.6
0140:  BSF    0C.7
0141:  BSF    0C.0
0142:  NOP
0143:  NOP
0144:  BCF    03.5
0145:  BCF    03.6
0146:  BTFSC  35.7
0147:  BSF    0B.7
0148:  BSF    03.6
0149:  RLF    0C,W
014A:  RLF    0E,W
014B:  ANDLW  7F
014C:  BTFSC  03.2
014D:  GOTO   168
014E:  BCF    03.6
014F:  MOVWF  32
0150:  BSF    03.6
0151:  MOVF   0D,W
0152:  BCF    03.6
0153:  MOVWF  33
0154:  BSF    03.6
0155:  MOVF   0F,W
0156:  BCF    03.6
0157:  MOVWF  34
0158:  MOVF   32,W
0159:  MOVWF  3B
015A:  CALL   0E8
015B:  MOVF   33,W
015C:  BSF    03.6
015D:  MOVWF  0D
015E:  BCF    03.6
015F:  MOVF   34,W
0160:  BSF    03.6
0161:  MOVWF  0F
0162:  INCF   0D,F
0163:  BTFSC  03.2
0164:  INCF   0F,F
0165:  BCF    03.6
0166:  GOTO   114
0167:  BSF    03.6
0168:  BCF    03.6
0169:  RETURN
*
020D:  CLRF   3A
020E:  MOVF   04,W
020F:  MOVWF  39
0210:  BCF    3A.0
0211:  BTFSC  03.7
0212:  BSF    3A.0
0213:  SWAPF  33,W
0214:  IORLW  F0
0215:  MOVWF  35
0216:  ADDWF  35,F
0217:  ADDLW  E2
0218:  MOVWF  36
0219:  ADDLW  32
021A:  MOVWF  38
021B:  MOVF   33,W
021C:  ANDLW  0F
021D:  ADDWF  36,F
021E:  ADDWF  36,F
021F:  ADDWF  38,F
0220:  ADDLW  E9
0221:  MOVWF  37
0222:  ADDWF  37,F
0223:  ADDWF  37,F
0224:  SWAPF  32,W
0225:  ANDLW  0F
0226:  ADDWF  37,F
0227:  ADDWF  38,F
0228:  RLF    37,F
0229:  RLF    38,F
022A:  COMF   38,F
022B:  RLF    38,F
022C:  MOVF   32,W
022D:  ANDLW  0F
022E:  ADDWF  38,F
022F:  RLF    35,F
0230:  MOVLW  07
0231:  MOVWF  34
0232:  MOVLW  0A
0233:  ADDWF  38,F
0234:  DECF   37,F
0235:  BTFSS  03.0
0236:  GOTO   233
0237:  ADDWF  37,F
0238:  DECF   36,F
0239:  BTFSS  03.0
023A:  GOTO   237
023B:  ADDWF  36,F
023C:  DECF   35,F
023D:  BTFSS  03.0
023E:  GOTO   23B
023F:  ADDWF  35,F
0240:  DECF   34,F
0241:  BTFSS  03.0
0242:  GOTO   23F
0243:  MOVLW  34
0244:  MOVWF  04
0245:  BCF    03.7
0246:  MOVLW  07
0247:  ANDWF  39,W
0248:  BCF    39.6
0249:  ADDWF  04,F
024A:  MOVLW  38
024B:  SUBWF  04,W
024C:  BTFSC  03.2
024D:  BSF    39.6
024E:  MOVF   00,W
024F:  MOVWF  77
0250:  BTFSS  03.2
0251:  GOTO   25A
0252:  BTFSC  39.6
0253:  GOTO   25A
0254:  BTFSC  39.4
0255:  GOTO   26C
0256:  BTFSC  39.3
0257:  GOTO   25A
0258:  MOVLW  20
0259:  GOTO   25D
025A:  BSF    39.3
025B:  BCF    39.4
025C:  MOVLW  30
025D:  ADDWF  77,F
025E:  CLRF   33
025F:  MOVF   04,W
0260:  MOVWF  32
0261:  BCF    33.0
0262:  BTFSC  03.7
0263:  BSF    33.0
0264:  MOVF   77,W
0265:  MOVWF  3B
0266:  CALL   0E8
0267:  MOVF   32,W
0268:  MOVWF  04
0269:  BCF    03.7
026A:  BTFSC  33.0
026B:  BSF    03.7
026C:  INCF   04,F
026D:  BTFSS  39.6
026E:  GOTO   24A
026F:  RETURN
*
0301:  MOVLW  10
0302:  MOVWF  36
0303:  CLRF   77
0304:  CLRF   7A
0305:  RRF    33,F
0306:  RRF    32,F
0307:  BTFSS  03.0
0308:  GOTO   30F
0309:  MOVF   34,W
030A:  ADDWF  77,F
030B:  BTFSC  03.0
030C:  INCF   7A,F
030D:  MOVF   35,W
030E:  ADDWF  7A,F
030F:  RRF    7A,F
0310:  RRF    77,F
0311:  RRF    79,F
0312:  RRF    78,F
0313:  DECFSZ 36,F
0314:  GOTO   305
0315:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT     
.................... #use delay (clock = 4000000) 
*
0031:  MOVLW  3C
0032:  MOVWF  04
0033:  BCF    03.7
0034:  MOVF   00,W
0035:  BTFSC  03.2
0036:  GOTO   045
0037:  MOVLW  01
0038:  MOVWF  78
0039:  CLRF   77
003A:  DECFSZ 77,F
003B:  GOTO   03A
003C:  DECFSZ 78,F
003D:  GOTO   039
003E:  MOVLW  4A
003F:  MOVWF  77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  GOTO   043
0043:  DECFSZ 00,F
0044:  GOTO   037
0045:  RETURN
....................  
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
005E:  MOVLW  0F
005F:  BSF    03.5
0060:  ANDWF  06,W
0061:  IORLW  F0
0062:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0063:  BCF    03.5
0064:  BSF    06.2
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_enable(1); 
0066:  BSF    06.0
....................    delay_cycles(1); 
0067:  NOP
....................    high = lcd_read_nibble(); 
0068:  CALL   052
0069:  MOVF   78,W
006A:  MOVWF  43
....................        
....................    lcd_output_enable(0); 
006B:  BCF    06.0
....................    delay_cycles(1); 
006C:  NOP
....................    lcd_output_enable(1); 
006D:  BSF    06.0
....................    delay_us(1); 
006E:  NOP
....................    low = lcd_read_nibble(); 
006F:  CALL   052
0070:  MOVF   78,W
0071:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
0072:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0073:  MOVLW  0F
0074:  BSF    03.5
0075:  ANDWF  06,W
0076:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0077:  BCF    03.5
0078:  SWAPF  43,W
0079:  MOVWF  77
007A:  MOVLW  F0
007B:  ANDWF  77,F
007C:  MOVF   77,W
007D:  IORWF  42,W
007E:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0052:  MOVF   06,W
0053:  MOVWF  77
0054:  SWAPF  06,W
0055:  ANDLW  0F
0056:  MOVWF  78
....................   #endif 
0057:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0046:  SWAPF  43,W
0047:  ANDLW  F0
0048:  MOVWF  77
0049:  MOVLW  0F
004A:  ANDWF  06,W
004B:  IORWF  77,W
004C:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
004D:  NOP
....................    lcd_output_enable(1); 
004E:  BSF    06.0
....................    delay_us(2); 
004F:  GOTO   050
....................    lcd_output_enable(0); 
0050:  BCF    06.0
0051:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0058:  BSF    03.5
0059:  BCF    06.0
....................    lcd_rs_tris(); 
005A:  BCF    06.1
....................    lcd_rw_tris(); 
005B:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
005C:  BCF    03.5
005D:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
007F:  MOVF   78,W
0080:  MOVWF  42
0081:  BTFSC  42.7
0082:  GOTO   05E
....................    lcd_output_rs(address); 
0083:  BTFSS  40.0
0084:  BCF    06.1
0085:  BTFSC  40.0
0086:  BSF    06.1
....................    delay_cycles(1); 
0087:  NOP
....................    lcd_output_rw(0); 
0088:  BCF    06.2
....................    delay_cycles(1); 
0089:  NOP
....................    lcd_output_enable(0); 
008A:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
008B:  SWAPF  41,W
008C:  MOVWF  42
008D:  MOVLW  0F
008E:  ANDWF  42,F
008F:  MOVF   42,W
0090:  MOVWF  43
0091:  CALL   046
....................    lcd_send_nibble(n & 0xf); 
0092:  MOVF   41,W
0093:  ANDLW  0F
0094:  MOVWF  42
0095:  MOVWF  43
0096:  CALL   046
0097:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0098:  MOVLW  28
0099:  MOVWF  33
009A:  MOVLW  0C
009B:  MOVWF  34
009C:  MOVLW  01
009D:  MOVWF  35
009E:  MOVLW  06
009F:  MOVWF  36
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00A0:  BCF    06.0
....................    lcd_output_rs(0); 
00A1:  BCF    06.1
....................    lcd_output_rw(0); 
00A2:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A3:  MOVLW  0F
00A4:  BSF    03.5
00A5:  ANDWF  06,W
00A6:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00A7:  BCF    06.0
....................    lcd_rs_tris(); 
00A8:  BCF    06.1
....................    lcd_rw_tris(); 
00A9:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00AA:  MOVLW  0F
00AB:  BCF    03.5
00AC:  MOVWF  3C
00AD:  CALL   031
....................    for(i=1;i<=3;++i) 
00AE:  MOVLW  01
00AF:  MOVWF  32
00B0:  MOVF   32,W
00B1:  SUBLW  03
00B2:  BTFSS  03.0
00B3:  GOTO   0BC
....................    { 
....................        lcd_send_nibble(3); 
00B4:  MOVLW  03
00B5:  MOVWF  43
00B6:  CALL   046
....................        delay_ms(5); 
00B7:  MOVLW  05
00B8:  MOVWF  3C
00B9:  CALL   031
00BA:  INCF   32,F
00BB:  GOTO   0B0
....................    } 
....................     
....................    lcd_send_nibble(2); 
00BC:  MOVLW  02
00BD:  MOVWF  43
00BE:  CALL   046
....................    delay_ms(5); 
00BF:  MOVLW  05
00C0:  MOVWF  3C
00C1:  CALL   031
....................    for(i=0;i<=3;++i) 
00C2:  CLRF   32
00C3:  MOVF   32,W
00C4:  SUBLW  03
00C5:  BTFSS  03.0
00C6:  GOTO   0D3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C7:  MOVLW  33
00C8:  ADDWF  32,W
00C9:  MOVWF  04
00CA:  BCF    03.7
00CB:  MOVF   00,W
00CC:  MOVWF  37
00CD:  CLRF   40
00CE:  MOVF   37,W
00CF:  MOVWF  41
00D0:  CALL   058
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D1:  INCF   32,F
00D2:  GOTO   0C3
00D3:  BCF    0A.3
00D4:  BCF    0A.4
00D5:  GOTO   3BD (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00D6:  DECFSZ 3D,W
00D7:  GOTO   0D9
00D8:  GOTO   0DC
....................       address=LCD_LINE_TWO; 
00D9:  MOVLW  40
00DA:  MOVWF  3E
00DB:  GOTO   0DD
....................    else 
....................       address=0; 
00DC:  CLRF   3E
....................       
....................    address+=x-1; 
00DD:  MOVLW  01
00DE:  SUBWF  3C,W
00DF:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address); 
00E0:  MOVF   3E,W
00E1:  IORLW  80
00E2:  MOVWF  3F
00E3:  CLRF   40
00E4:  MOVF   3F,W
00E5:  MOVWF  41
00E6:  CALL   058
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E7:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00E8:  MOVF   3B,W
00E9:  XORLW  07
00EA:  BTFSC  03.2
00EB:  GOTO   0F6
00EC:  XORLW  0B
00ED:  BTFSC  03.2
00EE:  GOTO   0FB
00EF:  XORLW  06
00F0:  BTFSC  03.2
00F1:  GOTO   103
00F2:  XORLW  02
00F3:  BTFSC  03.2
00F4:  GOTO   109
00F5:  GOTO   10E
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F6:  MOVLW  01
00F7:  MOVWF  3C
00F8:  MOVWF  3D
00F9:  CALL   0D6
00FA:  GOTO   113
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00FB:  CLRF   40
00FC:  MOVLW  01
00FD:  MOVWF  41
00FE:  CALL   058
....................                      delay_ms(2); 
00FF:  MOVLW  02
0100:  MOVWF  3C
0101:  CALL   031
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0102:  GOTO   113
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0103:  MOVLW  01
0104:  MOVWF  3C
0105:  MOVLW  02
0106:  MOVWF  3D
0107:  CALL   0D6
0108:  GOTO   113
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0109:  CLRF   40
010A:  MOVLW  10
010B:  MOVWF  41
010C:  CALL   058
010D:  GOTO   113
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
010E:  MOVLW  01
010F:  MOVWF  40
0110:  MOVF   3B,W
0111:  MOVWF  41
0112:  CALL   058
....................      #endif 
....................    } 
0113:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... int16 hedef = 0,binler = 0,yuzler = 0,onlar = 0, birler = 0,tus_degeri = 20, t = 0, x=0,sayac = 0; 
....................  
....................  
.................... int tus_oku(); 
.................... void calis(); 
.................... void temizle(); 
.................... void surehesap(); 
.................... void yaz(); 
....................  
....................  
.................... void main(){ 
*
0386:  MOVF   03,W
0387:  ANDLW  1F
0388:  MOVWF  03
0389:  CLRF   21
038A:  CLRF   20
038B:  CLRF   23
038C:  CLRF   22
038D:  CLRF   25
038E:  CLRF   24
038F:  CLRF   27
0390:  CLRF   26
0391:  CLRF   29
0392:  CLRF   28
0393:  CLRF   2B
0394:  MOVLW  14
0395:  MOVWF  2A
0396:  CLRF   2D
0397:  CLRF   2C
0398:  CLRF   2F
0399:  CLRF   2E
039A:  CLRF   31
039B:  CLRF   30
039C:  BSF    03.5
039D:  BSF    1F.0
039E:  BSF    1F.1
039F:  BSF    1F.2
03A0:  BCF    1F.3
03A1:  BCF    03.7
....................    setup_psp(PSP_DISABLED); setup_timer_1(T1_DISABLED); setup_timer_2(T2_DISABLED,0,1); setup_adc_ports(NO_ANALOGS); setup_adc(ADC_OFF); setup_CCP1(CCP_OFF); setup_CCP2(CCP_OFF); 
03A2:  BCF    09.4
03A3:  BCF    03.5
03A4:  CLRF   10
03A5:  MOVLW  00
03A6:  MOVWF  78
03A7:  MOVWF  12
03A8:  MOVLW  00
03A9:  BSF    03.5
03AA:  MOVWF  12
03AB:  BSF    1F.0
03AC:  BSF    1F.1
03AD:  BSF    1F.2
03AE:  BCF    1F.3
03AF:  BCF    03.5
03B0:  BCF    1F.0
03B1:  MOVLW  F0
03B2:  ANDWF  17,F
03B3:  ANDWF  1D,F
....................     
....................    set_tris_b(0x00); 
03B4:  MOVLW  00
03B5:  BSF    03.5
03B6:  MOVWF  06
....................    set_tris_c(0x00); 
03B7:  MOVWF  07
....................    set_tris_d(0x0F); 
03B8:  MOVLW  0F
03B9:  MOVWF  08
....................     
....................    output_c(0x00); 
03BA:  BCF    03.5
03BB:  CLRF   07
....................     
....................    lcd_init(); 
03BC:  GOTO   098
....................    lcd_putc("\fHEDEF:"); 
03BD:  MOVLW  04
03BE:  BSF    03.6
03BF:  MOVWF  0D
03C0:  MOVLW  00
03C1:  MOVWF  0F
03C2:  BCF    03.6
03C3:  CALL   114
....................    lcd_gotoxy(11,1); 
03C4:  MOVLW  0B
03C5:  MOVWF  3C
03C6:  MOVLW  01
03C7:  MOVWF  3D
03C8:  CALL   0D6
....................    lcd_putc("S:"); 
03C9:  MOVLW  08
03CA:  BSF    03.6
03CB:  MOVWF  0D
03CC:  MOVLW  00
03CD:  MOVWF  0F
03CE:  BCF    03.6
03CF:  CALL   114
....................    lcd_gotoxy(1,2); 
03D0:  MOVLW  01
03D1:  MOVWF  3C
03D2:  MOVLW  02
03D3:  MOVWF  3D
03D4:  CALL   0D6
....................    lcd_putc("DURUM:"); 
03D5:  MOVLW  0A
03D6:  BSF    03.6
03D7:  MOVWF  0D
03D8:  MOVLW  00
03D9:  MOVWF  0F
03DA:  BCF    03.6
03DB:  CALL   114
....................    lcd_gotoxy(7,2); 
03DC:  MOVLW  07
03DD:  MOVWF  3C
03DE:  MOVLW  02
03DF:  MOVWF  3D
03E0:  CALL   0D6
....................    lcd_putc("LCD_AKTIF"); 
03E1:  MOVLW  0E
03E2:  BSF    03.6
03E3:  MOVWF  0D
03E4:  MOVLW  00
03E5:  MOVWF  0F
03E6:  BCF    03.6
03E7:  CALL   114
....................   
....................    while(1){ 
....................     
....................    t = tus_oku(); 
03E8:  GOTO   16A
03E9:  CLRF   2D
03EA:  MOVF   78,W
03EB:  MOVWF  2C
....................     
....................    if(t != 20){ 
03EC:  MOVF   2C,W
03ED:  SUBLW  14
03EE:  BTFSS  03.2
03EF:  GOTO   3F3
03F0:  MOVF   2D,F
03F1:  BTFSC  03.2
03F2:  GOTO   415
....................           
....................       if(t == 10){      // 4 basamakli sayi girildikten sonra tamam icin '*' tusuna basilir 
03F3:  MOVF   2C,W
03F4:  SUBLW  0A
03F5:  BTFSS  03.2
03F6:  GOTO   3FA
03F7:  MOVF   2D,F
03F8:  BTFSC  03.2
....................          calis(); 
03F9:  GOTO   270
....................       } 
....................           
....................       if(t == 11){      // Temizle icin islem bittikten sonra '#' tusuna basilir 
03FA:  MOVF   2C,W
03FB:  SUBLW  0B
03FC:  BTFSS  03.2
03FD:  GOTO   401
03FE:  MOVF   2D,F
03FF:  BTFSC  03.2
....................          temizle(); 
0400:  GOTO   2AC
....................       } 
....................           
....................       if(t < 10){ 
0401:  MOVF   2D,F
0402:  BTFSS  03.2
0403:  GOTO   408
0404:  MOVF   2C,W
0405:  SUBLW  09
0406:  BTFSC  03.0
....................          surehesap(); 
0407:  GOTO   316
....................       } 
....................          
....................       if(x > 0){ 
0408:  MOVF   2E,F
0409:  BTFSS  03.2
040A:  GOTO   40D
040B:  MOVF   2F,F
040C:  BTFSS  03.2
....................          yaz(); 
040D:  GOTO   374
....................       } 
....................       delay_ms(500); 
040E:  MOVLW  02
040F:  MOVWF  32
0410:  MOVLW  FA
0411:  MOVWF  3C
0412:  CALL   031
0413:  DECFSZ 32,F
0414:  GOTO   410
....................    } 
0415:  GOTO   3E8
....................     
....................    } 
.................... } 
....................  
0416:  SLEEP
....................  
.................... int tus_oku(){ 
....................  
....................    tus_degeri = 20; 
*
016A:  CLRF   2B
016B:  MOVLW  14
016C:  MOVWF  2A
....................     
....................    output_high(pin_d4); 
016D:  BSF    08.4
....................    if(input(pin_d0))  {delay_ms(20);  tus_degeri = 1;  x++; while(input(pin_d0));} 
016E:  BTFSS  08.0
016F:  GOTO   17B
0170:  MOVLW  14
0171:  MOVWF  3C
0172:  CALL   031
0173:  CLRF   2B
0174:  MOVLW  01
0175:  MOVWF  2A
0176:  INCF   2E,F
0177:  BTFSC  03.2
0178:  INCF   2F,F
0179:  BTFSC  08.0
017A:  GOTO   179
....................    if(input(pin_d1))  {delay_ms(20);  tus_degeri = 4;  x++; while(input(pin_d1));} 
017B:  BTFSS  08.1
017C:  GOTO   188
017D:  MOVLW  14
017E:  MOVWF  3C
017F:  CALL   031
0180:  CLRF   2B
0181:  MOVLW  04
0182:  MOVWF  2A
0183:  INCF   2E,F
0184:  BTFSC  03.2
0185:  INCF   2F,F
0186:  BTFSC  08.1
0187:  GOTO   186
....................    if(input(pin_d2))  {delay_ms(20);  tus_degeri = 7;  x++; while(input(pin_d2));} 
0188:  BTFSS  08.2
0189:  GOTO   195
018A:  MOVLW  14
018B:  MOVWF  3C
018C:  CALL   031
018D:  CLRF   2B
018E:  MOVLW  07
018F:  MOVWF  2A
0190:  INCF   2E,F
0191:  BTFSC  03.2
0192:  INCF   2F,F
0193:  BTFSC  08.2
0194:  GOTO   193
....................    if(input(pin_d3))  {delay_ms(20);  tus_degeri = 10;     while(input(pin_d3));} 
0195:  BTFSS  08.3
0196:  GOTO   19F
0197:  MOVLW  14
0198:  MOVWF  3C
0199:  CALL   031
019A:  CLRF   2B
019B:  MOVLW  0A
019C:  MOVWF  2A
019D:  BTFSC  08.3
019E:  GOTO   19D
....................    output_low(pin_d4); 
019F:  BCF    08.4
....................     
....................    output_high(pin_d5); 
01A0:  BSF    08.5
....................    if(input(pin_d0))  {delay_ms(20);  tus_degeri = 2;  x++; while(input(pin_d0));} 
01A1:  BTFSS  08.0
01A2:  GOTO   1AE
01A3:  MOVLW  14
01A4:  MOVWF  3C
01A5:  CALL   031
01A6:  CLRF   2B
01A7:  MOVLW  02
01A8:  MOVWF  2A
01A9:  INCF   2E,F
01AA:  BTFSC  03.2
01AB:  INCF   2F,F
01AC:  BTFSC  08.0
01AD:  GOTO   1AC
....................    if(input(pin_d1))  {delay_ms(20);  tus_degeri = 5;  x++; while(input(pin_d1));} 
01AE:  BTFSS  08.1
01AF:  GOTO   1BB
01B0:  MOVLW  14
01B1:  MOVWF  3C
01B2:  CALL   031
01B3:  CLRF   2B
01B4:  MOVLW  05
01B5:  MOVWF  2A
01B6:  INCF   2E,F
01B7:  BTFSC  03.2
01B8:  INCF   2F,F
01B9:  BTFSC  08.1
01BA:  GOTO   1B9
....................    if(input(pin_d2))  {delay_ms(20);  tus_degeri = 8;  x++; while(input(pin_d2));} 
01BB:  BTFSS  08.2
01BC:  GOTO   1C8
01BD:  MOVLW  14
01BE:  MOVWF  3C
01BF:  CALL   031
01C0:  CLRF   2B
01C1:  MOVLW  08
01C2:  MOVWF  2A
01C3:  INCF   2E,F
01C4:  BTFSC  03.2
01C5:  INCF   2F,F
01C6:  BTFSC  08.2
01C7:  GOTO   1C6
....................    if(input(pin_d3))  {delay_ms(20);  tus_degeri = 0;  x++; while(input(pin_d3));} 
01C8:  BTFSS  08.3
01C9:  GOTO   1D4
01CA:  MOVLW  14
01CB:  MOVWF  3C
01CC:  CALL   031
01CD:  CLRF   2B
01CE:  CLRF   2A
01CF:  INCF   2E,F
01D0:  BTFSC  03.2
01D1:  INCF   2F,F
01D2:  BTFSC  08.3
01D3:  GOTO   1D2
....................    output_low(pin_d5); 
01D4:  BCF    08.5
....................     
....................    output_high(pin_d6); 
01D5:  BSF    08.6
....................    if(input(pin_d0))  {delay_ms(20);  tus_degeri = 3;  x++; while(input(pin_d0));} 
01D6:  BTFSS  08.0
01D7:  GOTO   1E3
01D8:  MOVLW  14
01D9:  MOVWF  3C
01DA:  CALL   031
01DB:  CLRF   2B
01DC:  MOVLW  03
01DD:  MOVWF  2A
01DE:  INCF   2E,F
01DF:  BTFSC  03.2
01E0:  INCF   2F,F
01E1:  BTFSC  08.0
01E2:  GOTO   1E1
....................    if(input(pin_d1))  {delay_ms(20);  tus_degeri = 6;  x++; while(input(pin_d1));} 
01E3:  BTFSS  08.1
01E4:  GOTO   1F0
01E5:  MOVLW  14
01E6:  MOVWF  3C
01E7:  CALL   031
01E8:  CLRF   2B
01E9:  MOVLW  06
01EA:  MOVWF  2A
01EB:  INCF   2E,F
01EC:  BTFSC  03.2
01ED:  INCF   2F,F
01EE:  BTFSC  08.1
01EF:  GOTO   1EE
....................    if(input(pin_d2))  {delay_ms(20);  tus_degeri = 9;  x++; while(input(pin_d2));} 
01F0:  BTFSS  08.2
01F1:  GOTO   1FD
01F2:  MOVLW  14
01F3:  MOVWF  3C
01F4:  CALL   031
01F5:  CLRF   2B
01F6:  MOVLW  09
01F7:  MOVWF  2A
01F8:  INCF   2E,F
01F9:  BTFSC  03.2
01FA:  INCF   2F,F
01FB:  BTFSC  08.2
01FC:  GOTO   1FB
....................    if(input(pin_d3))  {delay_ms(20);  tus_degeri = 11;      while(input(pin_d3));} 
01FD:  BTFSS  08.3
01FE:  GOTO   207
01FF:  MOVLW  14
0200:  MOVWF  3C
0201:  CALL   031
0202:  CLRF   2B
0203:  MOVLW  0B
0204:  MOVWF  2A
0205:  BTFSC  08.3
0206:  GOTO   205
....................    output_low(pin_d6); 
0207:  BCF    08.6
....................     
....................    return tus_degeri; 
0208:  MOVF   2A,W
0209:  MOVWF  78
020A:  BCF    0A.3
020B:  BCF    0A.4
020C:  GOTO   3E9 (RETURN)
.................... } 
....................  
....................  
.................... void calis(){ 
....................     
....................    lcd_gotoxy(7,2); 
*
0270:  MOVLW  07
0271:  MOVWF  3C
0272:  MOVLW  02
0273:  MOVWF  3D
0274:  CALL   0D6
....................    lcd_putc(" SAYIYOR."); 
0275:  MOVLW  13
0276:  BSF    03.6
0277:  MOVWF  0D
0278:  MOVLW  00
0279:  MOVWF  0F
027A:  BCF    03.6
027B:  CALL   114
....................    output_high(pin_c0); 
027C:  BSF    07.0
....................     
....................       for(sayac = 0; sayac <= hedef; sayac++){ 
027D:  CLRF   31
027E:  CLRF   30
027F:  MOVF   31,W
0280:  SUBWF  21,W
0281:  BTFSS  03.0
0282:  GOTO   29C
0283:  BTFSS  03.2
0284:  GOTO   289
0285:  MOVF   30,W
0286:  SUBWF  20,W
0287:  BTFSS  03.0
0288:  GOTO   29C
....................        
....................          lcd_gotoxy(13,1); 
0289:  MOVLW  0D
028A:  MOVWF  3C
028B:  MOVLW  01
028C:  MOVWF  3D
028D:  CALL   0D6
....................          printf(lcd_putc,"%lu",sayac); 
028E:  MOVLW  10
028F:  MOVWF  04
0290:  MOVF   31,W
0291:  MOVWF  33
0292:  MOVF   30,W
0293:  MOVWF  32
0294:  CALL   20D
....................          delay_ms(1); 
0295:  MOVLW  01
0296:  MOVWF  3C
0297:  CALL   031
0298:  INCF   30,F
0299:  BTFSC  03.2
029A:  INCF   31,F
029B:  GOTO   27F
....................       } 
....................        
....................       output_low(pin_c0); 
029C:  BCF    07.0
....................       lcd_gotoxy(7,2); 
029D:  MOVLW  07
029E:  MOVWF  3C
029F:  MOVLW  02
02A0:  MOVWF  3D
02A1:  CALL   0D6
....................       lcd_putc("SAYIM_OK."); 
02A2:  MOVLW  18
02A3:  BSF    03.6
02A4:  MOVWF  0D
02A5:  MOVLW  00
02A6:  MOVWF  0F
02A7:  BCF    03.6
02A8:  CALL   114
02A9:  BCF    0A.3
02AA:  BCF    0A.4
02AB:  GOTO   3FA (RETURN)
.................... } 
....................  
....................  
.................... void temizle(){ 
....................  
....................    x = 0; 
02AC:  CLRF   2F
02AD:  CLRF   2E
....................    t = 0; 
02AE:  CLRF   2D
02AF:  CLRF   2C
....................    sayac = 0; 
02B0:  CLRF   31
02B1:  CLRF   30
....................    hedef = 0; 
02B2:  CLRF   21
02B3:  CLRF   20
....................    binler = 0; 
02B4:  CLRF   23
02B5:  CLRF   22
....................    yuzler = 0; 
02B6:  CLRF   25
02B7:  CLRF   24
....................    onlar = 0; 
02B8:  CLRF   27
02B9:  CLRF   26
....................    birler = 0; 
02BA:  CLRF   29
02BB:  CLRF   28
....................    lcd_gotoxy(1,1); 
02BC:  MOVLW  01
02BD:  MOVWF  3C
02BE:  MOVWF  3D
02BF:  CALL   0D6
....................    lcd_putc("\fHEDEF:"); 
02C0:  MOVLW  1D
02C1:  BSF    03.6
02C2:  MOVWF  0D
02C3:  MOVLW  00
02C4:  MOVWF  0F
02C5:  BCF    03.6
02C6:  CALL   114
....................    lcd_gotoxy(11,1); 
02C7:  MOVLW  0B
02C8:  MOVWF  3C
02C9:  MOVLW  01
02CA:  MOVWF  3D
02CB:  CALL   0D6
....................    lcd_putc("S:"); 
02CC:  MOVLW  21
02CD:  BSF    03.6
02CE:  MOVWF  0D
02CF:  MOVLW  00
02D0:  MOVWF  0F
02D1:  BCF    03.6
02D2:  CALL   114
....................    lcd_gotoxy(1,2); 
02D3:  MOVLW  01
02D4:  MOVWF  3C
02D5:  MOVLW  02
02D6:  MOVWF  3D
02D7:  CALL   0D6
....................    lcd_putc("DURUM:"); 
02D8:  MOVLW  23
02D9:  BSF    03.6
02DA:  MOVWF  0D
02DB:  MOVLW  00
02DC:  MOVWF  0F
02DD:  BCF    03.6
02DE:  CALL   114
....................    lcd_gotoxy(7,2); 
02DF:  MOVLW  07
02E0:  MOVWF  3C
02E1:  MOVLW  02
02E2:  MOVWF  3D
02E3:  CALL   0D6
....................    lcd_putc("RESET_OK."); 
02E4:  MOVLW  27
02E5:  BSF    03.6
02E6:  MOVWF  0D
02E7:  MOVLW  00
02E8:  MOVWF  0F
02E9:  BCF    03.6
02EA:  CALL   114
....................    delay_ms(1000); 
02EB:  MOVLW  04
02EC:  MOVWF  32
02ED:  MOVLW  FA
02EE:  MOVWF  3C
02EF:  CALL   031
02F0:  DECFSZ 32,F
02F1:  GOTO   2ED
....................    lcd_gotoxy(7,2); 
02F2:  MOVLW  07
02F3:  MOVWF  3C
02F4:  MOVLW  02
02F5:  MOVWF  3D
02F6:  CALL   0D6
....................    lcd_putc("LCD_AKTIF"); 
02F7:  MOVLW  2C
02F8:  BSF    03.6
02F9:  MOVWF  0D
02FA:  MOVLW  00
02FB:  MOVWF  0F
02FC:  BCF    03.6
02FD:  CALL   114
02FE:  BCF    0A.3
02FF:  BCF    0A.4
0300:  GOTO   401 (RETURN)
.................... } 
....................  
....................  
.................... void surehesap(){ 
....................     
....................     if(x == 1){ 
*
0316:  DECFSZ 2E,W
0317:  GOTO   328
0318:  MOVF   2F,F
0319:  BTFSS  03.2
031A:  GOTO   328
....................     binler = t * 1000; 
031B:  MOVF   2D,W
031C:  MOVWF  33
031D:  MOVF   2C,W
031E:  MOVWF  32
031F:  MOVLW  03
0320:  MOVWF  35
0321:  MOVLW  E8
0322:  MOVWF  34
0323:  CALL   301
0324:  MOVF   79,W
0325:  MOVWF  23
0326:  MOVF   78,W
0327:  MOVWF  22
....................     } 
....................                 
....................     if(x == 2){ 
0328:  MOVF   2E,W
0329:  SUBLW  02
032A:  BTFSS  03.2
032B:  GOTO   33B
032C:  MOVF   2F,F
032D:  BTFSS  03.2
032E:  GOTO   33B
....................     yuzler = t * 100; 
032F:  MOVF   2D,W
0330:  MOVWF  33
0331:  MOVF   2C,W
0332:  MOVWF  32
0333:  CLRF   35
0334:  MOVLW  64
0335:  MOVWF  34
0336:  CALL   301
0337:  MOVF   79,W
0338:  MOVWF  25
0339:  MOVF   78,W
033A:  MOVWF  24
....................     } 
....................                   
....................     if(x == 3){ 
033B:  MOVF   2E,W
033C:  SUBLW  03
033D:  BTFSS  03.2
033E:  GOTO   34E
033F:  MOVF   2F,F
0340:  BTFSS  03.2
0341:  GOTO   34E
....................     onlar = t * 10; 
0342:  MOVF   2D,W
0343:  MOVWF  33
0344:  MOVF   2C,W
0345:  MOVWF  32
0346:  CLRF   35
0347:  MOVLW  0A
0348:  MOVWF  34
0349:  CALL   301
034A:  MOVF   79,W
034B:  MOVWF  27
034C:  MOVF   78,W
034D:  MOVWF  26
....................     } 
....................                
....................     if(x == 4){ 
034E:  MOVF   2E,W
034F:  SUBLW  04
0350:  BTFSS  03.2
0351:  GOTO   359
0352:  MOVF   2F,F
0353:  BTFSS  03.2
0354:  GOTO   359
....................     birler = t * 1; 
0355:  MOVF   2D,W
0356:  MOVWF  29
0357:  MOVF   2C,W
0358:  MOVWF  28
....................     } 
....................      
....................     hedef = binler + yuzler + onlar + birler; 
0359:  MOVF   24,W
035A:  ADDWF  22,W
035B:  MOVWF  32
035C:  MOVF   23,W
035D:  MOVWF  33
035E:  MOVF   25,W
035F:  BTFSC  03.0
0360:  INCFSZ 25,W
0361:  ADDWF  33,F
0362:  MOVF   26,W
0363:  ADDWF  32,F
0364:  MOVF   27,W
0365:  BTFSC  03.0
0366:  INCFSZ 27,W
0367:  ADDWF  33,F
0368:  MOVF   28,W
0369:  ADDWF  32,W
036A:  MOVWF  20
036B:  MOVF   33,W
036C:  MOVWF  21
036D:  MOVF   29,W
036E:  BTFSC  03.0
036F:  INCFSZ 29,W
0370:  ADDWF  21,F
0371:  BCF    0A.3
0372:  BCF    0A.4
0373:  GOTO   408 (RETURN)
....................   
.................... } 
....................  
....................  
....................  
.................... void yaz(){ 
....................        
....................      lcd_gotoxy(7,1); 
0374:  MOVLW  07
0375:  MOVWF  3C
0376:  MOVLW  01
0377:  MOVWF  3D
0378:  CALL   0D6
....................      printf(lcd_putc,"%lu",hedef); 
0379:  MOVLW  10
037A:  MOVWF  04
037B:  MOVF   21,W
037C:  MOVWF  33
037D:  MOVF   20,W
037E:  MOVWF  32
037F:  CALL   20D
....................      delay_ms(50); 
0380:  MOVLW  32
0381:  MOVWF  3C
0382:  CALL   031
0383:  BCF    0A.3
0384:  BCF    0A.4
0385:  GOTO   40E (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
