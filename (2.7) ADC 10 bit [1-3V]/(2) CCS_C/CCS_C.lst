CCS PCM C Compiler, Version 5.015, 5967               04-Kas-21 18:09

               Filename:   C:\Users\Admin\Desktop\CCS_Github_\(16) ADC_10bit_[1-3V]\(2) CCS_C\CCS_C.lst

               ROM used:   1366 words (17%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           37 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4B8
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 0C,22
0005:  DATA E9,33
0006:  DATA 69,3A
0007:  DATA BA,12
0008:  DATA EC,3A
0009:  DATA 00,00
000A:  DATA 0A,2B
000B:  DATA 6F,36
000C:  DATA F4,30
000D:  DATA 6A,1D
000E:  DATA 25,17
000F:  DATA 33,33
0010:  DATA 56,00
*
00B6:  MOVLW  8E
00B7:  MOVWF  77
00B8:  MOVF   27,W
00B9:  MOVWF  78
00BA:  MOVF   26,W
00BB:  MOVWF  79
00BC:  CLRF   7A
00BD:  MOVF   78,F
00BE:  BTFSS  03.2
00BF:  GOTO   0CA
00C0:  MOVF   79,W
00C1:  MOVWF  78
00C2:  CLRF   79
00C3:  MOVLW  08
00C4:  SUBWF  77,F
00C5:  MOVF   78,F
00C6:  BTFSS  03.2
00C7:  GOTO   0CA
00C8:  CLRF   77
00C9:  GOTO   0D2
00CA:  BCF    03.0
00CB:  BTFSC  78.7
00CC:  GOTO   0D1
00CD:  RLF    79,F
00CE:  RLF    78,F
00CF:  DECF   77,F
00D0:  GOTO   0CA
00D1:  BCF    78.7
00D2:  BCF    0A.3
00D3:  BCF    0A.4
00D4:  GOTO   4FB (RETURN)
00D5:  MOVF   33,W
00D6:  BTFSC  03.2
00D7:  GOTO   145
00D8:  MOVWF  3B
00D9:  MOVF   37,W
00DA:  BTFSC  03.2
00DB:  GOTO   145
00DC:  ADDWF  3B,F
00DD:  BTFSC  03.0
00DE:  GOTO   0E6
00DF:  MOVLW  7F
00E0:  SUBWF  3B,F
00E1:  BTFSS  03.0
00E2:  GOTO   145
00E3:  BTFSC  03.2
00E4:  GOTO   145
00E5:  GOTO   0EA
00E6:  MOVLW  81
00E7:  ADDWF  3B,F
00E8:  BTFSC  03.0
00E9:  GOTO   145
00EA:  MOVF   3B,W
00EB:  MOVWF  77
00EC:  CLRF   78
00ED:  CLRF   79
00EE:  CLRF   7A
00EF:  MOVF   34,W
00F0:  MOVWF  3F
00F1:  BSF    3F.7
00F2:  MOVF   35,W
00F3:  MOVWF  3E
00F4:  MOVF   36,W
00F5:  MOVWF  3D
00F6:  MOVLW  18
00F7:  MOVWF  3B
00F8:  CLRF   3C
00F9:  BTFSS  3D.0
00FA:  GOTO   113
00FB:  MOVF   3A,W
00FC:  ADDWF  7A,F
00FD:  BTFSS  03.0
00FE:  GOTO   105
00FF:  INCF   79,F
0100:  BTFSS  03.2
0101:  GOTO   105
0102:  INCF   78,F
0103:  BTFSC  03.2
0104:  BSF    3C.7
0105:  MOVF   39,W
0106:  ADDWF  79,F
0107:  BTFSS  03.0
0108:  GOTO   10C
0109:  INCF   78,F
010A:  BTFSC  03.2
010B:  BSF    3C.7
010C:  MOVF   38,W
010D:  MOVWF  35
010E:  BSF    35.7
010F:  MOVF   35,W
0110:  ADDWF  78,F
0111:  BTFSC  03.0
0112:  BSF    3C.7
0113:  RLF    3C,F
0114:  RRF    78,F
0115:  RRF    79,F
0116:  RRF    7A,F
0117:  RRF    3F,F
0118:  RRF    3E,F
0119:  RRF    3D,F
011A:  BCF    03.0
011B:  DECFSZ 3B,F
011C:  GOTO   0F8
011D:  MOVLW  01
011E:  ADDWF  77,F
011F:  BTFSC  03.0
0120:  GOTO   145
0121:  BTFSC  78.7
0122:  GOTO   12A
0123:  RLF    3F,F
0124:  RLF    7A,F
0125:  RLF    79,F
0126:  RLF    78,F
0127:  DECF   77,F
0128:  BTFSC  03.2
0129:  GOTO   145
012A:  BTFSS  3F.7
012B:  GOTO   13B
012C:  INCF   7A,F
012D:  BTFSS  03.2
012E:  GOTO   13B
012F:  INCF   79,F
0130:  BTFSS  03.2
0131:  GOTO   13B
0132:  INCF   78,F
0133:  BTFSS  03.2
0134:  GOTO   13B
0135:  RRF    78,F
0136:  RRF    79,F
0137:  RRF    7A,F
0138:  INCF   77,F
0139:  BTFSC  03.2
013A:  GOTO   145
013B:  MOVF   34,W
013C:  MOVWF  3C
013D:  MOVF   38,W
013E:  XORWF  3C,F
013F:  BTFSS  3C.7
0140:  GOTO   143
0141:  BSF    78.7
0142:  GOTO   149
0143:  BCF    78.7
0144:  GOTO   149
0145:  CLRF   77
0146:  CLRF   78
0147:  CLRF   79
0148:  CLRF   7A
0149:  RETURN
014A:  MOVLW  80
014B:  BTFSC  03.1
014C:  XORWF  2B,F
014D:  CLRF   30
014E:  CLRF   31
014F:  MOVF   27,W
0150:  MOVWF  2F
0151:  MOVF   2B,W
0152:  XORWF  2F,F
0153:  MOVF   26,W
0154:  BTFSC  03.2
0155:  GOTO   23A
0156:  MOVWF  2E
0157:  MOVWF  77
0158:  MOVF   2A,W
0159:  BTFSC  03.2
015A:  GOTO   243
015B:  SUBWF  2E,F
015C:  BTFSC  03.2
015D:  GOTO   1DF
015E:  BTFSS  03.0
015F:  GOTO   19D
0160:  MOVF   2B,W
0161:  MOVWF  34
0162:  BSF    34.7
0163:  MOVF   2C,W
0164:  MOVWF  33
0165:  MOVF   2D,W
0166:  MOVWF  32
0167:  CLRF   31
0168:  BCF    03.0
0169:  RRF    34,F
016A:  RRF    33,F
016B:  RRF    32,F
016C:  RRF    31,F
016D:  DECFSZ 2E,F
016E:  GOTO   167
016F:  BTFSS  2F.7
0170:  GOTO   174
0171:  BSF    30.0
0172:  GOTO   257
0173:  BCF    30.0
0174:  BCF    2E.0
0175:  BSF    30.4
0176:  MOVLW  29
0177:  MOVWF  04
0178:  BCF    03.7
0179:  GOTO   26C
017A:  BCF    30.4
017B:  BTFSC  2F.7
017C:  GOTO   187
017D:  BTFSS  2E.0
017E:  GOTO   192
017F:  RRF    34,F
0180:  RRF    33,F
0181:  RRF    32,F
0182:  RRF    31,F
0183:  INCF   77,F
0184:  BTFSC  03.2
0185:  GOTO   252
0186:  GOTO   192
0187:  BTFSC  34.7
0188:  GOTO   195
0189:  BCF    03.0
018A:  RLF    31,F
018B:  RLF    32,F
018C:  RLF    33,F
018D:  RLF    34,F
018E:  DECF   77,F
018F:  BTFSC  03.2
0190:  GOTO   252
0191:  GOTO   187
0192:  BSF    30.6
0193:  GOTO   1FF
0194:  BCF    30.6
0195:  MOVF   27,W
0196:  MOVWF  2F
0197:  BTFSS  2F.7
0198:  GOTO   19B
0199:  BSF    34.7
019A:  GOTO   24B
019B:  BCF    34.7
019C:  GOTO   24B
019D:  MOVF   2A,W
019E:  MOVWF  2E
019F:  MOVWF  77
01A0:  MOVF   26,W
01A1:  SUBWF  2E,F
01A2:  MOVF   27,W
01A3:  MOVWF  34
01A4:  BSF    34.7
01A5:  MOVF   28,W
01A6:  MOVWF  33
01A7:  MOVF   29,W
01A8:  MOVWF  32
01A9:  CLRF   31
01AA:  BCF    03.0
01AB:  RRF    34,F
01AC:  RRF    33,F
01AD:  RRF    32,F
01AE:  RRF    31,F
01AF:  DECFSZ 2E,F
01B0:  GOTO   1A9
01B1:  BTFSS  2F.7
01B2:  GOTO   1B6
01B3:  BSF    30.1
01B4:  GOTO   257
01B5:  BCF    30.1
01B6:  BCF    2E.0
01B7:  BSF    30.5
01B8:  MOVLW  2D
01B9:  MOVWF  04
01BA:  BCF    03.7
01BB:  GOTO   26C
01BC:  BCF    30.5
01BD:  BTFSC  2F.7
01BE:  GOTO   1C9
01BF:  BTFSS  2E.0
01C0:  GOTO   1D4
01C1:  RRF    34,F
01C2:  RRF    33,F
01C3:  RRF    32,F
01C4:  RRF    31,F
01C5:  INCF   77,F
01C6:  BTFSC  03.2
01C7:  GOTO   252
01C8:  GOTO   1D4
01C9:  BTFSC  34.7
01CA:  GOTO   1D7
01CB:  BCF    03.0
01CC:  RLF    31,F
01CD:  RLF    32,F
01CE:  RLF    33,F
01CF:  RLF    34,F
01D0:  DECF   77,F
01D1:  BTFSC  03.2
01D2:  GOTO   252
01D3:  GOTO   1C9
01D4:  BSF    30.7
01D5:  GOTO   1FF
01D6:  BCF    30.7
01D7:  MOVF   2B,W
01D8:  MOVWF  2F
01D9:  BTFSS  2F.7
01DA:  GOTO   1DD
01DB:  BSF    34.7
01DC:  GOTO   24B
01DD:  BCF    34.7
01DE:  GOTO   24B
01DF:  MOVF   2B,W
01E0:  MOVWF  34
01E1:  BSF    34.7
01E2:  MOVF   2C,W
01E3:  MOVWF  33
01E4:  MOVF   2D,W
01E5:  MOVWF  32
01E6:  BTFSS  2F.7
01E7:  GOTO   1EC
01E8:  BCF    34.7
01E9:  BSF    30.2
01EA:  GOTO   257
01EB:  BCF    30.2
01EC:  CLRF   31
01ED:  BCF    2E.0
01EE:  MOVLW  29
01EF:  MOVWF  04
01F0:  BCF    03.7
01F1:  GOTO   26C
01F2:  BTFSC  2F.7
01F3:  GOTO   215
01F4:  MOVF   27,W
01F5:  MOVWF  2F
01F6:  BTFSS  2E.0
01F7:  GOTO   1FF
01F8:  RRF    34,F
01F9:  RRF    33,F
01FA:  RRF    32,F
01FB:  RRF    31,F
01FC:  INCF   77,F
01FD:  BTFSC  03.2
01FE:  GOTO   252
01FF:  BTFSS  31.7
0200:  GOTO   210
0201:  INCF   32,F
0202:  BTFSS  03.2
0203:  GOTO   210
0204:  INCF   33,F
0205:  BTFSS  03.2
0206:  GOTO   210
0207:  INCF   34,F
0208:  BTFSS  03.2
0209:  GOTO   210
020A:  RRF    34,F
020B:  RRF    33,F
020C:  RRF    32,F
020D:  INCF   77,F
020E:  BTFSC  03.2
020F:  GOTO   252
0210:  BTFSC  30.6
0211:  GOTO   194
0212:  BTFSC  30.7
0213:  GOTO   1D6
0214:  GOTO   234
0215:  MOVLW  80
0216:  XORWF  34,F
0217:  BTFSS  34.7
0218:  GOTO   21D
0219:  GOTO   257
021A:  MOVF   2B,W
021B:  MOVWF  2F
021C:  GOTO   22A
021D:  MOVF   27,W
021E:  MOVWF  2F
021F:  MOVF   34,F
0220:  BTFSS  03.2
0221:  GOTO   22A
0222:  MOVF   33,F
0223:  BTFSS  03.2
0224:  GOTO   22A
0225:  MOVF   32,F
0226:  BTFSS  03.2
0227:  GOTO   22A
0228:  CLRF   77
0229:  GOTO   24B
022A:  BTFSC  34.7
022B:  GOTO   234
022C:  BCF    03.0
022D:  RLF    31,F
022E:  RLF    32,F
022F:  RLF    33,F
0230:  RLF    34,F
0231:  DECFSZ 77,F
0232:  GOTO   22A
0233:  GOTO   252
0234:  BTFSS  2F.7
0235:  GOTO   238
0236:  BSF    34.7
0237:  GOTO   24B
0238:  BCF    34.7
0239:  GOTO   24B
023A:  MOVF   2A,W
023B:  MOVWF  77
023C:  MOVF   2B,W
023D:  MOVWF  34
023E:  MOVF   2C,W
023F:  MOVWF  33
0240:  MOVF   2D,W
0241:  MOVWF  32
0242:  GOTO   24B
0243:  MOVF   26,W
0244:  MOVWF  77
0245:  MOVF   27,W
0246:  MOVWF  34
0247:  MOVF   28,W
0248:  MOVWF  33
0249:  MOVF   29,W
024A:  MOVWF  32
024B:  MOVF   34,W
024C:  MOVWF  78
024D:  MOVF   33,W
024E:  MOVWF  79
024F:  MOVF   32,W
0250:  MOVWF  7A
0251:  GOTO   28A
0252:  CLRF   77
0253:  CLRF   78
0254:  CLRF   79
0255:  CLRF   7A
0256:  GOTO   28A
0257:  CLRF   31
0258:  COMF   32,F
0259:  COMF   33,F
025A:  COMF   34,F
025B:  COMF   31,F
025C:  INCF   31,F
025D:  BTFSS  03.2
025E:  GOTO   265
025F:  INCF   32,F
0260:  BTFSS  03.2
0261:  GOTO   265
0262:  INCF   33,F
0263:  BTFSC  03.2
0264:  INCF   34,F
0265:  BTFSC  30.0
0266:  GOTO   173
0267:  BTFSC  30.1
0268:  GOTO   1B5
0269:  BTFSC  30.2
026A:  GOTO   1EB
026B:  GOTO   21A
026C:  MOVF   00,W
026D:  ADDWF  32,F
026E:  BTFSS  03.0
026F:  GOTO   276
0270:  INCF   33,F
0271:  BTFSS  03.2
0272:  GOTO   276
0273:  INCF   34,F
0274:  BTFSC  03.2
0275:  BSF    2E.0
0276:  DECF   04,F
0277:  MOVF   00,W
0278:  ADDWF  33,F
0279:  BTFSS  03.0
027A:  GOTO   27E
027B:  INCF   34,F
027C:  BTFSC  03.2
027D:  BSF    2E.0
027E:  DECF   04,F
027F:  MOVF   00,W
0280:  BTFSS  00.7
0281:  XORLW  80
0282:  ADDWF  34,F
0283:  BTFSC  03.0
0284:  BSF    2E.0
0285:  BTFSC  30.4
0286:  GOTO   17A
0287:  BTFSC  30.5
0288:  GOTO   1BC
0289:  GOTO   1F2
028A:  BCF    0A.3
028B:  BCF    0A.4
028C:  GOTO   51A (RETURN)
*
02CB:  MOVF   0B,W
02CC:  MOVWF  27
02CD:  BCF    0B.7
02CE:  BSF    03.5
02CF:  BSF    03.6
02D0:  BSF    0C.7
02D1:  BSF    0C.0
02D2:  NOP
02D3:  NOP
02D4:  BCF    03.5
02D5:  BCF    03.6
02D6:  BTFSC  27.7
02D7:  BSF    0B.7
02D8:  BTFSC  03.0
02D9:  GOTO   302
02DA:  BSF    03.6
02DB:  MOVF   0C,W
02DC:  ANDLW  7F
02DD:  BCF    03.6
02DE:  MOVWF  27
02DF:  BSF    03.6
02E0:  MOVF   0D,W
02E1:  BCF    03.6
02E2:  MOVWF  28
02E3:  BSF    03.6
02E4:  MOVF   0F,W
02E5:  BCF    03.6
02E6:  MOVWF  29
02E7:  MOVF   27,W
02E8:  MOVWF  33
02E9:  CALL   29F
02EA:  MOVF   28,W
02EB:  BSF    03.6
02EC:  MOVWF  0D
02ED:  BCF    03.6
02EE:  MOVF   29,W
02EF:  BSF    03.6
02F0:  MOVWF  0F
02F1:  BCF    03.6
02F2:  MOVF   0B,W
02F3:  MOVWF  2A
02F4:  BCF    0B.7
02F5:  BSF    03.5
02F6:  BSF    03.6
02F7:  BSF    0C.7
02F8:  BSF    0C.0
02F9:  NOP
02FA:  NOP
02FB:  BCF    03.5
02FC:  BCF    03.6
02FD:  BTFSC  2A.7
02FE:  BSF    0B.7
02FF:  DECFSZ 26,F
0300:  GOTO   302
0301:  GOTO   321
0302:  BSF    03.6
0303:  RLF    0C,W
0304:  RLF    0E,W
0305:  ANDLW  7F
0306:  BCF    03.6
0307:  MOVWF  27
0308:  BSF    03.6
0309:  MOVF   0D,W
030A:  BCF    03.6
030B:  MOVWF  28
030C:  BSF    03.6
030D:  MOVF   0F,W
030E:  BCF    03.6
030F:  MOVWF  29
0310:  MOVF   27,W
0311:  MOVWF  33
0312:  CALL   29F
0313:  MOVF   28,W
0314:  BSF    03.6
0315:  MOVWF  0D
0316:  BCF    03.6
0317:  MOVF   29,W
0318:  BSF    03.6
0319:  MOVWF  0F
031A:  INCF   0D,F
031B:  BTFSC  03.2
031C:  INCF   0F,F
031D:  BCF    03.0
031E:  BCF    03.6
031F:  DECFSZ 26,F
0320:  GOTO   2CB
0321:  RETURN
0322:  CLRF   2E
0323:  MOVF   04,W
0324:  MOVWF  2D
0325:  BCF    2E.0
0326:  BTFSC  03.7
0327:  BSF    2E.0
0328:  SWAPF  27,W
0329:  IORLW  F0
032A:  MOVWF  29
032B:  ADDWF  29,F
032C:  ADDLW  E2
032D:  MOVWF  2A
032E:  ADDLW  32
032F:  MOVWF  2C
0330:  MOVF   27,W
0331:  ANDLW  0F
0332:  ADDWF  2A,F
0333:  ADDWF  2A,F
0334:  ADDWF  2C,F
0335:  ADDLW  E9
0336:  MOVWF  2B
0337:  ADDWF  2B,F
0338:  ADDWF  2B,F
0339:  SWAPF  26,W
033A:  ANDLW  0F
033B:  ADDWF  2B,F
033C:  ADDWF  2C,F
033D:  RLF    2B,F
033E:  RLF    2C,F
033F:  COMF   2C,F
0340:  RLF    2C,F
0341:  MOVF   26,W
0342:  ANDLW  0F
0343:  ADDWF  2C,F
0344:  RLF    29,F
0345:  MOVLW  07
0346:  MOVWF  28
0347:  MOVLW  0A
0348:  ADDWF  2C,F
0349:  DECF   2B,F
034A:  BTFSS  03.0
034B:  GOTO   348
034C:  ADDWF  2B,F
034D:  DECF   2A,F
034E:  BTFSS  03.0
034F:  GOTO   34C
0350:  ADDWF  2A,F
0351:  DECF   29,F
0352:  BTFSS  03.0
0353:  GOTO   350
0354:  ADDWF  29,F
0355:  DECF   28,F
0356:  BTFSS  03.0
0357:  GOTO   354
0358:  MOVLW  28
0359:  MOVWF  04
035A:  BCF    03.7
035B:  MOVLW  07
035C:  ANDWF  2D,W
035D:  BCF    2D.6
035E:  ADDWF  04,F
035F:  MOVLW  2C
0360:  SUBWF  04,W
0361:  BTFSC  03.2
0362:  BSF    2D.6
0363:  MOVF   00,W
0364:  MOVWF  77
0365:  BTFSS  03.2
0366:  GOTO   36F
0367:  BTFSC  2D.6
0368:  GOTO   36F
0369:  BTFSC  2D.4
036A:  GOTO   381
036B:  BTFSC  2D.3
036C:  GOTO   36F
036D:  MOVLW  20
036E:  GOTO   372
036F:  BSF    2D.3
0370:  BCF    2D.4
0371:  MOVLW  30
0372:  ADDWF  77,F
0373:  CLRF   27
0374:  MOVF   04,W
0375:  MOVWF  26
0376:  BCF    27.0
0377:  BTFSC  03.7
0378:  BSF    27.0
0379:  MOVF   77,W
037A:  MOVWF  33
037B:  CALL   29F
037C:  MOVF   26,W
037D:  MOVWF  04
037E:  BCF    03.7
037F:  BTFSC  27.0
0380:  BSF    03.7
0381:  INCF   04,F
0382:  BTFSS  2D.6
0383:  GOTO   35F
0384:  BCF    0A.3
0385:  BCF    0A.4
0386:  GOTO   533 (RETURN)
0387:  BTFSC  03.1
0388:  GOTO   38C
0389:  MOVLW  3B
038A:  MOVWF  04
038B:  BCF    03.7
038C:  CLRF   77
038D:  CLRF   78
038E:  CLRF   79
038F:  CLRF   7A
0390:  CLRF   3B
0391:  CLRF   3C
0392:  CLRF   3D
0393:  CLRF   3E
0394:  MOVF   3A,W
0395:  IORWF  39,W
0396:  IORWF  38,W
0397:  IORWF  37,W
0398:  BTFSC  03.2
0399:  GOTO   3CA
039A:  MOVLW  20
039B:  MOVWF  3F
039C:  BCF    03.0
039D:  RLF    33,F
039E:  RLF    34,F
039F:  RLF    35,F
03A0:  RLF    36,F
03A1:  RLF    3B,F
03A2:  RLF    3C,F
03A3:  RLF    3D,F
03A4:  RLF    3E,F
03A5:  MOVF   3A,W
03A6:  SUBWF  3E,W
03A7:  BTFSS  03.2
03A8:  GOTO   3B3
03A9:  MOVF   39,W
03AA:  SUBWF  3D,W
03AB:  BTFSS  03.2
03AC:  GOTO   3B3
03AD:  MOVF   38,W
03AE:  SUBWF  3C,W
03AF:  BTFSS  03.2
03B0:  GOTO   3B3
03B1:  MOVF   37,W
03B2:  SUBWF  3B,W
03B3:  BTFSS  03.0
03B4:  GOTO   3C4
03B5:  MOVF   37,W
03B6:  SUBWF  3B,F
03B7:  MOVF   38,W
03B8:  BTFSS  03.0
03B9:  INCFSZ 38,W
03BA:  SUBWF  3C,F
03BB:  MOVF   39,W
03BC:  BTFSS  03.0
03BD:  INCFSZ 39,W
03BE:  SUBWF  3D,F
03BF:  MOVF   3A,W
03C0:  BTFSS  03.0
03C1:  INCFSZ 3A,W
03C2:  SUBWF  3E,F
03C3:  BSF    03.0
03C4:  RLF    77,F
03C5:  RLF    78,F
03C6:  RLF    79,F
03C7:  RLF    7A,F
03C8:  DECFSZ 3F,F
03C9:  GOTO   39C
03CA:  MOVF   3B,W
03CB:  MOVWF  00
03CC:  INCF   04,F
03CD:  MOVF   3C,W
03CE:  MOVWF  00
03CF:  INCF   04,F
03D0:  MOVF   3D,W
03D1:  MOVWF  00
03D2:  INCF   04,F
03D3:  MOVF   3E,W
03D4:  MOVWF  00
03D5:  RETURN
03D6:  MOVF   04,W
03D7:  MOVWF  2B
03D8:  MOVF   2A,W
03D9:  MOVWF  2D
03DA:  BTFSC  03.2
03DB:  GOTO   3F5
03DC:  MOVF   29,W
03DD:  MOVWF  36
03DE:  MOVF   28,W
03DF:  MOVWF  35
03E0:  MOVF   27,W
03E1:  MOVWF  34
03E2:  MOVF   26,W
03E3:  MOVWF  33
03E4:  CLRF   3A
03E5:  CLRF   39
03E6:  MOVLW  20
03E7:  MOVWF  38
03E8:  MOVLW  82
03E9:  MOVWF  37
03EA:  CALL   0D5
03EB:  MOVF   7A,W
03EC:  MOVWF  29
03ED:  MOVF   79,W
03EE:  MOVWF  28
03EF:  MOVF   78,W
03F0:  MOVWF  27
03F1:  MOVF   77,W
03F2:  MOVWF  26
03F3:  DECFSZ 2D,F
03F4:  GOTO   3DC
03F5:  MOVF   29,W
03F6:  MOVWF  36
03F7:  MOVF   28,W
03F8:  MOVWF  35
03F9:  MOVF   27,W
03FA:  MOVWF  34
03FB:  MOVF   26,W
03FC:  MOVWF  33
03FD:  MOVF   33,W
03FE:  SUBLW  B6
03FF:  MOVWF  33
0400:  CLRF   7A
0401:  MOVF   34,W
0402:  MOVWF  37
0403:  BSF    34.7
0404:  BCF    03.0
0405:  RRF    34,F
0406:  RRF    35,F
0407:  RRF    36,F
0408:  RRF    7A,F
0409:  RRF    79,F
040A:  RRF    78,F
040B:  RRF    77,F
040C:  DECFSZ 33,F
040D:  GOTO   404
040E:  BTFSS  37.7
040F:  GOTO   41B
0410:  COMF   77,F
0411:  COMF   78,F
0412:  COMF   79,F
0413:  COMF   7A,F
0414:  INCF   77,F
0415:  BTFSC  03.2
0416:  INCF   78,F
0417:  BTFSC  03.2
0418:  INCF   79,F
0419:  BTFSC  03.2
041A:  INCF   7A,F
041B:  MOVF   7A,W
041C:  MOVWF  29
041D:  MOVF   79,W
041E:  MOVWF  28
041F:  MOVF   78,W
0420:  MOVWF  27
0421:  MOVF   77,W
0422:  MOVWF  26
0423:  BTFSS  29.7
0424:  GOTO   432
0425:  DECF   2B,F
0426:  BSF    2B.5
0427:  COMF   26,F
0428:  COMF   27,F
0429:  COMF   28,F
042A:  COMF   29,F
042B:  INCF   26,F
042C:  BTFSC  03.2
042D:  INCF   27,F
042E:  BTFSC  03.2
042F:  INCF   28,F
0430:  BTFSC  03.2
0431:  INCF   29,F
0432:  MOVLW  3B
0433:  MOVWF  32
0434:  MOVLW  9A
0435:  MOVWF  31
0436:  MOVLW  CA
0437:  MOVWF  30
0438:  CLRF   2F
0439:  MOVLW  0A
043A:  MOVWF  2D
043B:  MOVF   2A,W
043C:  BTFSC  03.2
043D:  INCF   2B,F
043E:  BSF    03.1
043F:  MOVLW  26
0440:  MOVWF  04
0441:  BCF    03.7
0442:  MOVF   29,W
0443:  MOVWF  36
0444:  MOVF   28,W
0445:  MOVWF  35
0446:  MOVF   27,W
0447:  MOVWF  34
0448:  MOVF   26,W
0449:  MOVWF  33
044A:  MOVF   32,W
044B:  MOVWF  3A
044C:  MOVF   31,W
044D:  MOVWF  39
044E:  MOVF   30,W
044F:  MOVWF  38
0450:  MOVF   2F,W
0451:  MOVWF  37
0452:  CALL   387
0453:  MOVF   78,W
0454:  MOVF   77,F
0455:  BTFSS  03.2
0456:  GOTO   46A
0457:  INCF   2A,W
0458:  SUBWF  2D,W
0459:  BTFSC  03.2
045A:  GOTO   46A
045B:  MOVF   2B,W
045C:  BTFSC  03.2
045D:  GOTO   46C
045E:  ANDLW  0F
045F:  SUBWF  2D,W
0460:  BTFSC  03.2
0461:  GOTO   464
0462:  BTFSC  03.0
0463:  GOTO   49C
0464:  BTFSC  2B.7
0465:  GOTO   49C
0466:  BTFSC  2B.6
0467:  GOTO   46C
0468:  MOVLW  20
0469:  GOTO   498
046A:  MOVLW  20
046B:  ANDWF  2B,F
046C:  BTFSS  2B.5
046D:  GOTO   47A
046E:  BCF    2B.5
046F:  MOVF   2A,W
0470:  BTFSS  03.2
0471:  DECF   2B,F
0472:  MOVF   77,W
0473:  MOVWF  2B
0474:  MOVLW  2D
0475:  MOVWF  33
0476:  CALL   29F
0477:  MOVF   2B,W
0478:  MOVWF  77
0479:  CLRF   2B
047A:  MOVF   2A,W
047B:  SUBWF  2D,W
047C:  BTFSS  03.2
047D:  GOTO   488
047E:  MOVF   77,W
047F:  MOVWF  2B
0480:  MOVLW  2E
0481:  MOVWF  33
0482:  CALL   29F
0483:  MOVF   2B,W
0484:  MOVWF  77
0485:  MOVLW  20
0486:  ANDWF  2B,F
0487:  MOVLW  00
0488:  MOVLW  30
0489:  BTFSS  2B.5
048A:  GOTO   498
048B:  BCF    2B.5
048C:  MOVF   2A,W
048D:  BTFSS  03.2
048E:  DECF   2B,F
048F:  MOVF   77,W
0490:  MOVWF  2B
0491:  MOVLW  2D
0492:  MOVWF  33
0493:  CALL   29F
0494:  MOVF   2B,W
0495:  MOVWF  77
0496:  CLRF   2B
0497:  MOVLW  30
0498:  ADDWF  77,F
0499:  MOVF   77,W
049A:  MOVWF  33
049B:  CALL   29F
049C:  BCF    03.1
049D:  MOVF   32,W
049E:  MOVWF  36
049F:  MOVF   31,W
04A0:  MOVWF  35
04A1:  MOVF   30,W
04A2:  MOVWF  34
04A3:  MOVF   2F,W
04A4:  MOVWF  33
04A5:  CLRF   3A
04A6:  CLRF   39
04A7:  CLRF   38
04A8:  MOVLW  0A
04A9:  MOVWF  37
04AA:  CALL   387
04AB:  MOVF   7A,W
04AC:  MOVWF  32
04AD:  MOVF   79,W
04AE:  MOVWF  31
04AF:  MOVF   78,W
04B0:  MOVWF  30
04B1:  MOVF   77,W
04B2:  MOVWF  2F
04B3:  DECFSZ 2D,F
04B4:  GOTO   43E
04B5:  BCF    0A.3
04B6:  BCF    0A.4
04B7:  GOTO   54A (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC = 10        // 10 bit ADC 
....................  
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT  
....................  
.................... #use delay (clock=4000000) 
*
0011:  MOVLW  34
0012:  MOVWF  04
0013:  BCF    03.7
0014:  MOVF   00,W
0015:  BTFSC  03.2
0016:  GOTO   025
0017:  MOVLW  01
0018:  MOVWF  78
0019:  CLRF   77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  DECFSZ 78,F
001D:  GOTO   019
001E:  MOVLW  4A
001F:  MOVWF  77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  GOTO   023
0023:  DECFSZ 00,F
0024:  GOTO   017
0025:  RETURN
.................... #use fast_io(b) 
.................... #use fast_io(e) 
....................  
.................... #define use_portb_lcd TRUE    // LCD varsayilan olarak D portuna baglidir.Baska bir porta baglamak icin bu kod kullanilir 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003E:  MOVLW  0F
003F:  BSF    03.5
0040:  ANDWF  06,W
0041:  IORLW  F0
0042:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0043:  BCF    03.5
0044:  BSF    06.2
....................    delay_cycles(1); 
0045:  NOP
....................    lcd_output_enable(1); 
0046:  BSF    06.0
....................    delay_cycles(1); 
0047:  NOP
....................    high = lcd_read_nibble(); 
0048:  CALL   032
0049:  MOVF   78,W
004A:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
004B:  BCF    06.0
....................    delay_cycles(1); 
004C:  NOP
....................    lcd_output_enable(1); 
004D:  BSF    06.0
....................    delay_us(1); 
004E:  NOP
....................    low = lcd_read_nibble(); 
004F:  CALL   032
0050:  MOVF   78,W
0051:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
0052:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0053:  MOVLW  0F
0054:  BSF    03.5
0055:  ANDWF  06,W
0056:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0057:  BCF    03.5
0058:  SWAPF  3B,W
0059:  MOVWF  77
005A:  MOVLW  F0
005B:  ANDWF  77,F
005C:  MOVF   77,W
005D:  IORWF  3A,W
005E:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0032:  MOVF   06,W
0033:  MOVWF  77
0034:  SWAPF  06,W
0035:  ANDLW  0F
0036:  MOVWF  78
....................   #endif 
0037:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0026:  SWAPF  3B,W
0027:  ANDLW  F0
0028:  MOVWF  77
0029:  MOVLW  0F
002A:  ANDWF  06,W
002B:  IORWF  77,W
002C:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
002D:  NOP
....................    lcd_output_enable(1); 
002E:  BSF    06.0
....................    delay_us(2); 
002F:  GOTO   030
....................    lcd_output_enable(0); 
0030:  BCF    06.0
0031:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0038:  BSF    03.5
0039:  BCF    06.0
....................    lcd_rs_tris(); 
003A:  BCF    06.1
....................    lcd_rw_tris(); 
003B:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003C:  BCF    03.5
003D:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005F:  MOVF   78,W
0060:  MOVWF  3A
0061:  BTFSC  3A.7
0062:  GOTO   03E
....................    lcd_output_rs(address); 
0063:  BTFSS  38.0
0064:  BCF    06.1
0065:  BTFSC  38.0
0066:  BSF    06.1
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_rw(0); 
0068:  BCF    06.2
....................    delay_cycles(1); 
0069:  NOP
....................    lcd_output_enable(0); 
006A:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
006B:  SWAPF  39,W
006C:  MOVWF  3A
006D:  MOVLW  0F
006E:  ANDWF  3A,F
006F:  MOVF   3A,W
0070:  MOVWF  3B
0071:  CALL   026
....................    lcd_send_nibble(n & 0xf); 
0072:  MOVF   39,W
0073:  ANDLW  0F
0074:  MOVWF  3A
0075:  MOVWF  3B
0076:  CALL   026
0077:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0078:  MOVLW  28
0079:  MOVWF  27
007A:  MOVLW  0C
007B:  MOVWF  28
007C:  MOVLW  01
007D:  MOVWF  29
007E:  MOVLW  06
007F:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0080:  BCF    06.0
....................    lcd_output_rs(0); 
0081:  BCF    06.1
....................    lcd_output_rw(0); 
0082:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0083:  MOVLW  0F
0084:  BSF    03.5
0085:  ANDWF  06,W
0086:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0087:  BCF    06.0
....................    lcd_rs_tris(); 
0088:  BCF    06.1
....................    lcd_rw_tris(); 
0089:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
008A:  MOVLW  0F
008B:  BCF    03.5
008C:  MOVWF  34
008D:  CALL   011
....................    for(i=1;i<=3;++i) 
008E:  MOVLW  01
008F:  MOVWF  26
0090:  MOVF   26,W
0091:  SUBLW  03
0092:  BTFSS  03.0
0093:  GOTO   09C
....................    { 
....................        lcd_send_nibble(3); 
0094:  MOVLW  03
0095:  MOVWF  3B
0096:  CALL   026
....................        delay_ms(5); 
0097:  MOVLW  05
0098:  MOVWF  34
0099:  CALL   011
009A:  INCF   26,F
009B:  GOTO   090
....................    } 
....................     
....................    lcd_send_nibble(2); 
009C:  MOVLW  02
009D:  MOVWF  3B
009E:  CALL   026
....................    delay_ms(5); 
009F:  MOVLW  05
00A0:  MOVWF  34
00A1:  CALL   011
....................    for(i=0;i<=3;++i) 
00A2:  CLRF   26
00A3:  MOVF   26,W
00A4:  SUBLW  03
00A5:  BTFSS  03.0
00A6:  GOTO   0B3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A7:  MOVLW  27
00A8:  ADDWF  26,W
00A9:  MOVWF  04
00AA:  BCF    03.7
00AB:  MOVF   00,W
00AC:  MOVWF  2B
00AD:  CLRF   38
00AE:  MOVF   2B,W
00AF:  MOVWF  39
00B0:  CALL   038
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B1:  INCF   26,F
00B2:  GOTO   0A3
00B3:  BCF    0A.3
00B4:  BCF    0A.4
00B5:  GOTO   4E2 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
028D:  DECFSZ 35,W
028E:  GOTO   290
028F:  GOTO   293
....................       address=LCD_LINE_TWO; 
0290:  MOVLW  40
0291:  MOVWF  36
0292:  GOTO   294
....................    else 
....................       address=0; 
0293:  CLRF   36
....................       
....................    address+=x-1; 
0294:  MOVLW  01
0295:  SUBWF  34,W
0296:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
0297:  MOVF   36,W
0298:  IORLW  80
0299:  MOVWF  37
029A:  CLRF   38
029B:  MOVF   37,W
029C:  MOVWF  39
029D:  CALL   038
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
029E:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
029F:  MOVF   33,W
02A0:  XORLW  07
02A1:  BTFSC  03.2
02A2:  GOTO   2AD
02A3:  XORLW  0B
02A4:  BTFSC  03.2
02A5:  GOTO   2B2
02A6:  XORLW  06
02A7:  BTFSC  03.2
02A8:  GOTO   2BA
02A9:  XORLW  02
02AA:  BTFSC  03.2
02AB:  GOTO   2C0
02AC:  GOTO   2C5
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02AD:  MOVLW  01
02AE:  MOVWF  34
02AF:  MOVWF  35
02B0:  CALL   28D
02B1:  GOTO   2CA
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02B2:  CLRF   38
02B3:  MOVLW  01
02B4:  MOVWF  39
02B5:  CALL   038
....................                      delay_ms(2); 
02B6:  MOVLW  02
02B7:  MOVWF  34
02B8:  CALL   011
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02B9:  GOTO   2CA
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02BA:  MOVLW  01
02BB:  MOVWF  34
02BC:  MOVLW  02
02BD:  MOVWF  35
02BE:  CALL   28D
02BF:  GOTO   2CA
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02C0:  CLRF   38
02C1:  MOVLW  10
02C2:  MOVWF  39
02C3:  CALL   038
02C4:  GOTO   2CA
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02C5:  MOVLW  01
02C6:  MOVWF  38
02C7:  MOVF   33,W
02C8:  MOVWF  39
02C9:  CALL   038
....................      #endif 
....................    } 
02CA:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned int16 adc_oku; 
.................... float voltaj; 
....................  
.................... void main(){ 
*
04B8:  MOVF   03,W
04B9:  ANDLW  1F
04BA:  MOVWF  03
04BB:  BSF    03.5
04BC:  BSF    1F.0
04BD:  BSF    1F.1
04BE:  BSF    1F.2
04BF:  BCF    1F.3
04C0:  BCF    03.7
....................    setup_psp(PSP_DISABLED); setup_timer_1(T1_DISABLED); setup_timer_2(T2_DISABLED,0,1); setup_CCP1(CCP_OFF); setup_CCP2(CCP_OFF);  
04C1:  BCF    09.4
04C2:  BCF    03.5
04C3:  CLRF   10
04C4:  MOVLW  00
04C5:  MOVWF  78
04C6:  MOVWF  12
04C7:  MOVLW  00
04C8:  BSF    03.5
04C9:  MOVWF  12
04CA:  MOVLW  F0
04CB:  BCF    03.5
04CC:  ANDWF  17,F
04CD:  ANDWF  1D,F
....................    
....................    set_tris_e(0x0F);  
04CE:  BSF    03.5
04CF:  BSF    09.0
04D0:  BSF    09.1
04D1:  BSF    09.2
....................    set_tris_b(0x00); 
04D2:  MOVLW  00
04D3:  MOVWF  06
....................     
....................    setup_adc(adc_clock_div_32); 
04D4:  BCF    03.5
04D5:  BCF    1F.6
04D6:  BSF    1F.7
04D7:  BSF    03.5
04D8:  BSF    1F.7
04D9:  BCF    03.5
04DA:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF); 
04DB:  BSF    03.5
04DC:  BCF    1F.0
04DD:  BCF    1F.1
04DE:  BCF    1F.2
04DF:  BSF    1F.3
....................     
....................    lcd_init(); 
04E0:  BCF    03.5
04E1:  GOTO   078
....................     
....................    while(1){ 
....................        
....................       set_adc_channel(5); 
04E2:  MOVLW  28
04E3:  MOVWF  78
04E4:  MOVF   1F,W
04E5:  ANDLW  C7
04E6:  IORWF  78,W
04E7:  MOVWF  1F
....................       delay_us(20); 
04E8:  MOVLW  06
04E9:  MOVWF  77
04EA:  DECFSZ 77,F
04EB:  GOTO   4EA
04EC:  NOP
....................       adc_oku = read_adc(); 
04ED:  BSF    1F.2
04EE:  BTFSC  1F.2
04EF:  GOTO   4EE
04F0:  BSF    03.5
04F1:  MOVF   1E,W
04F2:  BCF    03.5
04F3:  MOVWF  20
04F4:  MOVF   1E,W
04F5:  MOVWF  21
....................       voltaj = 1 + (0.001955034213*adc_oku); 
04F6:  MOVF   21,W
04F7:  MOVWF  27
04F8:  MOVF   20,W
04F9:  MOVWF  26
04FA:  GOTO   0B6
04FB:  MOVLW  08
04FC:  MOVWF  36
04FD:  MOVLW  20
04FE:  MOVWF  35
04FF:  CLRF   34
0500:  MOVLW  76
0501:  MOVWF  33
0502:  MOVF   7A,W
0503:  MOVWF  3A
0504:  MOVF   79,W
0505:  MOVWF  39
0506:  MOVF   78,W
0507:  MOVWF  38
0508:  MOVF   77,W
0509:  MOVWF  37
050A:  CALL   0D5
050B:  BCF    03.1
050C:  CLRF   29
050D:  CLRF   28
050E:  CLRF   27
050F:  MOVLW  7F
0510:  MOVWF  26
0511:  MOVF   7A,W
0512:  MOVWF  2D
0513:  MOVF   79,W
0514:  MOVWF  2C
0515:  MOVF   78,W
0516:  MOVWF  2B
0517:  MOVF   77,W
0518:  MOVWF  2A
0519:  GOTO   14A
051A:  MOVF   7A,W
051B:  MOVWF  25
051C:  MOVF   79,W
051D:  MOVWF  24
051E:  MOVF   78,W
051F:  MOVWF  23
0520:  MOVF   77,W
0521:  MOVWF  22
....................       printf(lcd_putc,"\fDigit:%lu",adc_oku); 
0522:  MOVLW  04
0523:  BSF    03.6
0524:  MOVWF  0D
0525:  MOVLW  00
0526:  MOVWF  0F
0527:  BCF    03.0
0528:  MOVLW  07
0529:  BCF    03.6
052A:  MOVWF  26
052B:  CALL   2CB
052C:  MOVLW  10
052D:  MOVWF  04
052E:  MOVF   21,W
052F:  MOVWF  27
0530:  MOVF   20,W
0531:  MOVWF  26
0532:  GOTO   322
....................       printf(lcd_putc,"\nVoltaj:%.3fV",voltaj); 
0533:  MOVLW  0A
0534:  BSF    03.6
0535:  MOVWF  0D
0536:  MOVLW  00
0537:  MOVWF  0F
0538:  BCF    03.0
0539:  MOVLW  08
053A:  BCF    03.6
053B:  MOVWF  26
053C:  CALL   2CB
053D:  MOVLW  89
053E:  MOVWF  04
053F:  MOVF   25,W
0540:  MOVWF  29
0541:  MOVF   24,W
0542:  MOVWF  28
0543:  MOVF   23,W
0544:  MOVWF  27
0545:  MOVF   22,W
0546:  MOVWF  26
0547:  MOVLW  03
0548:  MOVWF  2A
0549:  GOTO   3D6
054A:  MOVLW  56
054B:  MOVWF  33
054C:  CALL   29F
....................       delay_ms(500); 
054D:  MOVLW  02
054E:  MOVWF  26
054F:  MOVLW  FA
0550:  MOVWF  34
0551:  CALL   011
0552:  DECFSZ 26,F
0553:  GOTO   54F
0554:  GOTO   4E2
....................    } 
....................  
.................... } 
0555:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
